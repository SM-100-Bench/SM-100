{"repo_id": "codeclysm_extract_4a98568021b8e289345c7f526ccbd7ed732cf286", "bugs": [{"description": "The Windows-specific tar archive (evil-win.tar) incorrectly includes Unix-style path traversal entries due to appending evilPathTraversalFiles to winSpecificPathTraversalFiles. This mixes path styles in platform-specific test data, potentially invalidating Windows path traversal tests.", "file": "evil_generator/main.go", "line": 38}], "updated_files": {"/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp7aqxjc0m/evil_generator/main.go": "// This utility is used to generate the archives used as testdata for zipslip vulnerability\npackage main\n\n//go:generate go run main.go ../testdata/zipslip\n\nimport (\n        \"archive/tar\"\n        \"archive/zip\"\n        \"bytes\"\n        \"log\"\n        \"os\"\n\n        \"github.com/arduino/go-paths-helper\"\n)\n\nfunc main() {\n        if len(os.Args) != 2 {\n                log.Fatal(\"Missing output directory\")\n        }\n        outputDir := paths.New(os.Args[1])\n        if outputDir.IsNotDir() {\n                log.Fatalf(\"Output path %s is not a directory\", outputDir)\n        }\n\n        evilPathTraversalFiles := []string{\n                \"..\",\n                \"../../../../../../../../../../../../../../../../../../../../tmp/evil.txt\",\n                \"some/path/../../../../../../../../../../../../../../../../../../../../tmp/evil.txt\",\n                \"/../../../../../../../../../../../../../../../../../../../../tmp/evil.txt\",\n                \"/some/path/../../../../../../../../../../../../../../../../../../../../tmp/evil.txt\",\n        }\n        winSpecificPathTraversalFiles := []string{\n                \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\tmp\\\\evil.txt\",\n                \"some\\\\path\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\tmp\\\\evil.txt\",\n                \"\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\tmp\\\\evil.txt\",\n                \"\\\\some\\\\path\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\tmp\\\\evil.txt\",\n        }\n\n\n        // Generate evil zip\n        {\n                buf := new(bytes.Buffer)\n                w := zip.NewWriter(buf)\n                for _, file := range winSpecificPathTraversalFiles {\n                        if f, err := w.Create(file); err != nil {\n                                log.Fatal(err)\n                        } else if _, err = f.Write([]byte(\"TEST\")); err != nil {\n                                log.Fatal(err)\n                        }\n                }\n                if err := w.Close(); err != nil {\n                        log.Fatal(err)\n                }\n                if err := outputDir.Join(\"evil.zip\").WriteFile(buf.Bytes()); err != nil {\n                        log.Fatal(err)\n                }\n        }\n\n        // Generate evil tar\n        {\n                buf := new(bytes.Buffer)\n                w := tar.NewWriter(buf)\n                for _, file := range evilPathTraversalFiles {\n                        if err := w.WriteHeader(&tar.Header{\n                                Name: file,\n                                Size: 4,\n                                Mode: 0666,\n                        }); err != nil {\n                                log.Fatal(err)\n                        }\n                        if _, err := w.Write([]byte(\"TEST\")); err != nil {\n                                log.Fatal(err)\n                        }\n                }\n                if err := w.Close(); err != nil {\n                        log.Fatal(err)\n                }\n                if err := outputDir.Join(\"evil.tar\").WriteFile(buf.Bytes()); err != nil {\n                        log.Fatal(err)\n                }\n        }\n\n        // Generate evil tar for windows\n        {\n                buf := new(bytes.Buffer)\n                w := tar.NewWriter(buf)\n                for _, file := range winSpecificPathTraversalFiles {\n                        if err := w.WriteHeader(&tar.Header{\n                                Name: file,\n                                Size: 4,\n                                Mode: 0666,\n                        }); err != nil {\n                                log.Fatal(err)\n                        }\n                        if _, err := w.Write([]byte(\"TEST\")); err != nil {\n                                log.Fatal(err)\n                        }\n                }\n                if err := w.Close(); err != nil {\n                        log.Fatal(err)\n                }\n                if err := outputDir.Join(\"evil-win.tar\").WriteFile(buf.Bytes()); err != nil {\n                        log.Fatal(err)\n                }\n        }\n}\n"}}
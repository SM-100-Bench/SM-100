{"repo_id": "redis_node-redis_db0e8c53cc7a68e65b591dc2e457b5a7e7f5065b", "bugs": [], "updated_files": {"/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp5xytds59/lib/customErrors.js": "'use strict';\n\nvar util = require('util');\n\nfunction AbortError (obj) {\n    Error.call(this);\n    Error.captureStackTrace(this, this.constructor);\n    this.name = this.constructor.name;\n    this.message = obj.message || '';\n    Object.keys(obj).forEach((key) => {\n        this[key] = obj[key];\n    });\n    for (var keys = Object.keys(obj), key = keys.pop(); key; key = keys.pop()) {\n        this[key] = obj[key];\n    }\n}\n\nfunction AggregateError (obj) {\n    Error.captureStackTrace(this, this.constructor);\n    Object.defineProperty(this, 'message', {\n        value: obj.message || '',\n        configurable: true,\n        writable: true\n    });\n    for (var keys = Object.keys(obj), key = keys.pop(); key; key = keys.pop()) {\n        this[key] = obj[key];\n    }\n}\n\nutil.inherits(AbortError, Error);\nutil.inherits(AggregateError, AbortError);\n\nObject.defineProperty(AbortError.prototype, 'name', {\n    value: 'AbortError',\n    // configurable: true,\n    writable: true\n});\nObject.defineProperty(AggregateError.prototype, 'name', {\n    value: 'AggregateError',\n    // configurable: true,\n    writable: true\n});\n\nmodule.exports = {\n    AbortError: AbortError,\n    AggregateError: AggregateError\n};\n", "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp5xytds59/test/lib/redis-process.js": "'use strict';\n\n// helper to start and stop the redis process.\nvar config = require('./config');\nvar fs = require('fs');\nvar path = require('path');\nvar spawn = require('win-spawn');\nvar tcpPortUsed = require('tcp-port-used');\nvar bluebird = require('bluebird');\n\n// wait for redis to be listening in\n// all three modes (ipv4, ipv6, socket).\nfunction waitForRedis (available, cb, port) {\n    if (process.platform === 'win32') return cb();\n\n    var time = Date.now();\n    var running = false;\n    var socket = '/tmp/redis.sock';\n    if (port) {\n        // We have to distinguishe the redis sockets if we have more than a single redis instance running\n        socket = '/tmp/redis' + port + '.sock';\n    }\n    port = port || config.PORT;\n    var id = setInterval(function () {\n        if (running) return;\n        running = true;\n        bluebird.join(\n            tcpPortUsed.check(port, '127.0.0.1'),\n            tcpPortUsed.check(port, '::1')\n        function (ipV4, ipV6) {\n            if (ipV6 === available && ipV4 === available) {\n                if (fs.existsSync(socket) === available) {\n                    clearInterval(id);\n                    return cb();\n                }\n                // The same message applies for can't stop but we ignore that case\n                throw new Error('Port ' + port + ' is already in use. Tests can\\'t start.\\n');\n            }\n            if (Date.now() - time > 6000) {\n                throw new Error('Redis could not start on port ' + (port || config.PORT) + '\\n');\n            }\n            running = false;\n        }).catch(function (err) {\n            console.error('\\x1b[31m' + err.stack + '\\x1b[0m\\n');\n            process.exit(1);\n        });\n    }, 100);\n}\n\nmodule.exports = {\n    start: function (done, conf, port) {\n        var spawnFailed = false;\n        // spawn redis with our testing configuration.\n        var confFile = conf || path.resolve(__dirname, '../conf/redis.conf');\n        var rp = spawn('redis-server', [confFile], {});\n\n        // capture a failure booting redis, and give\n        // the user running the test some directions.\n        rp.once('exit', function (code) {\n            if (code !== 0) spawnFailed = true;\n        });\n\n        // wait for redis to become available, by\n        // checking the port we bind on.\n        waitForRedis(true, function () {\n            // return an object that can be used in\n            // an after() block to shutdown redis.\n            return done(null, {\n                spawnFailed: function () {\n                    return spawnFailed;\n                },\n                stop: function (done) {\n                    if (spawnFailed) return done();\n                    rp.once('exit', function (code) {\n                        var error = null;\n                        if (code !== null && code !== 0) {\n                            error = new Error('Redis shutdown failed with code ' + code);\n                        }\n                        waitForRedis(false, function () {\n                            return done(error);\n                        }, port);\n                    });\n                    rp.kill('SIGTERM');\n                }\n            });\n        }, port);\n    }\n};\n"}}
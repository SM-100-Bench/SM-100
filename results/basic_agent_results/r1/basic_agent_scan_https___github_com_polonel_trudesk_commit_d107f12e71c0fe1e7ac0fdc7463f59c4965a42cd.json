{"repo_id": "polonel_trudesk_d107f12e71c0fe1e7ac0fdc7463f59c4965a42cd", "bugs": [{"description": "Potential SQL injection vulnerability due to lack of parameterization in database queries. User input directly interpolated into SQL statements could allow arbitrary command execution.", "file": "src/database/index.js", "line": 0}, {"description": "Missing authentication middleware on sensitive API endpoints. Routes in v1/v2 controllers might expose user data or admin functions without proper authorization checks.", "file": "src/routes/index.js", "line": 0}, {"description": "Improper error handling in async functions could lead to uncaught promise rejections. Controllers using async operations without try/catch blocks might crash the process when errors occur.", "file": "src/controllers/api/v1/users.js", "line": 0}, {"description": "Insecure CORS configuration allowing all origins ('*') without proper access controls, potentially exposing APIs to cross-origin attacks.", "file": "src/webserver.js", "line": 0}, {"description": "Potential SQL injection vulnerability due to lack of parameterization in database queries. User input directly interpolated into SQL statements could allow arbitrary command execution.", "file": "src/database/index.js", "line": 0}, {"description": "Missing authentication middleware on sensitive API endpoints. Routes in v1/v2 controllers might expose user data or admin functions without proper authorization checks.", "file": "src/routes/index.js", "line": 0}, {"description": "Improper error handling in async functions could lead to uncaught promise rejections. Controllers using async operations without try/catch blocks might crash the process when errors occur.", "file": "src/controllers/api/v1/users.js", "line": 0}, {"description": "Insecure CORS configuration allowing all origins ('*') without proper access controls, potentially exposing APIs to cross-origin attacks.", "file": "src/webserver.js", "line": 0}, {"description": "Elasticsearch query injection vulnerability - user-controlled input 'req.query.q' is directly used in multi_match query without sanitization/escaping. This could allow attackers to craft malicious search payloads.", "file": "src/controllers/api/v1/elasticsearch.js", "line": 81}], "updated_files": {"/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmptb_2qm1z/src/controllers/api/v1/elasticsearch.js": "/*\n      .                             .o8                     oooo\n   .o8                             \"888                     `888\n .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n   888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n   888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n   888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n   \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n ========================================================================\n Created:    10/15/2018\n Author:     Chris Brame\n\n **/\n\nvar _ = require('lodash'),\n    async = require('async'),\n    winston = require('winston'),\n    es = require('../../../elasticsearch'),\n    ticketSchema = require('../../../models/ticket'),\n    groupSchema = require('../../../models/group');\n\nvar apiElasticSearch = {};\n\napiElasticSearch.rebuild = function(req, res) {\n    es.rebuildIndex();\n\n    return res.json({success: true});\n};\n\napiElasticSearch.status = function(req, res) {\n    var response = {\n        esStatus: global.esStatus\n    };\n\n    async.parallel([\n        function(done) {\n            es.getIndexCount(function(err, data) {\n                if (err) return done(err);\n                response.indexCount = (!_.isUndefined(data.count) ? data.count : 0);\n                return done();\n            });\n        },\n        function(done) {\n            ticketSchema.getCount(function(err, count) {\n                if (err) return done(err);\n                response.dbCount = count;\n                return done();\n            });\n        }\n    ], function(err) {\n        if (err) return res.status(500).json({success: false, error: err});\n\n        response.inSync = response.dbCount === response.indexCount;\n\n        res.json({success: true, status: response });\n    });\n};\n\napiElasticSearch.search = function(req, res) {\n    var limit = (!_.isUndefined(req.query['limit']) ? req.query.limit : 100);\n    try {\n        limit = parseInt(limit);\n    } catch (e) {\n        limit = 100;\n    }\n\n    groupSchema.getAllGroupsOfUserNoPopulate(req.user._id, function(err, groups) {\n        if (err) return res.status(400).json({success: false, error: err});\n\n        var g = _.map(groups, function(i) { return i._id; });\n\n        var obj = {\n            index: 'trudesk',\n            body: {\n                size: limit,\n                from: 0,\n                query: {\n                    bool: {\n                        must: {\n                            multi_match: {\n                                query: sanitizeElasticsearchQuery(req.query['q']),\n                                type: 'cross_fields',\n                                operator: 'and',\n                                fields: [\n                                    'uid^5',\n                                    'subject^4',\n                                    'issue^4',\n                                    'owner.fullname',\n                                    'owner.username',\n                                    'owner.email',\n                                    'comments.owner.email',\n                                    'tags.normalized',\n                                    'priority.name',\n                                    'type.name',\n                                    'group.name',\n                                    'comments.comment^3',\n                                    'notes.note^3',\n                                    'dateFormatted'\n                                ],\n                                tie_breaker: 0.3\n                            }\n                        },\n                        filter: {\n                            terms: { 'group._id': g}\n                        }\n                    }\n                }\n            }\n        };\n\n        es.esclient.search(obj).then(function(r) {\n            res.send(r);\n        });\n    });\n};\n\nmodule.exports = apiElasticSearch;"}}
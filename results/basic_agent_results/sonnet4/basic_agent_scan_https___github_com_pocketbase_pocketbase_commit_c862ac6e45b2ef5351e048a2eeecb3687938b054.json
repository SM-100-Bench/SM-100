{"repo_id": "pocketbase_pocketbase_c862ac6e45b2ef5351e048a2eeecb3687938b054", "bugs": [{"description": "Potential null pointer dereference in ResetBootstrapState method. The code checks if `db == nil` on line 451, but `db` is a pointer to a dbx.Builder (*dbx.Builder), not the dbx.Builder itself. The check should be `if *db == nil` to check if the actual dbx.Builder is nil. The current check will always be false since `db` is a pointer to a field in the struct, which is never nil.", "file": "core/base.go", "line": 451}, {"description": "Off-by-one error in retry interval calculation. In getDefaultRetryInterval function, the condition `attempt > len(defaultRetryIntervals)-1` should be `attempt >= len(defaultRetryIntervals)` or the array access should be `defaultRetryIntervals[attempt-1]`. Currently, when attempt=1, it accesses defaultRetryIntervals[1] (100ms) instead of defaultRetryIntervals[0] (50ms), and when attempt equals the array length, it will cause an index out of bounds panic.", "file": "core/db_retry.go", "line": 65}, {"description": "Potential null pointer dereference in ResetBootstrapState method. The code checks if `db == nil` on line 451, but `db` is a pointer to a dbx.Builder (*dbx.Builder), not the dbx.Builder itself. The check should be `if *db == nil` to check if the actual dbx.Builder is nil. The current check will always be false since `db` is a pointer to a field in the struct, which is never nil.", "file": "core/base.go", "line": 451}, {"description": "Off-by-one error in retry interval calculation. In getDefaultRetryInterval function, the condition `attempt > len(defaultRetryIntervals)-1` should be `attempt >= len(defaultRetryIntervals)` or the array access should be `defaultRetryIntervals[attempt-1]`. Currently, when attempt=1, it accesses defaultRetryIntervals[1] (100ms) instead of defaultRetryIntervals[0] (50ms), and when attempt equals the array length, it will cause an index out of bounds panic.", "file": "core/db_retry.go", "line": 65}, {"description": "In the collectionsImport function, there's a variable shadowing bug on line 37. The code checks `errors.As(err, &validationErrors)` but `err` refers to the validation error from form.validate() (line 19), not the import error `importErr` from line 30. This means validation errors from the import operation will never be properly detected and returned, causing incorrect error handling.", "file": "apis/collection_import.go", "line": 37}], "updated_files": {}}
{"repo_id": "photoprism_photoprism_2449", "bugs": [{"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "The Resample function can return a nil image if none of the resample method conditions are met. The variable 'resImg' is declared but never initialized if the method doesn't match any of the predefined constants (ResampleFit, ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleResize). This will cause the function to return nil, which could lead to a panic when the caller tries to use the returned image.", "file": "internal/thumb/resample.go", "line": 27}, {"description": "Potential file reading issue in OpenJpeg function. When autometa.Load() fails, the code falls back to imaging.Decode(fileReader) on line 40, but the fileReader may have already been partially consumed by the failed autometa.Load() call. This could cause the imaging.Decode() to fail or produce corrupted results because it's not reading from the beginning of the file.", "file": "internal/thumb/open_jpeg.go", "line": 40}, {"description": "Cross-platform path handling issue. The code uses path.Join() instead of filepath.Join() to construct file system paths. The path package is intended for URL paths and always uses forward slashes, while filepath.Join() should be used for file system paths to ensure proper behavior on Windows systems where backslashes are used as path separators.", "file": "internal/thumb/create.go", "line": 46}, {"description": "Inconsistent path separator usage. On line 46, path.Join() is used to construct the directory path, but on line 52, a hardcoded forward slash '/' is used in the fmt.Sprintf() to join the directory path with the filename. This creates inconsistency and could cause issues on Windows systems where backslashes should be used as path separators. The code should use filepath.Join() consistently for all file system path operations.", "file": "internal/thumb/create.go", "line": 52}, {"description": "Potential panic due to missing map key. In the Suffix function, ResampleMethods[method] is accessed without checking if the key exists in the map. The ResampleMethods map only contains entries for method-type ResampleOptions (ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleFit, ResampleResize), but ResampleOptions() can return other values like ResampleNearestNeighbor, ResampleDefault, or ResamplePng as the method. Accessing a non-existent map key will return the zero value (empty string), but this could lead to unexpected behavior in filename generation.", "file": "internal/thumb/create.go", "line": 22}, {"description": "Race condition in thumbnail creation. In the FromFile function, there's a potential race condition between checking if a thumbnail exists in cache (line 83) and creating a new one (lines 90-108). If multiple goroutines call this function simultaneously with the same parameters, they could all pass the cache check and then all attempt to create the same thumbnail file, potentially causing file corruption or write conflicts. The function should use proper locking or atomic file creation to prevent this race condition.", "file": "internal/thumb/create.go", "line": 83}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "The Resample function can return a nil image if none of the resample method conditions are met. The variable 'resImg' is declared but never initialized if the method doesn't match any of the predefined constants (ResampleFit, ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleResize). This will cause the function to return nil, which could lead to a panic when the caller tries to use the returned image.", "file": "internal/thumb/resample.go", "line": 27}, {"description": "Potential file reading issue in OpenJpeg function. When autometa.Load() fails, the code falls back to imaging.Decode(fileReader) on line 40, but the fileReader may have already been partially consumed by the failed autometa.Load() call. This could cause the imaging.Decode() to fail or produce corrupted results because it's not reading from the beginning of the file.", "file": "internal/thumb/open_jpeg.go", "line": 40}, {"description": "Cross-platform path handling issue. The code uses path.Join() instead of filepath.Join() to construct file system paths. The path package is intended for URL paths and always uses forward slashes, while filepath.Join() should be used for file system paths to ensure proper behavior on Windows systems where backslashes are used as path separators.", "file": "internal/thumb/create.go", "line": 46}, {"description": "Inconsistent path separator usage. On line 46, path.Join() is used to construct the directory path, but on line 52, a hardcoded forward slash '/' is used in the fmt.Sprintf() to join the directory path with the filename. This creates inconsistency and could cause issues on Windows systems where backslashes should be used as path separators. The code should use filepath.Join() consistently for all file system path operations.", "file": "internal/thumb/create.go", "line": 52}, {"description": "Potential panic due to missing map key. In the Suffix function, ResampleMethods[method] is accessed without checking if the key exists in the map. The ResampleMethods map only contains entries for method-type ResampleOptions (ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleFit, ResampleResize), but ResampleOptions() can return other values like ResampleNearestNeighbor, ResampleDefault, or ResamplePng as the method. Accessing a non-existent map key will return the zero value (empty string), but this could lead to unexpected behavior in filename generation.", "file": "internal/thumb/create.go", "line": 22}, {"description": "Race condition in thumbnail creation. In the FromFile function, there's a potential race condition between checking if a thumbnail exists in cache (line 83) and creating a new one (lines 90-108). If multiple goroutines call this function simultaneously with the same parameters, they could all pass the cache check and then all attempt to create the same thumbnail file, potentially causing file corruption or write conflicts. The function should use proper locking or atomic file creation to prevent this race condition.", "file": "internal/thumb/create.go", "line": 83}, {"description": "Nanoseconds are calculated but not applied to timestamps. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/exif.go", "line": 299}, {"description": "Same nanosecond assignment bug as in exif.go. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/json_exiftool.go", "line": 239}, {"description": "Logic error in duration parsing. Line 31 assigns the parsed duration when there's an error, but it should assign it when there's NO error. The condition should be 'err == nil' instead of 'err != nil'.", "file": "./internal/meta/duration.go", "line": 31}, {"description": "Incorrect function call in Description() method. Line 236 calls SanitizeTitle(d2) but should call SanitizeDescription(d2) since this is processing a description field, not a title.", "file": "./internal/meta/xmp_document.go", "line": 236}, {"description": "Potential division by zero vulnerability. Although the code checks that values[1] != \"0\", it doesn't verify that the parsed float value of denom is actually non-zero. If strconv.ParseFloat fails to parse values[1] or returns 0.0, the division number/denom will cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 180}, {"description": "Same potential division by zero vulnerability as line 180. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 191}, {"description": "Same potential division by zero vulnerability as previous cases. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 206}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "The Resample function can return a nil image if none of the resample method conditions are met. The variable 'resImg' is declared but never initialized if the method doesn't match any of the predefined constants (ResampleFit, ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleResize). This will cause the function to return nil, which could lead to a panic when the caller tries to use the returned image.", "file": "internal/thumb/resample.go", "line": 27}, {"description": "Potential file reading issue in OpenJpeg function. When autometa.Load() fails, the code falls back to imaging.Decode(fileReader) on line 40, but the fileReader may have already been partially consumed by the failed autometa.Load() call. This could cause the imaging.Decode() to fail or produce corrupted results because it's not reading from the beginning of the file.", "file": "internal/thumb/open_jpeg.go", "line": 40}, {"description": "Cross-platform path handling issue. The code uses path.Join() instead of filepath.Join() to construct file system paths. The path package is intended for URL paths and always uses forward slashes, while filepath.Join() should be used for file system paths to ensure proper behavior on Windows systems where backslashes are used as path separators.", "file": "internal/thumb/create.go", "line": 46}, {"description": "Inconsistent path separator usage. On line 46, path.Join() is used to construct the directory path, but on line 52, a hardcoded forward slash '/' is used in the fmt.Sprintf() to join the directory path with the filename. This creates inconsistency and could cause issues on Windows systems where backslashes should be used as path separators. The code should use filepath.Join() consistently for all file system path operations.", "file": "internal/thumb/create.go", "line": 52}, {"description": "Potential panic due to missing map key. In the Suffix function, ResampleMethods[method] is accessed without checking if the key exists in the map. The ResampleMethods map only contains entries for method-type ResampleOptions (ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleFit, ResampleResize), but ResampleOptions() can return other values like ResampleNearestNeighbor, ResampleDefault, or ResamplePng as the method. Accessing a non-existent map key will return the zero value (empty string), but this could lead to unexpected behavior in filename generation.", "file": "internal/thumb/create.go", "line": 22}, {"description": "Race condition in thumbnail creation. In the FromFile function, there's a potential race condition between checking if a thumbnail exists in cache (line 83) and creating a new one (lines 90-108). If multiple goroutines call this function simultaneously with the same parameters, they could all pass the cache check and then all attempt to create the same thumbnail file, potentially causing file corruption or write conflicts. The function should use proper locking or atomic file creation to prevent this race condition.", "file": "internal/thumb/create.go", "line": 83}, {"description": "Nanoseconds are calculated but not applied to timestamps. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/exif.go", "line": 299}, {"description": "Same nanosecond assignment bug as in exif.go. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/json_exiftool.go", "line": 239}, {"description": "Logic error in duration parsing. Line 31 assigns the parsed duration when there's an error, but it should assign it when there's NO error. The condition should be 'err == nil' instead of 'err != nil'.", "file": "./internal/meta/duration.go", "line": 31}, {"description": "Incorrect function call in Description() method. Line 236 calls SanitizeTitle(d2) but should call SanitizeDescription(d2) since this is processing a description field, not a title.", "file": "./internal/meta/xmp_document.go", "line": 236}, {"description": "Potential division by zero vulnerability. Although the code checks that values[1] != \"0\", it doesn't verify that the parsed float value of denom is actually non-zero. If strconv.ParseFloat fails to parse values[1] or returns 0.0, the division number/denom will cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 180}, {"description": "Same potential division by zero vulnerability as line 180. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 191}, {"description": "Same potential division by zero vulnerability as previous cases. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 206}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysqldump on line 129. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/backup.go", "line": 129}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/copy.go", "line": 33}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/import.go", "line": 33}, {"description": "Hardcoded path '/bin/stty' on line 88 may not exist on all systems. The stty command might be located in different directories (e.g., /usr/bin/stty) on different Unix systems. This could cause the password input functionality to fail with a panic. Should use exec.LookPath() to find the correct path or handle the error gracefully.", "file": "internal/commands/passwd.go", "line": 88}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysql on line 148. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/restore.go", "line": 148}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "The Resample function can return a nil image if none of the resample method conditions are met. The variable 'resImg' is declared but never initialized if the method doesn't match any of the predefined constants (ResampleFit, ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleResize). This will cause the function to return nil, which could lead to a panic when the caller tries to use the returned image.", "file": "internal/thumb/resample.go", "line": 27}, {"description": "Potential file reading issue in OpenJpeg function. When autometa.Load() fails, the code falls back to imaging.Decode(fileReader) on line 40, but the fileReader may have already been partially consumed by the failed autometa.Load() call. This could cause the imaging.Decode() to fail or produce corrupted results because it's not reading from the beginning of the file.", "file": "internal/thumb/open_jpeg.go", "line": 40}, {"description": "Cross-platform path handling issue. The code uses path.Join() instead of filepath.Join() to construct file system paths. The path package is intended for URL paths and always uses forward slashes, while filepath.Join() should be used for file system paths to ensure proper behavior on Windows systems where backslashes are used as path separators.", "file": "internal/thumb/create.go", "line": 46}, {"description": "Inconsistent path separator usage. On line 46, path.Join() is used to construct the directory path, but on line 52, a hardcoded forward slash '/' is used in the fmt.Sprintf() to join the directory path with the filename. This creates inconsistency and could cause issues on Windows systems where backslashes should be used as path separators. The code should use filepath.Join() consistently for all file system path operations.", "file": "internal/thumb/create.go", "line": 52}, {"description": "Potential panic due to missing map key. In the Suffix function, ResampleMethods[method] is accessed without checking if the key exists in the map. The ResampleMethods map only contains entries for method-type ResampleOptions (ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleFit, ResampleResize), but ResampleOptions() can return other values like ResampleNearestNeighbor, ResampleDefault, or ResamplePng as the method. Accessing a non-existent map key will return the zero value (empty string), but this could lead to unexpected behavior in filename generation.", "file": "internal/thumb/create.go", "line": 22}, {"description": "Race condition in thumbnail creation. In the FromFile function, there's a potential race condition between checking if a thumbnail exists in cache (line 83) and creating a new one (lines 90-108). If multiple goroutines call this function simultaneously with the same parameters, they could all pass the cache check and then all attempt to create the same thumbnail file, potentially causing file corruption or write conflicts. The function should use proper locking or atomic file creation to prevent this race condition.", "file": "internal/thumb/create.go", "line": 83}, {"description": "Nanoseconds are calculated but not applied to timestamps. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/exif.go", "line": 299}, {"description": "Same nanosecond assignment bug as in exif.go. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/json_exiftool.go", "line": 239}, {"description": "Logic error in duration parsing. Line 31 assigns the parsed duration when there's an error, but it should assign it when there's NO error. The condition should be 'err == nil' instead of 'err != nil'.", "file": "./internal/meta/duration.go", "line": 31}, {"description": "Incorrect function call in Description() method. Line 236 calls SanitizeTitle(d2) but should call SanitizeDescription(d2) since this is processing a description field, not a title.", "file": "./internal/meta/xmp_document.go", "line": 236}, {"description": "Potential division by zero vulnerability. Although the code checks that values[1] != \"0\", it doesn't verify that the parsed float value of denom is actually non-zero. If strconv.ParseFloat fails to parse values[1] or returns 0.0, the division number/denom will cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 180}, {"description": "Same potential division by zero vulnerability as line 180. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 191}, {"description": "Same potential division by zero vulnerability as previous cases. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 206}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysqldump on line 129. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/backup.go", "line": 129}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/copy.go", "line": 33}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/import.go", "line": 33}, {"description": "Hardcoded path '/bin/stty' on line 88 may not exist on all systems. The stty command might be located in different directories (e.g., /usr/bin/stty) on different Unix systems. This could cause the password input functionality to fail with a panic. Should use exec.LookPath() to find the correct path or handle the error gracefully.", "file": "internal/commands/passwd.go", "line": 88}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysql on line 148. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/restore.go", "line": 148}, {"description": "Potential nil pointer dereference in logging functions. The global variable 'Log' is declared in log.go but only initialized in init.go's init() function. If any of the functions Error(), Success(), Info(), or Warning() in hub.go are called before the init() function runs (e.g., from another package's init function), Log will be nil and calling Log.Error, Log.Info, Log.Warn will cause a panic.", "file": "internal/event/hub.go", "line": 26}, {"description": "Race condition in log deduplication logic. The Fire method performs a non-atomic check-and-set operation on LastLog (lines 29 and 31). Between checking if LastLog.Get() == entry.Message and calling LastLog.Set(entry.Message), another goroutine could modify LastLog, causing the same log message to be published multiple times, breaking the deduplication mechanism.", "file": "internal/event/log.go", "line": 29}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "The Resample function can return a nil image if none of the resample method conditions are met. The variable 'resImg' is declared but never initialized if the method doesn't match any of the predefined constants (ResampleFit, ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleResize). This will cause the function to return nil, which could lead to a panic when the caller tries to use the returned image.", "file": "internal/thumb/resample.go", "line": 27}, {"description": "Potential file reading issue in OpenJpeg function. When autometa.Load() fails, the code falls back to imaging.Decode(fileReader) on line 40, but the fileReader may have already been partially consumed by the failed autometa.Load() call. This could cause the imaging.Decode() to fail or produce corrupted results because it's not reading from the beginning of the file.", "file": "internal/thumb/open_jpeg.go", "line": 40}, {"description": "Cross-platform path handling issue. The code uses path.Join() instead of filepath.Join() to construct file system paths. The path package is intended for URL paths and always uses forward slashes, while filepath.Join() should be used for file system paths to ensure proper behavior on Windows systems where backslashes are used as path separators.", "file": "internal/thumb/create.go", "line": 46}, {"description": "Inconsistent path separator usage. On line 46, path.Join() is used to construct the directory path, but on line 52, a hardcoded forward slash '/' is used in the fmt.Sprintf() to join the directory path with the filename. This creates inconsistency and could cause issues on Windows systems where backslashes should be used as path separators. The code should use filepath.Join() consistently for all file system path operations.", "file": "internal/thumb/create.go", "line": 52}, {"description": "Potential panic due to missing map key. In the Suffix function, ResampleMethods[method] is accessed without checking if the key exists in the map. The ResampleMethods map only contains entries for method-type ResampleOptions (ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleFit, ResampleResize), but ResampleOptions() can return other values like ResampleNearestNeighbor, ResampleDefault, or ResamplePng as the method. Accessing a non-existent map key will return the zero value (empty string), but this could lead to unexpected behavior in filename generation.", "file": "internal/thumb/create.go", "line": 22}, {"description": "Race condition in thumbnail creation. In the FromFile function, there's a potential race condition between checking if a thumbnail exists in cache (line 83) and creating a new one (lines 90-108). If multiple goroutines call this function simultaneously with the same parameters, they could all pass the cache check and then all attempt to create the same thumbnail file, potentially causing file corruption or write conflicts. The function should use proper locking or atomic file creation to prevent this race condition.", "file": "internal/thumb/create.go", "line": 83}, {"description": "Nanoseconds are calculated but not applied to timestamps. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/exif.go", "line": 299}, {"description": "Same nanosecond assignment bug as in exif.go. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/json_exiftool.go", "line": 239}, {"description": "Logic error in duration parsing. Line 31 assigns the parsed duration when there's an error, but it should assign it when there's NO error. The condition should be 'err == nil' instead of 'err != nil'.", "file": "./internal/meta/duration.go", "line": 31}, {"description": "Incorrect function call in Description() method. Line 236 calls SanitizeTitle(d2) but should call SanitizeDescription(d2) since this is processing a description field, not a title.", "file": "./internal/meta/xmp_document.go", "line": 236}, {"description": "Potential division by zero vulnerability. Although the code checks that values[1] != \"0\", it doesn't verify that the parsed float value of denom is actually non-zero. If strconv.ParseFloat fails to parse values[1] or returns 0.0, the division number/denom will cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 180}, {"description": "Same potential division by zero vulnerability as line 180. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 191}, {"description": "Same potential division by zero vulnerability as previous cases. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 206}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysqldump on line 129. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/backup.go", "line": 129}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/copy.go", "line": 33}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/import.go", "line": 33}, {"description": "Hardcoded path '/bin/stty' on line 88 may not exist on all systems. The stty command might be located in different directories (e.g., /usr/bin/stty) on different Unix systems. This could cause the password input functionality to fail with a panic. Should use exec.LookPath() to find the correct path or handle the error gracefully.", "file": "internal/commands/passwd.go", "line": 88}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysql on line 148. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/restore.go", "line": 148}, {"description": "Potential nil pointer dereference in logging functions. The global variable 'Log' is declared in log.go but only initialized in init.go's init() function. If any of the functions Error(), Success(), Info(), or Warning() in hub.go are called before the init() function runs (e.g., from another package's init function), Log will be nil and calling Log.Error, Log.Info, Log.Warn will cause a panic.", "file": "internal/event/hub.go", "line": 26}, {"description": "Race condition in log deduplication logic. The Fire method performs a non-atomic check-and-set operation on LastLog (lines 29 and 31). Between checking if LastLog.Get() == entry.Message and calling LastLog.Set(entry.Message), another goroutine could modify LastLog, causing the same log message to be published multiple times, breaking the deduplication mechanism.", "file": "internal/event/log.go", "line": 29}, {"description": "In the Unserialize function, there's a potential integer overflow vulnerability when parsing unsigned integers. On line 126, the code uses strconv.Atoi() which returns an int, but then casts it to uint64. If the parsed integer is negative, this will result in a very large positive uint64 value due to two's complement representation, which could lead to unexpected behavior.", "file": "./internal/form/serialize.go", "line": 126}, {"description": "In the Selection.All() method, line 36 uses copy(all, f.Files) but 'all' is an empty slice with zero capacity. The copy function will copy nothing because the destination slice has no capacity. This should be 'all = append(all, f.Files...)' to properly append the Files slice elements.", "file": "./internal/form/selection.go", "line": 36}, {"description": "In the Report function, line 59 shows an incorrect example for unsigned integer types. The example shows 'fieldName:-1' which is invalid for unsigned integers since they cannot be negative. This could mislead users about valid input values for unsigned integer fields.", "file": "./internal/form/form_report.go", "line": 59}, {"description": "In the Unserialize function, there's a potential issue with error handling. The function continues processing even after encountering parsing errors, and only the last error is returned. This means if multiple fields have parsing errors, only the last one will be reported, potentially masking earlier critical errors. The function should either stop on first error or accumulate all errors.", "file": "./internal/form/serialize.go", "line": 106}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "The Resample function can return a nil image if none of the resample method conditions are met. The variable 'resImg' is declared but never initialized if the method doesn't match any of the predefined constants (ResampleFit, ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleResize). This will cause the function to return nil, which could lead to a panic when the caller tries to use the returned image.", "file": "internal/thumb/resample.go", "line": 27}, {"description": "Potential file reading issue in OpenJpeg function. When autometa.Load() fails, the code falls back to imaging.Decode(fileReader) on line 40, but the fileReader may have already been partially consumed by the failed autometa.Load() call. This could cause the imaging.Decode() to fail or produce corrupted results because it's not reading from the beginning of the file.", "file": "internal/thumb/open_jpeg.go", "line": 40}, {"description": "Cross-platform path handling issue. The code uses path.Join() instead of filepath.Join() to construct file system paths. The path package is intended for URL paths and always uses forward slashes, while filepath.Join() should be used for file system paths to ensure proper behavior on Windows systems where backslashes are used as path separators.", "file": "internal/thumb/create.go", "line": 46}, {"description": "Inconsistent path separator usage. On line 46, path.Join() is used to construct the directory path, but on line 52, a hardcoded forward slash '/' is used in the fmt.Sprintf() to join the directory path with the filename. This creates inconsistency and could cause issues on Windows systems where backslashes should be used as path separators. The code should use filepath.Join() consistently for all file system path operations.", "file": "internal/thumb/create.go", "line": 52}, {"description": "Potential panic due to missing map key. In the Suffix function, ResampleMethods[method] is accessed without checking if the key exists in the map. The ResampleMethods map only contains entries for method-type ResampleOptions (ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleFit, ResampleResize), but ResampleOptions() can return other values like ResampleNearestNeighbor, ResampleDefault, or ResamplePng as the method. Accessing a non-existent map key will return the zero value (empty string), but this could lead to unexpected behavior in filename generation.", "file": "internal/thumb/create.go", "line": 22}, {"description": "Race condition in thumbnail creation. In the FromFile function, there's a potential race condition between checking if a thumbnail exists in cache (line 83) and creating a new one (lines 90-108). If multiple goroutines call this function simultaneously with the same parameters, they could all pass the cache check and then all attempt to create the same thumbnail file, potentially causing file corruption or write conflicts. The function should use proper locking or atomic file creation to prevent this race condition.", "file": "internal/thumb/create.go", "line": 83}, {"description": "Nanoseconds are calculated but not applied to timestamps. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/exif.go", "line": 299}, {"description": "Same nanosecond assignment bug as in exif.go. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/json_exiftool.go", "line": 239}, {"description": "Logic error in duration parsing. Line 31 assigns the parsed duration when there's an error, but it should assign it when there's NO error. The condition should be 'err == nil' instead of 'err != nil'.", "file": "./internal/meta/duration.go", "line": 31}, {"description": "Incorrect function call in Description() method. Line 236 calls SanitizeTitle(d2) but should call SanitizeDescription(d2) since this is processing a description field, not a title.", "file": "./internal/meta/xmp_document.go", "line": 236}, {"description": "Potential division by zero vulnerability. Although the code checks that values[1] != \"0\", it doesn't verify that the parsed float value of denom is actually non-zero. If strconv.ParseFloat fails to parse values[1] or returns 0.0, the division number/denom will cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 180}, {"description": "Same potential division by zero vulnerability as line 180. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 191}, {"description": "Same potential division by zero vulnerability as previous cases. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 206}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysqldump on line 129. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/backup.go", "line": 129}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/copy.go", "line": 33}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/import.go", "line": 33}, {"description": "Hardcoded path '/bin/stty' on line 88 may not exist on all systems. The stty command might be located in different directories (e.g., /usr/bin/stty) on different Unix systems. This could cause the password input functionality to fail with a panic. Should use exec.LookPath() to find the correct path or handle the error gracefully.", "file": "internal/commands/passwd.go", "line": 88}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysql on line 148. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/restore.go", "line": 148}, {"description": "Potential nil pointer dereference in logging functions. The global variable 'Log' is declared in log.go but only initialized in init.go's init() function. If any of the functions Error(), Success(), Info(), or Warning() in hub.go are called before the init() function runs (e.g., from another package's init function), Log will be nil and calling Log.Error, Log.Info, Log.Warn will cause a panic.", "file": "internal/event/hub.go", "line": 26}, {"description": "Race condition in log deduplication logic. The Fire method performs a non-atomic check-and-set operation on LastLog (lines 29 and 31). Between checking if LastLog.Get() == entry.Message and calling LastLog.Set(entry.Message), another goroutine could modify LastLog, causing the same log message to be published multiple times, breaking the deduplication mechanism.", "file": "internal/event/log.go", "line": 29}, {"description": "In the Unserialize function, there's a potential integer overflow vulnerability when parsing unsigned integers. On line 126, the code uses strconv.Atoi() which returns an int, but then casts it to uint64. If the parsed integer is negative, this will result in a very large positive uint64 value due to two's complement representation, which could lead to unexpected behavior.", "file": "./internal/form/serialize.go", "line": 126}, {"description": "In the Selection.All() method, line 36 uses copy(all, f.Files) but 'all' is an empty slice with zero capacity. The copy function will copy nothing because the destination slice has no capacity. This should be 'all = append(all, f.Files...)' to properly append the Files slice elements.", "file": "./internal/form/selection.go", "line": 36}, {"description": "In the Report function, line 59 shows an incorrect example for unsigned integer types. The example shows 'fieldName:-1' which is invalid for unsigned integers since they cannot be negative. This could mislead users about valid input values for unsigned integer fields.", "file": "./internal/form/form_report.go", "line": 59}, {"description": "In the Unserialize function, there's a potential issue with error handling. The function continues processing even after encountering parsing errors, and only the last error is returned. This means if multiple fields have parsing errors, only the last one will be reported, potentially masking earlier critical errors. The function should either stop on first error or accumulate all errors.", "file": "./internal/form/serialize.go", "line": 106}, {"description": "In SqlString function, the escaping logic is incorrect. On line 44-45, when a special character is found that needs escaping, the code copies the original character but doesn't add the escape character. This means quotes and backslashes are not properly escaped, which could lead to SQL injection vulnerabilities. The code should add an escape character (backslash) before the special character.", "file": "./pkg/clean/sql.go", "line": 44}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "The Resample function can return a nil image if none of the resample method conditions are met. The variable 'resImg' is declared but never initialized if the method doesn't match any of the predefined constants (ResampleFit, ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleResize). This will cause the function to return nil, which could lead to a panic when the caller tries to use the returned image.", "file": "internal/thumb/resample.go", "line": 27}, {"description": "Potential file reading issue in OpenJpeg function. When autometa.Load() fails, the code falls back to imaging.Decode(fileReader) on line 40, but the fileReader may have already been partially consumed by the failed autometa.Load() call. This could cause the imaging.Decode() to fail or produce corrupted results because it's not reading from the beginning of the file.", "file": "internal/thumb/open_jpeg.go", "line": 40}, {"description": "Cross-platform path handling issue. The code uses path.Join() instead of filepath.Join() to construct file system paths. The path package is intended for URL paths and always uses forward slashes, while filepath.Join() should be used for file system paths to ensure proper behavior on Windows systems where backslashes are used as path separators.", "file": "internal/thumb/create.go", "line": 46}, {"description": "Inconsistent path separator usage. On line 46, path.Join() is used to construct the directory path, but on line 52, a hardcoded forward slash '/' is used in the fmt.Sprintf() to join the directory path with the filename. This creates inconsistency and could cause issues on Windows systems where backslashes should be used as path separators. The code should use filepath.Join() consistently for all file system path operations.", "file": "internal/thumb/create.go", "line": 52}, {"description": "Potential panic due to missing map key. In the Suffix function, ResampleMethods[method] is accessed without checking if the key exists in the map. The ResampleMethods map only contains entries for method-type ResampleOptions (ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleFit, ResampleResize), but ResampleOptions() can return other values like ResampleNearestNeighbor, ResampleDefault, or ResamplePng as the method. Accessing a non-existent map key will return the zero value (empty string), but this could lead to unexpected behavior in filename generation.", "file": "internal/thumb/create.go", "line": 22}, {"description": "Race condition in thumbnail creation. In the FromFile function, there's a potential race condition between checking if a thumbnail exists in cache (line 83) and creating a new one (lines 90-108). If multiple goroutines call this function simultaneously with the same parameters, they could all pass the cache check and then all attempt to create the same thumbnail file, potentially causing file corruption or write conflicts. The function should use proper locking or atomic file creation to prevent this race condition.", "file": "internal/thumb/create.go", "line": 83}, {"description": "Nanoseconds are calculated but not applied to timestamps. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/exif.go", "line": 299}, {"description": "Same nanosecond assignment bug as in exif.go. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/json_exiftool.go", "line": 239}, {"description": "Logic error in duration parsing. Line 31 assigns the parsed duration when there's an error, but it should assign it when there's NO error. The condition should be 'err == nil' instead of 'err != nil'.", "file": "./internal/meta/duration.go", "line": 31}, {"description": "Incorrect function call in Description() method. Line 236 calls SanitizeTitle(d2) but should call SanitizeDescription(d2) since this is processing a description field, not a title.", "file": "./internal/meta/xmp_document.go", "line": 236}, {"description": "Potential division by zero vulnerability. Although the code checks that values[1] != \"0\", it doesn't verify that the parsed float value of denom is actually non-zero. If strconv.ParseFloat fails to parse values[1] or returns 0.0, the division number/denom will cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 180}, {"description": "Same potential division by zero vulnerability as line 180. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 191}, {"description": "Same potential division by zero vulnerability as previous cases. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 206}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysqldump on line 129. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/backup.go", "line": 129}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/copy.go", "line": 33}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/import.go", "line": 33}, {"description": "Hardcoded path '/bin/stty' on line 88 may not exist on all systems. The stty command might be located in different directories (e.g., /usr/bin/stty) on different Unix systems. This could cause the password input functionality to fail with a panic. Should use exec.LookPath() to find the correct path or handle the error gracefully.", "file": "internal/commands/passwd.go", "line": 88}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysql on line 148. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/restore.go", "line": 148}, {"description": "Potential nil pointer dereference in logging functions. The global variable 'Log' is declared in log.go but only initialized in init.go's init() function. If any of the functions Error(), Success(), Info(), or Warning() in hub.go are called before the init() function runs (e.g., from another package's init function), Log will be nil and calling Log.Error, Log.Info, Log.Warn will cause a panic.", "file": "internal/event/hub.go", "line": 26}, {"description": "Race condition in log deduplication logic. The Fire method performs a non-atomic check-and-set operation on LastLog (lines 29 and 31). Between checking if LastLog.Get() == entry.Message and calling LastLog.Set(entry.Message), another goroutine could modify LastLog, causing the same log message to be published multiple times, breaking the deduplication mechanism.", "file": "internal/event/log.go", "line": 29}, {"description": "In the Unserialize function, there's a potential integer overflow vulnerability when parsing unsigned integers. On line 126, the code uses strconv.Atoi() which returns an int, but then casts it to uint64. If the parsed integer is negative, this will result in a very large positive uint64 value due to two's complement representation, which could lead to unexpected behavior.", "file": "./internal/form/serialize.go", "line": 126}, {"description": "In the Selection.All() method, line 36 uses copy(all, f.Files) but 'all' is an empty slice with zero capacity. The copy function will copy nothing because the destination slice has no capacity. This should be 'all = append(all, f.Files...)' to properly append the Files slice elements.", "file": "./internal/form/selection.go", "line": 36}, {"description": "In the Report function, line 59 shows an incorrect example for unsigned integer types. The example shows 'fieldName:-1' which is invalid for unsigned integers since they cannot be negative. This could mislead users about valid input values for unsigned integer fields.", "file": "./internal/form/form_report.go", "line": 59}, {"description": "In the Unserialize function, there's a potential issue with error handling. The function continues processing even after encountering parsing errors, and only the last error is returned. This means if multiple fields have parsing errors, only the last one will be reported, potentially masking earlier critical errors. The function should either stop on first error or accumulate all errors.", "file": "./internal/form/serialize.go", "line": 106}, {"description": "In SqlString function, the escaping logic is incorrect. On line 44-45, when a special character is found that needs escaping, the code copies the original character but doesn't add the escape character. This means quotes and backslashes are not properly escaped, which could lead to SQL injection vulnerabilities. The code should add an escape character (backslash) before the special character.", "file": "./pkg/clean/sql.go", "line": 44}, {"description": "Potential buffer underflow vulnerability in DecodeSession function. At line 114, the code extracts IV from the first aes.BlockSize bytes of the decoded session data without checking if the decoded data is at least aes.BlockSize bytes long. If the decoded hex string is shorter than aes.BlockSize (16 bytes), this will cause a panic due to slice bounds out of range. This could lead to a denial of service attack if an attacker provides malformed session data.", "file": "internal/hub/config.go", "line": 114}, {"description": "Resource leak: HTTP response body not closed in SendFeedback function. At line 107, the function decodes JSON from r.Body but never calls r.Body.Close(), which can lead to connection leaks and resource exhaustion over time.", "file": "internal/hub/feedback.go", "line": 107}, {"description": "Unsafe type assertion that could cause panic. At line 67, the code performs an unsafe type assertion `hit.(Location)` without checking if the cached value is actually of type Location. If the cache contains unexpected data types, this will cause a runtime panic.", "file": "internal/hub/places/location.go", "line": 67}, {"description": "Resource leak: HTTP response body not closed in HttpOk function. The function creates an HTTP request and gets a response but never calls resp.Body.Close(), which can lead to connection leaks and resource exhaustion when this function is called repeatedly.", "file": "internal/remote/remote.go", "line": 65}, {"description": "Potential path traversal vulnerability in DownloadDir function. At line 229, the destination path is constructed using string concatenation without proper validation of file.Abs. If file.Abs contains malicious path components like '../../../etc/passwd', it could allow writing files outside the intended directory, leading to directory traversal attacks.", "file": "internal/remote/webdav/webdav.go", "line": 229}, {"description": "Resource leak: HTTP response body not closed in FindLocation function. At line 136, the function decodes JSON from r.Body but never calls r.Body.Close(), which can lead to connection leaks and resource exhaustion when this function is called repeatedly for location lookups.", "file": "internal/hub/places/location.go", "line": 136}, {"description": "Resource leak: HTTP response body not closed in Refresh function. At line 200, the function decodes JSON from r.Body but never calls r.Body.Close(), which can lead to connection leaks and resource exhaustion when this function is called to refresh API credentials.", "file": "internal/hub/config.go", "line": 200}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "The Resample function can return a nil image if none of the resample method conditions are met. The variable 'resImg' is declared but never initialized if the method doesn't match any of the predefined constants (ResampleFit, ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleResize). This will cause the function to return nil, which could lead to a panic when the caller tries to use the returned image.", "file": "internal/thumb/resample.go", "line": 27}, {"description": "Potential file reading issue in OpenJpeg function. When autometa.Load() fails, the code falls back to imaging.Decode(fileReader) on line 40, but the fileReader may have already been partially consumed by the failed autometa.Load() call. This could cause the imaging.Decode() to fail or produce corrupted results because it's not reading from the beginning of the file.", "file": "internal/thumb/open_jpeg.go", "line": 40}, {"description": "Cross-platform path handling issue. The code uses path.Join() instead of filepath.Join() to construct file system paths. The path package is intended for URL paths and always uses forward slashes, while filepath.Join() should be used for file system paths to ensure proper behavior on Windows systems where backslashes are used as path separators.", "file": "internal/thumb/create.go", "line": 46}, {"description": "Inconsistent path separator usage. On line 46, path.Join() is used to construct the directory path, but on line 52, a hardcoded forward slash '/' is used in the fmt.Sprintf() to join the directory path with the filename. This creates inconsistency and could cause issues on Windows systems where backslashes should be used as path separators. The code should use filepath.Join() consistently for all file system path operations.", "file": "internal/thumb/create.go", "line": 52}, {"description": "Potential panic due to missing map key. In the Suffix function, ResampleMethods[method] is accessed without checking if the key exists in the map. The ResampleMethods map only contains entries for method-type ResampleOptions (ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleFit, ResampleResize), but ResampleOptions() can return other values like ResampleNearestNeighbor, ResampleDefault, or ResamplePng as the method. Accessing a non-existent map key will return the zero value (empty string), but this could lead to unexpected behavior in filename generation.", "file": "internal/thumb/create.go", "line": 22}, {"description": "Race condition in thumbnail creation. In the FromFile function, there's a potential race condition between checking if a thumbnail exists in cache (line 83) and creating a new one (lines 90-108). If multiple goroutines call this function simultaneously with the same parameters, they could all pass the cache check and then all attempt to create the same thumbnail file, potentially causing file corruption or write conflicts. The function should use proper locking or atomic file creation to prevent this race condition.", "file": "internal/thumb/create.go", "line": 83}, {"description": "Nanoseconds are calculated but not applied to timestamps. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/exif.go", "line": 299}, {"description": "Same nanosecond assignment bug as in exif.go. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/json_exiftool.go", "line": 239}, {"description": "Logic error in duration parsing. Line 31 assigns the parsed duration when there's an error, but it should assign it when there's NO error. The condition should be 'err == nil' instead of 'err != nil'.", "file": "./internal/meta/duration.go", "line": 31}, {"description": "Incorrect function call in Description() method. Line 236 calls SanitizeTitle(d2) but should call SanitizeDescription(d2) since this is processing a description field, not a title.", "file": "./internal/meta/xmp_document.go", "line": 236}, {"description": "Potential division by zero vulnerability. Although the code checks that values[1] != \"0\", it doesn't verify that the parsed float value of denom is actually non-zero. If strconv.ParseFloat fails to parse values[1] or returns 0.0, the division number/denom will cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 180}, {"description": "Same potential division by zero vulnerability as line 180. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 191}, {"description": "Same potential division by zero vulnerability as previous cases. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 206}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysqldump on line 129. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/backup.go", "line": 129}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/copy.go", "line": 33}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/import.go", "line": 33}, {"description": "Hardcoded path '/bin/stty' on line 88 may not exist on all systems. The stty command might be located in different directories (e.g., /usr/bin/stty) on different Unix systems. This could cause the password input functionality to fail with a panic. Should use exec.LookPath() to find the correct path or handle the error gracefully.", "file": "internal/commands/passwd.go", "line": 88}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysql on line 148. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/restore.go", "line": 148}, {"description": "Potential nil pointer dereference in logging functions. The global variable 'Log' is declared in log.go but only initialized in init.go's init() function. If any of the functions Error(), Success(), Info(), or Warning() in hub.go are called before the init() function runs (e.g., from another package's init function), Log will be nil and calling Log.Error, Log.Info, Log.Warn will cause a panic.", "file": "internal/event/hub.go", "line": 26}, {"description": "Race condition in log deduplication logic. The Fire method performs a non-atomic check-and-set operation on LastLog (lines 29 and 31). Between checking if LastLog.Get() == entry.Message and calling LastLog.Set(entry.Message), another goroutine could modify LastLog, causing the same log message to be published multiple times, breaking the deduplication mechanism.", "file": "internal/event/log.go", "line": 29}, {"description": "In the Unserialize function, there's a potential integer overflow vulnerability when parsing unsigned integers. On line 126, the code uses strconv.Atoi() which returns an int, but then casts it to uint64. If the parsed integer is negative, this will result in a very large positive uint64 value due to two's complement representation, which could lead to unexpected behavior.", "file": "./internal/form/serialize.go", "line": 126}, {"description": "In the Selection.All() method, line 36 uses copy(all, f.Files) but 'all' is an empty slice with zero capacity. The copy function will copy nothing because the destination slice has no capacity. This should be 'all = append(all, f.Files...)' to properly append the Files slice elements.", "file": "./internal/form/selection.go", "line": 36}, {"description": "In the Report function, line 59 shows an incorrect example for unsigned integer types. The example shows 'fieldName:-1' which is invalid for unsigned integers since they cannot be negative. This could mislead users about valid input values for unsigned integer fields.", "file": "./internal/form/form_report.go", "line": 59}, {"description": "In the Unserialize function, there's a potential issue with error handling. The function continues processing even after encountering parsing errors, and only the last error is returned. This means if multiple fields have parsing errors, only the last one will be reported, potentially masking earlier critical errors. The function should either stop on first error or accumulate all errors.", "file": "./internal/form/serialize.go", "line": 106}, {"description": "In SqlString function, the escaping logic is incorrect. On line 44-45, when a special character is found that needs escaping, the code copies the original character but doesn't add the escape character. This means quotes and backslashes are not properly escaped, which could lead to SQL injection vulnerabilities. The code should add an escape character (backslash) before the special character.", "file": "./pkg/clean/sql.go", "line": 44}, {"description": "Potential buffer underflow vulnerability in DecodeSession function. At line 114, the code extracts IV from the first aes.BlockSize bytes of the decoded session data without checking if the decoded data is at least aes.BlockSize bytes long. If the decoded hex string is shorter than aes.BlockSize (16 bytes), this will cause a panic due to slice bounds out of range. This could lead to a denial of service attack if an attacker provides malformed session data.", "file": "internal/hub/config.go", "line": 114}, {"description": "Resource leak: HTTP response body not closed in SendFeedback function. At line 107, the function decodes JSON from r.Body but never calls r.Body.Close(), which can lead to connection leaks and resource exhaustion over time.", "file": "internal/hub/feedback.go", "line": 107}, {"description": "Unsafe type assertion that could cause panic. At line 67, the code performs an unsafe type assertion `hit.(Location)` without checking if the cached value is actually of type Location. If the cache contains unexpected data types, this will cause a runtime panic.", "file": "internal/hub/places/location.go", "line": 67}, {"description": "Resource leak: HTTP response body not closed in HttpOk function. The function creates an HTTP request and gets a response but never calls resp.Body.Close(), which can lead to connection leaks and resource exhaustion when this function is called repeatedly.", "file": "internal/remote/remote.go", "line": 65}, {"description": "Potential path traversal vulnerability in DownloadDir function. At line 229, the destination path is constructed using string concatenation without proper validation of file.Abs. If file.Abs contains malicious path components like '../../../etc/passwd', it could allow writing files outside the intended directory, leading to directory traversal attacks.", "file": "internal/remote/webdav/webdav.go", "line": 229}, {"description": "Resource leak: HTTP response body not closed in FindLocation function. At line 136, the function decodes JSON from r.Body but never calls r.Body.Close(), which can lead to connection leaks and resource exhaustion when this function is called repeatedly for location lookups.", "file": "internal/hub/places/location.go", "line": 136}, {"description": "Resource leak: HTTP response body not closed in Refresh function. At line 200, the function decodes JSON from r.Body but never calls r.Body.Close(), which can lead to connection leaks and resource exhaustion when this function is called to refresh API credentials.", "file": "internal/hub/config.go", "line": 200}, {"description": "Potential deadlock in Stop() function: The global 'stop' channel has a buffer size of 1, but Stop() sends to it without checking if it's full. If Stop() is called multiple times, subsequent calls will block indefinitely since the channel buffer is already full.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/workers.go", "line": 74}, {"description": "Incomplete if-else block with missing logic: Lines 75-77 contain an empty if-else block that appears to be incomplete. The condition checks if offset == 0 but no action is taken, which suggests missing implementation that could lead to incorrect behavior.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/meta.go", "line": 75}, {"description": "Unchecked error from search.Accounts(): The error returned by search.Accounts(f) is assigned to 'err' but never checked before proceeding to iterate over the accounts slice. If the search fails, 'accounts' could be nil or empty, but the error is silently ignored, potentially leading to unexpected behavior.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/share.go", "line": 59}, {"description": "existingDirs map is checked but never populated: The existingDirs map is used to track created directories to avoid recreating them, but it's never actually populated when directories are successfully created. This means CreateDir() will be called repeatedly for the same directory, causing unnecessary overhead and potential errors.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/share.go", "line": 103}, {"description": "Unchecked error from search.Accounts(): The error returned by search.Accounts(f) is assigned to 'err' but never checked before proceeding to iterate over the accounts slice. If the search fails, 'accounts' could be nil or empty, but the error is silently ignored, potentially leading to unexpected behavior.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/sync.go", "line": 62}, {"description": "Worker goroutines may not complete before function returns: IndexWorker and ImportWorker goroutines are started but there's no synchronization mechanism (like WaitGroup) to ensure they complete processing all jobs before the function returns. This could lead to incomplete processing or resource leaks.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/sync_download.go", "line": 56}, {"description": "existingDirs map is checked but never populated: Similar to the issue in share.go, the existingDirs map is used to track created directories but is never actually populated when directories are successfully created. This means CreateDir() will be called repeatedly for the same directory, causing unnecessary overhead and potential errors.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/sync_upload.go", "line": 46}, {"description": "Potential index out of bounds error in EditedName() function. The code checks if basename[:4] == \"IMG_\" without first verifying that basename has at least 4 characters. If basename is shorter than 4 characters, this will cause a panic.", "file": "internal/photoprism/mediafile.go", "line": 286}, {"description": "Redundant condition in RelPath() function. Lines 458-460 check for the same condition as line 456 but with opposite logic. The condition 'end == -1' is checked twice - once in the if statement at line 456 and again at line 458, making the second check unreachable and the else-if logic confusing.", "file": "internal/photoprism/mediafile.go", "line": 458}, {"description": "Path traversal vulnerability in upload functionality. On line 60, the code uses `filepath.Base(file.Filename)` to extract the filename, but this only protects against directory traversal in the final filename component. However, on line 35, `subPath` is cleaned using `clean.Path()` but then used directly in `path.Join()` on line 51. If the `clean.Path()` function doesn't properly sanitize path traversal sequences like '../', an attacker could potentially upload files outside the intended upload directory by manipulating the `:path` parameter in the URL.", "file": "internal/api/upload.go", "line": 51}, {"description": "WebSocket origin validation is completely disabled, allowing Cross-Site WebSocket Hijacking (CSWSH) attacks. On lines 18-22, the CheckOrigin function is set to always return true, which means any website can establish a WebSocket connection to this server. This allows malicious websites to connect to the WebSocket endpoint and potentially access sensitive data or perform unauthorized actions on behalf of authenticated users. The CheckOrigin function should validate that the request originates from the expected domain(s).", "file": "internal/api/websocket.go", "line": 19}, {"description": "Potential null pointer dereference in password change functionality. On line 36, the code accesses `s.User.UserUID` and on line 36 it accesses `m.UserUID`, but the null check for `m` doesn't happen until line 41. If `entity.FindUserByUID(uid)` returns nil on line 34, then accessing `m.UserUID` on line 36 will cause a null pointer dereference panic before the nil check on line 41 can prevent it. The nil check should be moved before any access to `m`.", "file": "internal/api/user_password.go", "line": 36}, {"description": "Potential nil pointer dereference in Db() function. The function calls dbProvider.Db() without checking if dbProvider is nil, even though HasDbProvider() exists to check this. If dbProvider is nil, this will cause a panic.", "file": "./internal/entity/entity_db.go", "line": 49}, {"description": "Potential nil pointer dereference in FirstOrCreateCamera function. On line 132, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/camera.go", "line": 132}, {"description": "Potential nil pointer dereference in FirstOrCreateLens function. On line 128, the code references 'err.Error()' but 'err' is not defined in the current scope. The 'err' variable is from the previous if statement's scope and is not accessible here, which will cause a compilation error.", "file": "./internal/entity/lens.go", "line": 128}, {"description": "Potential nil pointer dereference in FirstOrCreateCountry function. On line 100, the code references 'createErr' but this variable is only defined in the scope of the previous if statement (line 86). The variable is not accessible in the current scope, which will cause a compilation error.", "file": "./internal/entity/country.go", "line": 100}, {"description": "Potential nil pointer dereference in Db() and UnscopedDb() functions. These functions call entity.Db() which can panic if dbProvider is nil (as identified earlier). The query package functions don't check if the database connection is valid before using it, which could lead to panics.", "file": "./internal/query/query.go", "line": 66}, {"description": "Logic error in Update function. On line 32, the function returns 'err' instead of 'result.Error'. The 'err' variable at this point contains the error from ModelValues() which was already checked to be nil on line 21, so this will always return nil even when result.Error is not nil. This masks database update errors.", "file": "./internal/entity/entity_update.go", "line": 32}, {"description": "In the photo-viewer.vue component, the destroyed() lifecycle method incorrectly iterates over subscriptions using a for loop with length check, but subscriptions is an object, not an array. This will cause the unsubscribe calls to fail silently, leading to memory leaks from event subscriptions that are never cleaned up.", "file": "./frontend/src/component/photo-viewer.vue", "line": 128}, {"description": "In the config.js file, line 304 contains a useless statement 'this.values.count;' that does nothing. This appears to be a leftover from development and should either be removed or completed with the intended operation.", "file": "./frontend/src/common/config.js", "line": 304}, {"description": "In the config.js file, the feature() method at line 387 directly accesses this.values.settings.features[name] without null checks. If this.values.settings or this.values.settings.features is null/undefined, this will throw a TypeError and crash the application.", "file": "./frontend/src/common/config.js", "line": 387}, {"description": "In the config.js file, the settings() method at line 391 directly returns this.values.settings without null checks. If this.values or this.values.settings is null/undefined, this will return undefined which could cause issues for callers expecting a settings object.", "file": "./frontend/src/common/config.js", "line": 391}, {"description": "In the session.js file, line 48 has a potential JSON parsing vulnerability. If dataJson contains malformed JSON, JSON.parse() will throw an exception and crash the application. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/session.js", "line": 48}, {"description": "In the websocket.js file, line 44 has a potential JSON parsing vulnerability. If e.data contains malformed JSON, JSON.parse() will throw an exception and crash the websocket message handler. The code should wrap JSON.parse() in a try-catch block to handle parsing errors gracefully.", "file": "./frontend/src/common/websocket.js", "line": 44}, {"description": "In the util.js file, line 91 contains an incorrect Roman numeral mapping. 'XV' should be 15, not 40. The correct mapping for 40 should be 'XL'. This will cause incorrect Roman numeral conversions.", "file": "./frontend/src/common/util.js", "line": 91}, {"description": "In the video player component, the videoEl() method at line 85 uses this.$el.childNodes[0] to access the video element. This is fragile because childNodes includes text nodes and comments, so the first child might not be the video element. It should use this.$refs.video instead since the video element has a ref='video' attribute.", "file": "./frontend/src/component/video/player.vue", "line": 85}, {"description": "In the photo.js model, the baseName() method at line 329 calls this.mainFile().Name without null checking. If mainFile() returns null/undefined (which can happen when there are no files or no primary/JPEG files), this will throw a TypeError when trying to access the Name property.", "file": "./frontend/src/model/photo.js", "line": 329}, {"description": "In the clipboard.js file, the loadFromStorage() method at line 71 calls JSON.parse() without error handling. If the stored JSON is malformed, this will throw an exception and crash the clipboard functionality. The code should wrap JSON.parse() in a try-catch block.", "file": "./frontend/src/common/clipboard.js", "line": 71}, {"description": "In the viewer.js file, line 202 accesses item.Thumbs[nextSize] without null checking. If item.Thumbs is null/undefined or if nextSize is not a valid key in the Thumbs object, this will throw a TypeError and crash the photo viewer functionality.", "file": "./frontend/src/common/viewer.js", "line": 202}, {"description": "In the form.js file, the setValue() and getValue() methods throw string literals instead of proper Error objects (lines 64, 66, 80). This is bad practice as it makes error handling inconsistent and prevents proper stack traces. They should throw new Error() objects instead.", "file": "./frontend/src/common/form.js", "line": 64}, {"description": "Incorrect import path for navigation component. The import statement uses a relative path 'navigation.vue' but should use 'share/navigation.vue' since the navigation.vue file is located in the share directory, not the current directory.", "file": "frontend/src/share/components.js", "line": 26}, {"description": "Memory leak due to incorrect event listener removal. The addEventListener calls use arrow functions, but removeEventListener tries to remove them with the same arrow function syntax, which creates new function references instead of removing the original ones. This will cause the event listeners to never be properly removed.", "file": "frontend/src/share.vue", "line": 53}, {"description": "Syntax error: Missing space between logical OR operators. The condition 'selected.Type === MediaVideo|| selected.Type === MediaAnimated' has no space before the '||' operator, which could cause parsing issues or make the code harder to read and maintain.", "file": "frontend/src/share/photos.vue", "line": 249}, {"description": "Potential runtime error due to unsafe property access. The code accesses window.__CONFIG__ and its nested properties without null checks. If __CONFIG__, siteAuthor, name, settings, or share properties are undefined, this will throw a TypeError and crash the application.", "file": "frontend/src/share/routes.js", "line": 4}, {"description": "Potential panic in Msg function: The function accesses Messages[id] without checking if the key exists in the map. If an invalid Message ID is passed that doesn't exist in the Messages map, this will cause a panic. The function should check if the key exists or handle the case where Messages[id] returns an empty string.", "file": "internal/i18n/i18n.go", "line": 56}, {"description": "Potential panic in SetLocale function: On line 39, the code assumes that a 5-character string has the format 'xx_YY' and directly slices loc[3:5] without validating the string format. If the input string is exactly 5 characters but doesn't contain an underscore at position 2 (e.g., 'abcde'), this could produce unexpected results. While it won't panic, it could create invalid locale strings. The function should validate that loc[2] == '_' before processing.", "file": "internal/i18n/locales.go", "line": 39}, {"description": "Potential panic in msgParams function: The function uses fmt.Sprintf(msg, params...) without error handling. If the format string contains format verbs that don't match the provided parameters (wrong number or wrong types), fmt.Sprintf will panic. For example, if msg contains '%s %d' but only one parameter is provided, or if the parameter types don't match the format verbs, this will cause a runtime panic.", "file": "internal/i18n/i18n.go", "line": 49}, {"description": "Incomplete error interface implementation: The Response struct implements an Error() method that only returns r.Err, but this means when r.Err is empty, the Error() method returns an empty string. This violates the error interface contract where Error() should return a meaningful error message. If Response is intended to implement the error interface, it should return a non-empty string when there's an actual error condition, or the method should be renamed to avoid confusion with the error interface.", "file": "internal/i18n/response.go", "line": 25}, {"description": "Race condition in global variable access: The package uses global variables 'localeDir' and 'locale' (lines 26-27) that are modified by SetDir() and SetLocale() functions without any synchronization. If multiple goroutines call these functions concurrently, it could lead to race conditions. The gotext.Configure() call in SetLocale() also modifies global state in the gotext package, which could cause data races in concurrent environments.", "file": "internal/i18n/locales.go", "line": 27}, {"description": "Hardcoded relative path in localeDir: The default value '../../assets/locales' is a relative path that depends on the current working directory. This could cause the application to fail if it's run from a different directory than expected, or if the package is used in a different context. The path should either be made absolute during initialization or the application should ensure it's always run from the expected directory.", "file": "internal/i18n/locales.go", "line": 26}, {"description": "Incorrect nested test structure: In the response_test.go file, there are nested t.Run calls with the same name 'error' on lines 47 and 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This creates misleading test names and could cause confusion when reading test output. The inner test should have a descriptive name that matches its purpose.", "file": "internal/i18n/response_test.go", "line": 47}, {"description": "Duplicate incorrect nested test structure: Similar to line 47, there's another nested t.Run with incorrect naming on line 61. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern appears in multiple test functions (TestResponse_String and TestResponse_LowerString), creating misleading test names.", "file": "internal/i18n/response_test.go", "line": 61}, {"description": "Third occurrence of incorrect nested test structure: Another instance of the same issue on line 89 in TestResponse_Success function. The outer test is named 'no error' but contains an inner test named 'error', which is confusing and incorrect. This pattern is repeated across multiple test functions, indicating a systematic issue with test naming conventions.", "file": "internal/i18n/response_test.go", "line": 89}, {"description": "Unsafe type assertion that can cause panic. The code performs `hit.(Data)` without checking if the type assertion is safe. If the cache contains data that's not of type `Data`, this will cause a runtime panic and crash the application.", "file": "internal/session/store.go", "line": 60}, {"description": "Unsafe type assertion that can cause panic. The code performs `item.Object.(Data).Saved()` without checking if the type assertion is safe. If the cache contains an object that's not of type `Data`, this will cause a runtime panic and crash the application during session saving.", "file": "internal/session/save.go", "line": 88}, {"description": "Using log.Fatal() for recoverable error will terminate the entire application. If crypto/rand.Read() fails, the program calls log.Fatal(err) which terminates the entire application. This is overly harsh for what could be a temporary system issue. The function should return an error instead and let the caller decide how to handle it.", "file": "internal/session/token.go", "line": 13}, {"description": "Potential nil pointer dereference. The code dereferences `user` with `*user` without checking if `user` is nil. Although there's a nil check at line 41-43, if `entity.FindUserByUID()` returns a non-nil pointer to a User struct that contains invalid data, this could still cause issues. The safer approach would be to pass the user by value or ensure proper validation.", "file": "internal/session/save.go", "line": 60}, {"description": "Incorrect mutex usage in session initialization. The New() function uses RLock() for reading the session file, but this is incorrect because the function modifies the Session struct (setting s.cacheFile and s.cache). Additionally, there's a potential race condition where the file could be modified between reading and processing. The function should either use a regular Lock() or restructure the locking logic.", "file": "internal/session/save.go", "line": 25}, {"description": "Missing validation for password change form. The ChangePassword struct has no validation methods to check password strength, minimum length, or ensure the new password is different from the old password. This could allow weak passwords or unchanged passwords to be accepted.", "file": "internal/form/change_password.go", "line": 4}, {"description": "Session creation doesn't validate input data. The Create() function accepts any Data struct without validating if it's valid using the existing Valid() method. This could allow invalid sessions to be created and stored, potentially causing issues later when the session is used.", "file": "internal/session/store.go", "line": 10}, {"description": "Missing error handling and user feedback in login method. The catch block only sets loading=false but doesn't provide any error message to the user. Users won't know why login failed (wrong credentials, network error, server error, etc.), leading to poor user experience and potential security issues where users might not realize their login attempts are being blocked.", "file": "frontend/src/pages/auth/login.vue", "line": 153}, {"description": "Potential open redirect vulnerability. The nextUrl parameter from route params is used directly without validation in the login redirect (line 151: this.$router.push(this.nextUrl)). An attacker could craft a malicious URL with nextUrl pointing to an external site, leading users to a malicious website after successful login. The nextUrl should be validated to ensure it's a relative path or whitelisted domain.", "file": "frontend/src/pages/auth/login.vue", "line": 115}, {"description": "Logic error in init() function: The condition should check if NOT in unsafe mode to set LowMem. Currently, LowMem is only set when in unsafe mode, but the comment suggests it should be set when NOT in unsafe mode to disable features with high memory requirements.", "file": "./internal/config/config.go", "line": 58}, {"description": "SQL injection vulnerability in ImportSQL function: The function directly executes SQL statements from a file without any sanitization or prepared statements. Raw SQL statements are executed using q.Raw(stmt).Scan(&result) which could allow arbitrary SQL execution if the file contains malicious content.", "file": "./internal/config/config_db.go", "line": 354}, {"description": "Insecure directory permissions: CreateDirectories() function creates all directories with os.ModePerm (0777) permissions, which gives read, write, and execute permissions to all users. This is a security risk as it allows any user on the system to access sensitive data including database files, cache, and configuration files.", "file": "./internal/config/config_filepaths.go", "line": 67}, {"description": "Timing attack vulnerability in CheckPassword function: The function uses different code paths for bcrypt and plaintext password comparison. For bcrypt passwords it uses bcrypt.CompareHashAndPassword() which is constant-time, but for plaintext passwords it uses direct string comparison (ap == p) which is vulnerable to timing attacks that could allow attackers to determine password length and characters.", "file": "./internal/config/config_auth.go", "line": 27}, {"description": "Race condition in Settings() method: The initSettings() method is called without proper synchronization, and the settings field is modified after initialization (lines 174-176). Multiple goroutines calling Settings() concurrently could lead to race conditions where one goroutine modifies settings while another is reading them, or multiple goroutines could initialize settings simultaneously.", "file": "./internal/config/settings.go", "line": 172}, {"description": "Insecure file permissions in Save method: The settings file is saved with os.ModePerm (0777) permissions, making it readable and writable by all users on the system. This could expose sensitive configuration data to unauthorized users.", "file": "./internal/config/settings.go", "line": 141}, {"description": "Insecure test configuration: The test configuration uses a hardcoded weak admin password 'photoprism' (line 103) and has authentication disabled (Auth: false, line 82) with Public: true (line 81). While this is for testing, it could be a security risk if test configurations are accidentally used in production environments.", "file": "./internal/config/test.go", "line": 103}, {"description": "Insecure directory permissions in test configuration: The NewTestConfig function creates directories with os.ModePerm (0777) permissions at line 156, which gives read, write, and execute permissions to all users. This is a security risk even in test environments.", "file": "./internal/config/test.go", "line": 156}, {"description": "Missing import for 'log' package. The code uses 'log.Warnf' on lines 73 and 162, but there's no import statement for a logging package. This will cause a compilation error.", "file": "internal/form/serialize.go", "line": 73}, {"description": "JSON field tags are swapped in Area struct. The Row field (which represents x-coordinate) has json tag 'x' but Col field (which represents y-coordinate) has json tag 'y'. This is semantically incorrect as Row typically represents the y-axis and Col represents the x-axis. This could lead to coordinate confusion when serializing/deserializing JSON data.", "file": "internal/face/area.go", "line": 24}, {"description": "Potential nil pointer dereference in landmark detection. At line 241, the code checks 'if leftEye != nil && rightEye != nil' but leftEye and rightEye are of type pigo.Puploc (struct values, not pointers). This condition will always be true since struct values cannot be nil. The intended check should probably be whether the detected eyes have valid coordinates (Row > 0 && Col > 0) which is already done individually for each eye.", "file": "internal/face/detector.go", "line": 241}, {"description": "Potential array bounds error in landmark detection. At line 290, the code directly accesses flpcs[\"lp84\"][0] without checking if the slice exists or has elements. If flpcs[\"lp84\"] is nil or empty, this will cause a panic. The code should check if the slice exists and has at least one element before accessing index 0.", "file": "internal/face/detector.go", "line": 290}, {"description": "Typo in error message: 'empeddings' should be 'embeddings' in the UnmarshalEmbeddings function error messages at lines 168 and 170.", "file": "internal/face/embeddings.go", "line": 168}, {"description": "Potential sparse array issue in NewEmbeddings function. The function creates a result slice with the same length as the input, but only fills positions where e.CanMatch() is true. This leaves nil/zero embeddings at positions where CanMatch() returns false, creating a sparse array that could cause issues when iterating over the result. The function should either filter out non-matching embeddings or handle the sparse nature properly.", "file": "internal/face/embeddings.go", "line": 25}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the TensorFlow model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 102}, {"description": "Unsafe type assertion that could cause runtime panic. The code performs `output[0].Value().([][]float32)[0]` without checking if the type assertion is valid or if the slice has the expected structure. If the NSFW detection model returns unexpected output format, this will panic the application.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 77}, {"description": "Array bounds vulnerability in getLabels function. The function assumes the input slice `p []float32` has exactly 5 elements (Drawing, Hentai, Neutral, Porn, Sexy) but performs no bounds checking. If the slice has fewer than 5 elements, accessing p[4] will cause an index out of bounds panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 135}, {"description": "Variable shadowing bug in code generator. The variable `rule` is used both as the loop variable and as a new variable declaration in the assignment `rule, ok := rules[rule.See]`. This shadows the outer `rule` variable and creates confusing logic that could lead to incorrect rule processing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/gen.go", "line": 60}, {"description": "Logic error in logging statement. The variable `l` is assigned `len(labels)` but the log message reports matching labels with the count `l`, when it should report the count of `results` instead. This creates misleading log messages about the number of matched labels.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/photoprism/index_labels.go", "line": 59}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The code loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 154}, {"description": "Resource leak: TensorFlow SavedModel sessions are never explicitly closed. The NSFW detector loads TensorFlow models and uses their sessions but never calls Close() on them, leading to potential memory leaks and resource exhaustion over time. The models are stored in struct fields and reused, but there's no cleanup mechanism.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 124}, {"description": "Race condition vulnerability: The TensorFlow struct and its model loading are not protected by any synchronization mechanism. Multiple goroutines could simultaneously call loadModel() or access the model field, leading to race conditions, potential double-loading of models, or accessing partially initialized models.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 144}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/classify/tensorflow.go", "line": 84}, {"description": "Potential nil pointer dereference: The code accesses t.model.Session and t.model.Graph without checking if t.model is nil, even though loadModel() is called just before. If loadModel() fails silently or returns early due to race conditions, accessing t.model fields will cause a nil pointer panic.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/nsfw/detector.go", "line": 59}, {"description": "The Resample function can return a nil image if none of the resample method conditions are met. The variable 'resImg' is declared but never initialized if the method doesn't match any of the predefined constants (ResampleFit, ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleResize). This will cause the function to return nil, which could lead to a panic when the caller tries to use the returned image.", "file": "internal/thumb/resample.go", "line": 27}, {"description": "Potential file reading issue in OpenJpeg function. When autometa.Load() fails, the code falls back to imaging.Decode(fileReader) on line 40, but the fileReader may have already been partially consumed by the failed autometa.Load() call. This could cause the imaging.Decode() to fail or produce corrupted results because it's not reading from the beginning of the file.", "file": "internal/thumb/open_jpeg.go", "line": 40}, {"description": "Cross-platform path handling issue. The code uses path.Join() instead of filepath.Join() to construct file system paths. The path package is intended for URL paths and always uses forward slashes, while filepath.Join() should be used for file system paths to ensure proper behavior on Windows systems where backslashes are used as path separators.", "file": "internal/thumb/create.go", "line": 46}, {"description": "Inconsistent path separator usage. On line 46, path.Join() is used to construct the directory path, but on line 52, a hardcoded forward slash '/' is used in the fmt.Sprintf() to join the directory path with the filename. This creates inconsistency and could cause issues on Windows systems where backslashes should be used as path separators. The code should use filepath.Join() consistently for all file system path operations.", "file": "internal/thumb/create.go", "line": 52}, {"description": "Potential panic due to missing map key. In the Suffix function, ResampleMethods[method] is accessed without checking if the key exists in the map. The ResampleMethods map only contains entries for method-type ResampleOptions (ResampleFillCenter, ResampleFillTopLeft, ResampleFillBottomRight, ResampleFit, ResampleResize), but ResampleOptions() can return other values like ResampleNearestNeighbor, ResampleDefault, or ResamplePng as the method. Accessing a non-existent map key will return the zero value (empty string), but this could lead to unexpected behavior in filename generation.", "file": "internal/thumb/create.go", "line": 22}, {"description": "Race condition in thumbnail creation. In the FromFile function, there's a potential race condition between checking if a thumbnail exists in cache (line 83) and creating a new one (lines 90-108). If multiple goroutines call this function simultaneously with the same parameters, they could all pass the cache check and then all attempt to create the same thumbnail file, potentially causing file corruption or write conflicts. The function should use proper locking or atomic file creation to prevent this race condition.", "file": "internal/thumb/create.go", "line": 83}, {"description": "Nanoseconds are calculated but not applied to timestamps. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/exif.go", "line": 299}, {"description": "Same nanosecond assignment bug as in exif.go. The Truncate() and Add() methods return new time values, but the results are not assigned back to data.TakenAt and data.TakenAtLocal variables. This means the nanosecond precision is lost.", "file": "./internal/meta/json_exiftool.go", "line": 239}, {"description": "Logic error in duration parsing. Line 31 assigns the parsed duration when there's an error, but it should assign it when there's NO error. The condition should be 'err == nil' instead of 'err != nil'.", "file": "./internal/meta/duration.go", "line": 31}, {"description": "Incorrect function call in Description() method. Line 236 calls SanitizeTitle(d2) but should call SanitizeDescription(d2) since this is processing a description field, not a title.", "file": "./internal/meta/xmp_document.go", "line": 236}, {"description": "Potential division by zero vulnerability. Although the code checks that values[1] != \"0\", it doesn't verify that the parsed float value of denom is actually non-zero. If strconv.ParseFloat fails to parse values[1] or returns 0.0, the division number/denom will cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 180}, {"description": "Same potential division by zero vulnerability as line 180. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 191}, {"description": "Same potential division by zero vulnerability as previous cases. The code checks that values[1] != \"0\" but doesn't verify that the parsed float value of denom is actually non-zero, which could cause a division by zero panic.", "file": "./internal/meta/exif.go", "line": 206}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysqldump on line 129. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/backup.go", "line": 129}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/copy.go", "line": 33}, {"description": "Typo in comment: 'very if copy directory exist' should be 'verify if copy directory exists' on line 33. While this is just a comment typo, it affects code readability and documentation quality.", "file": "internal/commands/import.go", "line": 33}, {"description": "Hardcoded path '/bin/stty' on line 88 may not exist on all systems. The stty command might be located in different directories (e.g., /usr/bin/stty) on different Unix systems. This could cause the password input functionality to fail with a panic. Should use exec.LookPath() to find the correct path or handle the error gracefully.", "file": "internal/commands/passwd.go", "line": 88}, {"description": "Security vulnerability: Database password is passed as a command line argument to mysql on line 148. Command line arguments are visible to other processes via 'ps' command and may be logged in shell history, exposing the database password. This should use environment variables or a configuration file instead.", "file": "internal/commands/restore.go", "line": 148}, {"description": "Potential nil pointer dereference in logging functions. The global variable 'Log' is declared in log.go but only initialized in init.go's init() function. If any of the functions Error(), Success(), Info(), or Warning() in hub.go are called before the init() function runs (e.g., from another package's init function), Log will be nil and calling Log.Error, Log.Info, Log.Warn will cause a panic.", "file": "internal/event/hub.go", "line": 26}, {"description": "Race condition in log deduplication logic. The Fire method performs a non-atomic check-and-set operation on LastLog (lines 29 and 31). Between checking if LastLog.Get() == entry.Message and calling LastLog.Set(entry.Message), another goroutine could modify LastLog, causing the same log message to be published multiple times, breaking the deduplication mechanism.", "file": "internal/event/log.go", "line": 29}, {"description": "In the Unserialize function, there's a potential integer overflow vulnerability when parsing unsigned integers. On line 126, the code uses strconv.Atoi() which returns an int, but then casts it to uint64. If the parsed integer is negative, this will result in a very large positive uint64 value due to two's complement representation, which could lead to unexpected behavior.", "file": "./internal/form/serialize.go", "line": 126}, {"description": "In the Selection.All() method, line 36 uses copy(all, f.Files) but 'all' is an empty slice with zero capacity. The copy function will copy nothing because the destination slice has no capacity. This should be 'all = append(all, f.Files...)' to properly append the Files slice elements.", "file": "./internal/form/selection.go", "line": 36}, {"description": "In the Report function, line 59 shows an incorrect example for unsigned integer types. The example shows 'fieldName:-1' which is invalid for unsigned integers since they cannot be negative. This could mislead users about valid input values for unsigned integer fields.", "file": "./internal/form/form_report.go", "line": 59}, {"description": "In the Unserialize function, there's a potential issue with error handling. The function continues processing even after encountering parsing errors, and only the last error is returned. This means if multiple fields have parsing errors, only the last one will be reported, potentially masking earlier critical errors. The function should either stop on first error or accumulate all errors.", "file": "./internal/form/serialize.go", "line": 106}, {"description": "In SqlString function, the escaping logic is incorrect. On line 44-45, when a special character is found that needs escaping, the code copies the original character but doesn't add the escape character. This means quotes and backslashes are not properly escaped, which could lead to SQL injection vulnerabilities. The code should add an escape character (backslash) before the special character.", "file": "./pkg/clean/sql.go", "line": 44}, {"description": "Potential buffer underflow vulnerability in DecodeSession function. At line 114, the code extracts IV from the first aes.BlockSize bytes of the decoded session data without checking if the decoded data is at least aes.BlockSize bytes long. If the decoded hex string is shorter than aes.BlockSize (16 bytes), this will cause a panic due to slice bounds out of range. This could lead to a denial of service attack if an attacker provides malformed session data.", "file": "internal/hub/config.go", "line": 114}, {"description": "Resource leak: HTTP response body not closed in SendFeedback function. At line 107, the function decodes JSON from r.Body but never calls r.Body.Close(), which can lead to connection leaks and resource exhaustion over time.", "file": "internal/hub/feedback.go", "line": 107}, {"description": "Unsafe type assertion that could cause panic. At line 67, the code performs an unsafe type assertion `hit.(Location)` without checking if the cached value is actually of type Location. If the cache contains unexpected data types, this will cause a runtime panic.", "file": "internal/hub/places/location.go", "line": 67}, {"description": "Resource leak: HTTP response body not closed in HttpOk function. The function creates an HTTP request and gets a response but never calls resp.Body.Close(), which can lead to connection leaks and resource exhaustion when this function is called repeatedly.", "file": "internal/remote/remote.go", "line": 65}, {"description": "Potential path traversal vulnerability in DownloadDir function. At line 229, the destination path is constructed using string concatenation without proper validation of file.Abs. If file.Abs contains malicious path components like '../../../etc/passwd', it could allow writing files outside the intended directory, leading to directory traversal attacks.", "file": "internal/remote/webdav/webdav.go", "line": 229}, {"description": "Resource leak: HTTP response body not closed in FindLocation function. At line 136, the function decodes JSON from r.Body but never calls r.Body.Close(), which can lead to connection leaks and resource exhaustion when this function is called repeatedly for location lookups.", "file": "internal/hub/places/location.go", "line": 136}, {"description": "Resource leak: HTTP response body not closed in Refresh function. At line 200, the function decodes JSON from r.Body but never calls r.Body.Close(), which can lead to connection leaks and resource exhaustion when this function is called to refresh API credentials.", "file": "internal/hub/config.go", "line": 200}, {"description": "Potential deadlock in Stop() function: The global 'stop' channel has a buffer size of 1, but Stop() sends to it without checking if it's full. If Stop() is called multiple times, subsequent calls will block indefinitely since the channel buffer is already full.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/workers.go", "line": 74}, {"description": "Incomplete if-else block with missing logic: Lines 75-77 contain an empty if-else block that appears to be incomplete. The condition checks if offset == 0 but no action is taken, which suggests missing implementation that could lead to incorrect behavior.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/meta.go", "line": 75}, {"description": "Unchecked error from search.Accounts(): The error returned by search.Accounts(f) is assigned to 'err' but never checked before proceeding to iterate over the accounts slice. If the search fails, 'accounts' could be nil or empty, but the error is silently ignored, potentially leading to unexpected behavior.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/share.go", "line": 59}, {"description": "existingDirs map is checked but never populated: The existingDirs map is used to track created directories to avoid recreating them, but it's never actually populated when directories are successfully created. This means CreateDir() will be called repeatedly for the same directory, causing unnecessary overhead and potential errors.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/share.go", "line": 103}, {"description": "Unchecked error from search.Accounts(): The error returned by search.Accounts(f) is assigned to 'err' but never checked before proceeding to iterate over the accounts slice. If the search fails, 'accounts' could be nil or empty, but the error is silently ignored, potentially leading to unexpected behavior.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/sync.go", "line": 62}, {"description": "Worker goroutines may not complete before function returns: IndexWorker and ImportWorker goroutines are started but there's no synchronization mechanism (like WaitGroup) to ensure they complete processing all jobs before the function returns. This could lead to incomplete processing or resource leaks.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/sync_download.go", "line": 56}, {"description": "existingDirs map is checked but never populated: Similar to the issue in share.go, the existingDirs map is used to track created directories but is never actually populated when directories are successfully created. This means CreateDir() will be called repeatedly for the same directory, causing unnecessary overhead and potential errors.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpekvabsl0/internal/workers/sync_upload.go", "line": 46}, {"description": "In initFaceNet(), the code uses 'conf' directly instead of calling Config() function. This is inconsistent with other service files and could cause a panic if conf is nil, since the Config() function includes nil checking with proper error handling.", "file": "internal/service/face.go", "line": 12}, {"description": "In initNsfwDetector(), the code uses 'conf' directly instead of calling Config() function. This is inconsistent with other service files and could cause a panic if conf is nil, since the Config() function includes nil checking with proper error handling.", "file": "internal/service/nsfw.go", "line": 12}, {"description": "Potential circular dependency: Import() calls Index() and Convert(), while Index() calls Convert(), Files(), Photos(), Classify(), NsfwDetector(), and FaceNet(). If any of these services (particularly Index) were to call Import() in the future, it would create a circular dependency. The sync.Once pattern helps prevent infinite loops during initialization, but this design makes the system fragile and could lead to deadlocks or initialization failures.", "file": "internal/service/import.go", "line": 12}], "updated_files": {}}
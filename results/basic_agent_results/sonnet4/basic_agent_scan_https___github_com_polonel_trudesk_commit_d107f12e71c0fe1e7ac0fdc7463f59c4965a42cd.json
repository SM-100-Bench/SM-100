{"repo_id": "polonel_trudesk_d107f12e71c0fe1e7ac0fdc7463f59c4965a42cd", "bugs": [{"description": "Typo in error message: 'FETAL' should be 'FATAL'. This could cause confusion when debugging database connection issues.", "file": "app.js", "line": 89}, {"description": "Potential null pointer exception: On line 90, 'info' could be undefined if the buildInfo command fails, but the code tries to access 'info.version' without checking if 'info' exists first.", "file": "src/database/index.js", "line": 90}, {"description": "Hardcoded session secret key 'trudesk$123#SessionKeY!2387' on line 77. This is a serious security vulnerability as the secret should be configurable and unique per installation. Anyone with access to the source code can forge sessions.", "file": "src/socketserver.js", "line": 77}, {"description": "Another hardcoded session secret key 'trudesk$123#SessionKeY!2387' on line 75. This is the same security vulnerability as in socketserver.js - the session secret should be configurable and unique per installation.", "file": "src/middleware/index.js", "line": 75}, {"description": "Overly permissive CORS configuration on line 170. Setting 'Access-Control-Allow-Origin' to '*' allows any domain to make requests to the API, which could enable cross-site request forgery attacks and data theft.", "file": "src/middleware/index.js", "line": 170}, {"description": "Potential null pointer exception on line 85: 'res.session' should be 'req.session'. This typo will cause a runtime error when trying to set redirectUrl for unauthenticated users.", "file": "src/middleware/middleware.js", "line": 85}, {"description": "Incorrect filter syntax on lines 147 and 148. The filter function calls are missing the second parameter array. Line 147 should be `_.filter(tpsSettings, ['name', 'tps:apikey'])` and line 148 should be `_.filter(tpsSettings, ['name', 'mailer:enable'])`. This will cause these variables to be undefined, breaking TPS and mailer functionality.", "file": "src/emitter/events.js", "line": 147}, {"description": "Potential command injection vulnerability in install controller. On line 38, user input from req.body (data.host and data.port) is directly concatenated to form CONNECTION_URI without validation or sanitization. This could allow an attacker to inject malicious commands through the host or port parameters during installation.", "file": "src/controllers/install.js", "line": 38}, {"description": "Path traversal vulnerability in backup deletion. On line 109, the filename parameter from req.params.backup is used directly in file path construction without proper validation. An attacker could use '../' sequences to delete files outside the backups directory, potentially deleting critical system files.", "file": "src/controllers/backuprestore.js", "line": 109}, {"description": "Typo in error message: 'FETAL' should be 'FATAL'. This could cause confusion when debugging database connection issues.", "file": "app.js", "line": 89}, {"description": "Potential null pointer exception: On line 90, 'info' could be undefined if the buildInfo command fails, but the code tries to access 'info.version' without checking if 'info' exists first.", "file": "src/database/index.js", "line": 90}, {"description": "Hardcoded session secret key 'trudesk$123#SessionKeY!2387' on line 77. This is a serious security vulnerability as the secret should be configurable and unique per installation. Anyone with access to the source code can forge sessions.", "file": "src/socketserver.js", "line": 77}, {"description": "Another hardcoded session secret key 'trudesk$123#SessionKeY!2387' on line 75. This is the same security vulnerability as in socketserver.js - the session secret should be configurable and unique per installation.", "file": "src/middleware/index.js", "line": 75}, {"description": "Overly permissive CORS configuration on line 170. Setting 'Access-Control-Allow-Origin' to '*' allows any domain to make requests to the API, which could enable cross-site request forgery attacks and data theft.", "file": "src/middleware/index.js", "line": 170}, {"description": "Potential null pointer exception on line 85: 'res.session' should be 'req.session'. This typo will cause a runtime error when trying to set redirectUrl for unauthenticated users.", "file": "src/middleware/middleware.js", "line": 85}, {"description": "Incorrect filter syntax on lines 147 and 148. The filter function calls are missing the second parameter array. Line 147 should be `_.filter(tpsSettings, ['name', 'tps:apikey'])` and line 148 should be `_.filter(tpsSettings, ['name', 'mailer:enable'])`. This will cause these variables to be undefined, breaking TPS and mailer functionality.", "file": "src/emitter/events.js", "line": 147}, {"description": "Potential command injection vulnerability in install controller. On line 38, user input from req.body (data.host and data.port) is directly concatenated to form CONNECTION_URI without validation or sanitization. This could allow an attacker to inject malicious commands through the host or port parameters during installation.", "file": "src/controllers/install.js", "line": 38}, {"description": "Path traversal vulnerability in backup deletion. On line 109, the filename parameter from req.params.backup is used directly in file path construction without proper validation. An attacker could use '../' sequences to delete files outside the backups directory, potentially deleting critical system files.", "file": "src/controllers/backuprestore.js", "line": 109}, {"description": "Potential null pointer exception: The code accesses h.owner.role._id and ticket.owner.role._id without checking if h.owner.role or ticket.owner.role exist. If these nested objects are null or undefined, this will cause a runtime error. The code should check for null/undefined before accessing nested properties.", "file": "src/controllers/api/v1/tickets.js", "line": 214}, {"description": "Inconsistent property access: Line 347 uses 'req.user.role.role' but other parts of the code use 'req.user.role' directly. This suggests either a typo or inconsistent data structure handling. This could cause undefined property access errors.", "file": "src/controllers/api/v1/tickets.js", "line": 347}, {"description": "Potential null pointer exception: Line 566 accesses postData.user.fullname without checking if postData.user exists. If postData.user is null or undefined, this will cause a runtime error. The code should validate that postData.user exists before accessing its properties.", "file": "src/controllers/api/v1/tickets.js", "line": 566}, {"description": "Multiple potential null pointer exceptions: Lines 631-632 access postData.ticket.subject and postData.ticket.issue without checking if postData.ticket exists. Additionally, line 630 accesses _.first(ticketType.priorities)._id without checking if ticketType.priorities exists or is non-empty, which could cause a runtime error if the array is empty.", "file": "src/controllers/api/v1/tickets.js", "line": 630}, {"description": "Potential null pointer exception: Lines 301-305 access postData.user.email, postData.user.password, and postData.user.fullname without checking if postData.user exists. If postData.user is null or undefined, this will cause a runtime error. The code should validate that postData.user exists before accessing its properties.", "file": "src/controllers/api/v1/users.js", "line": 301}, {"description": "Potential null pointer exception: Lines 255, 260, and 266 access properties of 'thirdParty' object without checking if it exists. If nconf.get('thirdParty') returns null or undefined, accessing thirdParty.url and thirdParty.apikey will cause runtime errors. Additionally, line 260 accesses ticket.owner.email without checking if ticket.owner exists.", "file": "src/controllers/api/v2/tickets.js", "line": 255}, {"description": "Typo in JSON response: Line 164 has 'sucess' instead of 'success' in the error response object. This is a spelling error that could cause client-side code expecting the correct 'success' property to fail.", "file": "src/controllers/api/v1/settings.js", "line": 164}, {"description": "Missing error handling: Line 175-177 in the elasticsearch search function uses es.esclient.search(obj).then() but doesn't include a .catch() handler. If the elasticsearch search fails, it will result in an unhandled promise rejection, which could crash the application or leave the client hanging without a response.", "file": "src/controllers/api/v2/elasticsearch.js", "line": 175}, {"description": "Incorrect filter usage: Line 50 uses _.filter() with only a predicate function but no array to filter. The correct usage should be _.filter(groups, function(g) { return !g.public; }). This will cause a runtime error as _.filter expects an array as the first argument.", "file": "src/controllers/api/v1/groups.js", "line": 50}, {"description": "Potential null pointer exception: Line 76 accesses ro.order.push() without checking if ro (role order) exists or if ro.order is defined. If roleOrder.getOrder() returns null or an object without an 'order' property, this will cause a runtime error.", "file": "src/controllers/api/v1/roles.js", "line": 76}, {"description": "Potential undefined variable in URL construction: Line 28 concatenates 'fullFilter' to the URL, but if 'fullFilter' is undefined (when filter is falsy), it will append 'undefined' as a string to the URL, resulting in malformed URLs like '/api/v2/tickets?type=all&page=0&limit=50undefined'. The code should handle the undefined case properly.", "file": "src/client/api/index.js", "line": 28}], "updated_files": {}}
{"repo_id": "nvbn_thefuck_1206", "bugs": [{"description": "Incorrect filename with double .py extension. The file should be named 'test.py' instead of 'test.py.py'. This could cause import issues and confusion in the module system.", "file": "thefuck/rules/test.py.py", "line": 1}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/git_push_different_branch_names.py", "line": 12}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/npm_missing_script.py", "line": 16}, {"description": "Potential OSError/FileNotFoundError when trying to list directories. The _get_sub_dirs function calls os.listdir(parent) without checking if the parent directory exists or is accessible, which could raise an OSError or FileNotFoundError.", "file": "thefuck/rules/cd_correction.py", "line": 16}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/git_checkout.py", "line": 34}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError. This occurs in both the match() and get_new_command() functions.", "file": "thefuck/rules/brew_install.py", "line": 32}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/brew_install.py", "line": 39}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if either regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/git_merge.py", "line": 15}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/git_merge.py", "line": 16}, {"description": "Potential IndexError exception when regex findall returns empty list. The code uses [-1] to get the last match from findall, but if the regex doesn't match anything in command.output, accessing [-1] on an empty list will raise an IndexError.", "file": "thefuck/rules/git_push.py", "line": 42}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0][0] will raise an IndexError.", "file": "thefuck/rules/gradle_no_task.py", "line": 32}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/yarn_command_not_found.py", "line": 37}, {"description": "Potential IndexError exception when splitting strings. The code splits command.output by '`' and accesses index [2], then splits by \"'\" and accesses [0], then splits by ' ' and accesses [0]. If any of these splits don't produce enough elements, accessing the specified indices will raise an IndexError.", "file": "thefuck/rules/git_help_aliased.py", "line": 11}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/git_branch_exists.py", "line": 17}, {"description": "Potential IndexError exception when splitting command.output by newlines. The code accesses index [-4] after splitting by '\\n', but if command.output has fewer than 4 lines, this will raise an IndexError.", "file": "thefuck/rules/git_rebase_merge_dir.py", "line": 15}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/hostscli.py", "line": 25}, {"description": "Potential IndexError exception when regex findall returns empty list. The code assumes findall will always return at least one match, but if the regex doesn't match anything in command.output, accessing [0] will raise an IndexError.", "file": "thefuck/rules/lein_not_task.py", "line": 17}, {"description": "Potential IndexError exception when accessing command.script_parts[1]. The code assumes there will always be at least 2 elements in script_parts, but if the command only has one part (just 'whois'), accessing index [1] will raise an IndexError.", "file": "thefuck/rules/whois.py", "line": 28}, {"description": "Potential ValueError exception when 'systemctl' is not found in command.script_parts. The code calls cmd.index('systemctl') without checking if 'systemctl' exists in the list, which will raise a ValueError if 'systemctl' is not found.", "file": "thefuck/rules/systemctl.py", "line": 15}], "updated_files": {}}
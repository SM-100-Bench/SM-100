{"repo_id": "redis_node-redis_de0a9628aabb9daecdccc898d10b375ab1b98566", "bugs": [{"description": "Incorrect usage of removeAllListeners() method. The removeAllListeners() method does not accept parameters and removes ALL listeners for all events. The code appears to intend removing a specific listener, but this will actually remove all listeners from the client, which could break other functionality. Should use removeListener() or off() instead.", "file": "lib/extendedApi.js", "line": 101}, {"description": "Potential TypeError when args is null. On line 26, if args is null, accessing args.constructor.name will throw a TypeError because null does not have a constructor property. The code checks for null on line 20 but this check comes after the error case on line 26.", "file": "lib/extendedApi.js", "line": 26}, {"description": "Potential TypeError when callback is null. If callback is null, accessing callback.constructor.name will throw a TypeError because null does not have a constructor property. The code should handle null values properly in the error message construction.", "file": "lib/extendedApi.js", "line": 30}, {"description": "Missing method validation in Multi constructor. Lines 16 and 18 call this[command[0]] and this[command] without checking if these methods exist. If the command doesn't correspond to a valid method on the Multi prototype, this will throw a TypeError. This could happen with invalid or unsupported Redis commands.", "file": "lib/multi.js", "line": 16}, {"description": "Potential array bounds violation in multi_callback function. The code assumes replies[i] exists for each command in the queue, but if the replies array is shorter than the queue length, this will access undefined array elements. This could happen if Redis returns fewer replies than expected, leading to undefined behavior or incorrect processing.", "file": "lib/multi.js", "line": 66}, {"description": "Memory leak potential in duplicate() function. The error_listener is never removed if the 'ready' event fires first. Line 101 incorrectly tries to remove error_listener but uses removeAllListeners() which doesn't accept parameters. The error_listener will remain attached to the client, potentially causing memory leaks. Should use client.removeListener('error', error_listener) instead.", "file": "lib/extendedApi.js", "line": 107}, {"description": "Array bounds violation in pipeline_transaction_command. On line 38, when index is -1 (for the 'multi' command), the code sets self.wants_buffers[-1] = command_obj.buffer_args, which creates a property with key '-1' on the array. This corrupts the array structure and could cause issues when iterating over the wants_buffers array later.", "file": "lib/multi.js", "line": 38}, {"description": "Incorrect usage of removeAllListeners() method. The removeAllListeners() method does not accept parameters and removes ALL listeners for all events. The code appears to intend removing a specific listener, but this will actually remove all listeners from the client, which could break other functionality. Should use removeListener() or off() instead.", "file": "lib/extendedApi.js", "line": 101}, {"description": "Potential TypeError when args is null. On line 26, if args is null, accessing args.constructor.name will throw a TypeError because null does not have a constructor property. The code checks for null on line 20 but this check comes after the error case on line 26.", "file": "lib/extendedApi.js", "line": 26}, {"description": "Potential TypeError when callback is null. If callback is null, accessing callback.constructor.name will throw a TypeError because null does not have a constructor property. The code should handle null values properly in the error message construction.", "file": "lib/extendedApi.js", "line": 30}, {"description": "Missing method validation in Multi constructor. Lines 16 and 18 call this[command[0]] and this[command] without checking if these methods exist. If the command doesn't correspond to a valid method on the Multi prototype, this will throw a TypeError. This could happen with invalid or unsupported Redis commands.", "file": "lib/multi.js", "line": 16}, {"description": "Potential array bounds violation in multi_callback function. The code assumes replies[i] exists for each command in the queue, but if the replies array is shorter than the queue length, this will access undefined array elements. This could happen if Redis returns fewer replies than expected, leading to undefined behavior or incorrect processing.", "file": "lib/multi.js", "line": 66}, {"description": "Memory leak potential in duplicate() function. The error_listener is never removed if the 'ready' event fires first. Line 101 incorrectly tries to remove error_listener but uses removeAllListeners() which doesn't accept parameters. The error_listener will remain attached to the client, potentially causing memory leaks. Should use client.removeListener('error', error_listener) instead.", "file": "lib/extendedApi.js", "line": 107}, {"description": "Array bounds violation in pipeline_transaction_command. On line 38, when index is -1 (for the 'multi' command), the code sets self.wants_buffers[-1] = command_obj.buffer_args, which creates a property with key '-1' on the array. This corrupts the array structure and could cause issues when iterating over the wants_buffers array later.", "file": "lib/multi.js", "line": 38}, {"description": "Deprecated Buffer constructor usage without 'new' keyword. Line 49 uses 'new Buffer(json)' which is deprecated in Node.js and should be replaced with 'Buffer.from(json)' for security and compatibility reasons. The deprecated Buffer constructor can lead to security vulnerabilities and is removed in newer Node.js versions.", "file": "test/multi.spec.js", "line": 49}, {"description": "Incorrect reference to 'this.timer' in line 57. The code is inside a callback function where 'this' refers to the stderr stream, not the StunnelProcess instance. It should be 'self.timer' instead of 'this.timer' to properly clear the timeout.", "file": "test/lib/stunnel-process.js", "line": 57}, {"description": "Deprecated Buffer constructor usage. Line 46 uses 'new Buffer('string key 1')' which is deprecated in Node.js and should be replaced with 'Buffer.from('string key 1')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 46}, {"description": "Deprecated Buffer constructor usage. Line 54 uses 'new Buffer('string key 1')' which is deprecated in Node.js and should be replaced with 'Buffer.from('string key 1')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 54}, {"description": "Deprecated Buffer constructor usage. Line 68 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 68}, {"description": "Deprecated Buffer constructor usage. Line 69 uses 'new Buffer('key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 69}, {"description": "Deprecated Buffer constructor usage. Line 89 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 89}, {"description": "Deprecated Buffer constructor usage. Line 90 uses 'new Buffer('key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 90}, {"description": "Deprecated Buffer constructor usage. Line 153 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 153}, {"description": "Deprecated Buffer constructor usage. Line 165 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 165}, {"description": "Deprecated Buffer constructor usage. Line 178 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 178}, {"description": "Deprecated Buffer constructor usage. Line 229 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 229}, {"description": "Deprecated Buffer constructor usage. Line 242 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 242}, {"description": "Deprecated Buffer constructor usage. Line 255 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/detect_buffers.spec.js", "line": 255}, {"description": "Deprecated Buffer constructor usage. Line 68 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 68}, {"description": "Deprecated Buffer constructor usage. Line 69 uses 'new Buffer('key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 69}, {"description": "Deprecated Buffer constructor usage. Line 90 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 90}, {"description": "Deprecated Buffer constructor usage. Line 91 uses 'new Buffer('key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 91}, {"description": "Deprecated Buffer constructor usage. Line 124 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 124}, {"description": "Deprecated Buffer constructor usage. Line 136 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 136}, {"description": "Deprecated Buffer constructor usage. Line 149 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 149}, {"description": "Deprecated Buffer constructor usage. Line 200 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 200}, {"description": "Deprecated Buffer constructor usage. Line 213 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 213}, {"description": "Deprecated Buffer constructor usage. Line 226 uses 'new Buffer('hash key 2')' which is deprecated in Node.js and should be replaced with 'Buffer.from('hash key 2')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 226}, {"description": "Deprecated Buffer constructor usage. Line 244 uses 'new Buffer('test message')' which is deprecated in Node.js and should be replaced with 'Buffer.from('test message')' for security and compatibility reasons.", "file": "test/return_buffers.spec.js", "line": 244}, {"description": "Deprecated Buffer constructor usage. Line 60 uses 'new Buffer('REPLY')' which is deprecated in Node.js and should be replaced with 'Buffer.from('REPLY')' for security and compatibility reasons.", "file": "test/commands/client.spec.js", "line": 60}, {"description": "Deprecated Buffer constructor usage. Line 68 uses 'new Buffer('SKIP')' which is deprecated in Node.js and should be replaced with 'Buffer.from('SKIP')' for security and compatibility reasons.", "file": "test/commands/client.spec.js", "line": 68}, {"description": "Deprecated Buffer constructor usage. Line 94 uses 'new Buffer('REPLY')' and 'new Buffer('OFF')' which are deprecated in Node.js and should be replaced with 'Buffer.from('REPLY')' and 'Buffer.from('OFF')' for security and compatibility reasons.", "file": "test/commands/client.spec.js", "line": 94}, {"description": "Deprecated Buffer constructor usage. Line 66 uses 'new Buffer([0xAA, 0xBB, 0x00, 0xF0])' and 'new Buffer([0xCC, 0xDD, 0x00, 0xF0])' which are deprecated in Node.js and should be replaced with 'Buffer.from([0xAA, 0xBB, 0x00, 0xF0])' and 'Buffer.from([0xCC, 0xDD, 0x00, 0xF0])' for security and compatibility reasons.", "file": "test/commands/hgetall.spec.js", "line": 66}, {"description": "Deprecated Buffer constructor usage. Line 72 uses 'new Buffer([0xAA, 0xBB, 0x00, 0xF0])' which is deprecated in Node.js and should be replaced with 'Buffer.from([0xAA, 0xBB, 0x00, 0xF0])' for security and compatibility reasons.", "file": "test/commands/hgetall.spec.js", "line": 72}, {"description": "Deprecated Buffer constructor usage. Line 73 uses multiple instances of 'new Buffer([0xCC, 0xDD, 0x00, 0xF0])' and 'new Buffer([0xAA, 0xBB, 0x00, 0xF0])' which are deprecated in Node.js and should be replaced with 'Buffer.from()' for security and compatibility reasons.", "file": "test/commands/hgetall.spec.js", "line": 73}, {"description": "Deprecated Buffer constructor usage. Line 23 uses 'new Buffer('0123456789')' which is deprecated in Node.js and should be replaced with 'Buffer.from('0123456789')' for security and compatibility reasons.", "file": "test/commands/hlen.spec.js", "line": 23}, {"description": "Deprecated Buffer constructor usage. Line 24 uses 'new Buffer('abcdefghij')' which is deprecated in Node.js and should be replaced with 'Buffer.from('abcdefghij')' for security and compatibility reasons.", "file": "test/commands/hlen.spec.js", "line": 24}, {"description": "Deprecated Buffer constructor usage. Lines 25-26 use 'new Buffer(0)' which is deprecated in Node.js and should be replaced with 'Buffer.alloc(0)' for security and compatibility reasons.", "file": "test/commands/hlen.spec.js", "line": 25}, {"description": "Deprecated Buffer constructor usage. Lines 24-25 and 32-33 and 40-41 use 'new Buffer()' which is deprecated in Node.js and should be replaced with 'Buffer.from()' or 'Buffer.alloc()' for security and compatibility reasons.", "file": "test/commands/hset.spec.js", "line": 24}, {"description": "Deprecated Buffer constructor usage. Multiple lines use 'new Buffer()' which is deprecated in Node.js and should be replaced with 'Buffer.from()' for security and compatibility reasons.", "file": "test/node_redis.spec.js", "line": 704}, {"description": "Deprecated Buffer constructor usage. Multiple lines (127, 140, 265, 271, 423, 497-499, 522-523) use 'new Buffer()' which is deprecated in Node.js and should be replaced with 'Buffer.from()' for security and compatibility reasons.", "file": "test/pubsub.spec.js", "line": 127}, {"description": "Potential null reference error in afterEach. The client variable could be null if beforeEach didn't set it properly or if an error occurred during test setup, but the afterEach function calls client.end(true) without checking if client is null or undefined first.", "file": "test/connection.spec.js", "line": 17}, {"description": "Potential null reference error in afterEach. The client variable could be null if beforeEach didn't set it properly or if an error occurred during test setup, but the afterEach function calls client.end(true) without checking if client is null or undefined first.", "file": "test/batch.spec.js", "line": 64}, {"description": "Potential memory leak with setInterval. The interval is cleared and set to null in line 174-175, but if the condition 'client.commandQueueLength !== 0' is always true, the interval will never be cleared, causing a memory leak. There should be a timeout or maximum iteration count to prevent infinite polling.", "file": "test/auth.spec.js", "line": 170}, {"description": "Filename typo: 'conect.slave.spec.js' should be 'connect.slave.spec.js'. The filename has a misspelling of 'connect' as 'conect', which could cause confusion and make the file harder to find.", "file": "test/conect.slave.spec.js", "line": 1}, {"description": "Inconsistent file naming convention: 'randomkey.test.js' uses '.test.js' extension while all other command test files use '.spec.js' extension. This inconsistency could cause issues with test runners that expect a specific naming pattern.", "file": "test/commands/randomkey.test.js", "line": 1}], "updated_files": {}}
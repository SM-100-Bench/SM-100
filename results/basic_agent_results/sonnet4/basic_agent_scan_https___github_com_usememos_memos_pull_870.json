{"repo_id": "usememos_memos_870", "bugs": [{"description": "Logic error in email validation: The code treats valid emails as invalid. The ValidateEmail function returns true for valid emails, but the condition `if common.ValidateEmail(create.Email)` treats this as an error case. This should be `if !common.ValidateEmail(create.Email)` to properly reject invalid emails.", "file": "api/user.go", "line": 79}, {"description": "Logic error in email validation: The code treats valid emails as invalid. The ValidateEmail function returns true for valid emails, but the condition `if common.ValidateEmail(*patch.Email)` treats this as an error case. This should be `if !common.ValidateEmail(*patch.Email)` to properly reject invalid emails.", "file": "api/user.go", "line": 121}, {"description": "Logic error in email validation: The code treats valid emails as invalid. The ValidateEmail function returns true for valid emails, but the condition `if common.ValidateEmail(create.Email)` treats this as an error case. This should be `if !common.ValidateEmail(create.Email)` to properly reject invalid emails.", "file": "api/user.go", "line": 79}, {"description": "Logic error in email validation: The code treats valid emails as invalid. The ValidateEmail function returns true for valid emails, but the condition `if common.ValidateEmail(*patch.Email)` treats this as an error case. This should be `if !common.ValidateEmail(*patch.Email)` to properly reject invalid emails.", "file": "api/user.go", "line": 121}, {"description": "In the signup handler, there's a potential bug where the error variable 'err' is being used in the SetInternal() call on lines 87 and 106, but 'err' may be nil at that point. On line 87, if hostUser != nil and signup.Role == api.Host, the error is returned with SetInternal(err), but err could be nil from the previous FindUser call. Similarly on line 106, err could be nil from the previous system setting operations. This could cause a panic or unexpected behavior.", "file": "server/auth.go", "line": 87}, {"description": "In the aclMiddleware function, there's a potential type conversion issue on line 87. The code uses strconv.Atoi(fmt.Sprintf(\"%v\", userIDValue)) to convert the session value to an integer, but it ignores the error return value. If userIDValue contains non-numeric data, this conversion will fail silently and userID will be 0, which could lead to incorrect user lookups or authorization bypasses.", "file": "server/acl.go", "line": 87}, {"description": "In the getFileSystem function, there's a potential panic on line 18. If fs.Sub() returns an error (which can happen if the path doesn't exist or is invalid), the function will panic, causing the entire application to crash. This is particularly problematic during server startup as it would prevent the server from starting at all.", "file": "server/embed_frontend.go", "line": 18}, {"description": "In the '/get/image' handler, there's a potential security vulnerability and incorrect header order. On lines 64-66, the code sets headers after calling WriteHeader(). In HTTP, headers must be set before calling WriteHeader() or they will be ignored. Additionally, there's no validation of the URL scheme, which could allow SSRF (Server-Side Request Forgery) attacks where internal network resources could be accessed.", "file": "server/http_getter.go", "line": 65}, {"description": "In the resource blob handler on lines 159-160, there's an incorrect header order issue. The code calls WriteHeader() before setting the Content-Type header. In HTTP, headers must be set before calling WriteHeader() or they will be ignored. Similarly, on lines 266-268, headers are being set after WriteHeader() which means they won't be applied.", "file": "server/resource.go", "line": 160}, {"description": "In the resource deletion handler on line 228, there's a bug where the error variable 'err' is being used in SetInternal() call, but 'err' is nil at that point since the previous check was 'if resource == nil'. This will pass a nil error to SetInternal() which could cause unexpected behavior.", "file": "server/resource.go", "line": 228}, {"description": "In the system status handler on lines 72-86, there are multiple unsafe type assertions that could cause runtime panics. The code uses value.(bool), value.(string), and valueMap[\"key\"].(string) without checking if the type assertions are valid or if the map keys exist. If the JSON data doesn't match the expected types or if map keys are missing, this will cause a panic.", "file": "server/system.go", "line": 72}, {"description": "In the user patch handler on lines 188 and 190, there are bugs where the error variable 'err' is being used in SetInternal() calls, but 'err' is nil at those points. On line 188, the check is 'if currentUser == nil' but then it uses SetInternal(err) where err would be nil. Similarly on line 190, the authorization check doesn't involve an error but still uses SetInternal(err). This will pass nil errors to SetInternal() which could cause unexpected behavior.", "file": "server/user.go", "line": 188}, {"description": "In the user delete handler on lines 253 and 255, there are similar bugs where the error variable 'err' is being used in SetInternal() calls when 'err' is nil. On line 253, the check is 'if currentUser == nil' but then uses SetInternal(err) where err would be nil. On line 255, the authorization check doesn't involve an error but still uses SetInternal(err). This will pass nil errors to SetInternal() which could cause unexpected behavior.", "file": "server/user.go", "line": 253}, {"description": "In the memo handlers on lines 222 and 345, there are potential slice bounds errors. The code attempts to slice arrays using memoFind.Offset without checking if the offset is within bounds. If memoFind.Offset is greater than the length of the slice, this will cause a runtime panic. The code should validate that the offset is within bounds before attempting the slice operation.", "file": "server/memo.go", "line": 345}], "updated_files": {}}
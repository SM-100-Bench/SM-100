{"repo_id": "websockets_ws_2231", "bugs": [{"description": "Potential TypeError when accessing req.headers.upgrade without checking if it exists. If the 'upgrade' header is missing from the request, calling .toLowerCase() on undefined will throw a TypeError, causing the server to crash instead of gracefully handling the invalid request.", "file": "lib/websocket-server.js", "line": 246}, {"description": "Potential TypeError when accessing this._sender._bufferedBytes without checking if this._sender exists. If the WebSocket is in a state where _socket exists but _sender is null (which can happen during initialization or cleanup), this will throw a TypeError when trying to access _bufferedBytes property of null.", "file": "lib/websocket.js", "line": 120}, {"description": "Potential TypeError when accessing res.headers.upgrade without checking if it exists. If the 'upgrade' header is missing from the server response, calling .toLowerCase() on undefined will throw a TypeError, causing the client connection to fail with an unhandled exception instead of gracefully handling the invalid response.", "file": "lib/websocket.js", "line": 931}, {"description": "The Event constructor documentation claims it throws TypeError if the 'type' argument is not specified, but the implementation does not validate the type parameter. If type is undefined, null, or not provided, it will be stored as-is without throwing the documented TypeError, leading to inconsistent behavior.", "file": "lib/event-target.js", "line": 24}, {"description": "Potential TypeError when accessing this._receiver.removeAllListeners() without checking if this._receiver exists. In the emitClose() method, if _socket exists but _receiver is null (which can happen during certain error conditions or race conditions), calling removeAllListeners() on null will throw a TypeError.", "file": "lib/websocket.js", "line": 263}, {"description": "Memory leak potential in terminate() method - the _closeTimer is not cleared when forcibly terminating the connection. If a close timer was set during a normal close operation and then terminate() is called, the timer will continue to run and may attempt to destroy an already destroyed socket, potentially causing errors or preventing garbage collection.", "file": "lib/websocket.js", "line": 494}, {"description": "Incorrect callback behavior in WebSocketServer.close() when server is already closed. The callback is called with an Error object, but according to Node.js conventions, the first parameter should be null for success and an Error for failure. Since the server being already closed is not necessarily an error condition, this could confuse users expecting standard Node.js callback patterns.", "file": "lib/websocket-server.js", "line": 163}, {"description": "Potential TypeError when accessing req.headers.upgrade without checking if it exists. If the 'upgrade' header is missing from the request, calling .toLowerCase() on undefined will throw a TypeError, causing the server to crash instead of gracefully handling the invalid request.", "file": "lib/websocket-server.js", "line": 246}, {"description": "Potential TypeError when accessing this._sender._bufferedBytes without checking if this._sender exists. If the WebSocket is in a state where _socket exists but _sender is null (which can happen during initialization or cleanup), this will throw a TypeError when trying to access _bufferedBytes property of null.", "file": "lib/websocket.js", "line": 120}, {"description": "Potential TypeError when accessing res.headers.upgrade without checking if it exists. If the 'upgrade' header is missing from the server response, calling .toLowerCase() on undefined will throw a TypeError, causing the client connection to fail with an unhandled exception instead of gracefully handling the invalid response.", "file": "lib/websocket.js", "line": 931}, {"description": "The Event constructor documentation claims it throws TypeError if the 'type' argument is not specified, but the implementation does not validate the type parameter. If type is undefined, null, or not provided, it will be stored as-is without throwing the documented TypeError, leading to inconsistent behavior.", "file": "lib/event-target.js", "line": 24}, {"description": "Potential TypeError when accessing this._receiver.removeAllListeners() without checking if this._receiver exists. In the emitClose() method, if _socket exists but _receiver is null (which can happen during certain error conditions or race conditions), calling removeAllListeners() on null will throw a TypeError.", "file": "lib/websocket.js", "line": 263}, {"description": "Memory leak potential in terminate() method - the _closeTimer is not cleared when forcibly terminating the connection. If a close timer was set during a normal close operation and then terminate() is called, the timer will continue to run and may attempt to destroy an already destroyed socket, potentially causing errors or preventing garbage collection.", "file": "lib/websocket.js", "line": 494}, {"description": "Incorrect callback behavior in WebSocketServer.close() when server is already closed. The callback is called with an Error object, but according to Node.js conventions, the first parameter should be null for success and an Error for failure. Since the server being already closed is not necessarily an error condition, this could confuse users expecting standard Node.js callback patterns.", "file": "lib/websocket-server.js", "line": 163}, {"description": "Inconsistent protocol error message - missing colon after 'https'. The error message states '\"http:\", \"https\", or \"ws+unix:\"' but it should be '\"http:\", \"https:\", or \"ws+unix:\"' to be consistent with the other protocols that include colons.", "file": "test/websocket.test.js", "line": 49}, {"description": "Incorrect describe block name - the test file is testing 'validation' module but the describe block is named 'extension'. This should be 'validation' to match the actual module being tested.", "file": "test/validation.test.js", "line": 7}, {"description": "Potential buffer length mismatch in test - the concat function is called with a total length of 6 but only 4 bytes of data are provided ([1,2] + [3,4] = 4 bytes). The test expects the result to equal [1,2,3,4] but with a length parameter of 6, the function should return a 6-byte buffer. This test may be incorrectly validating the concat function behavior.", "file": "test/buffer-util.test.js", "line": 10}, {"description": "Missing error handling and potential undefined variable usage - the testCount variable is used in the close event handler but may be undefined if the message event never fires or if parseInt fails. The parseInt call on line 33 should include a radix parameter (parseInt(data, 10)) and there should be error handling for the WebSocket connection.", "file": "test/autobahn.js", "line": 33}], "updated_files": {}}
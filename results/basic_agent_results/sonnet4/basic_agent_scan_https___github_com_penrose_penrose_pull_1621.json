{"repo_id": "penrose_penrose_1621", "bugs": [{"description": "In the sqrt derivative calculation, the code uses 'z' (the result of sqrt(x)) instead of 'v' (the input parameter x). The derivative of sqrt(x) should be 1/(2*sqrt(x)), but the code calculates 1/(2*sqrt(sqrt(x))). This should be 'max(EPS_DENOM, sqrt(v))' or just 'max(EPS_DENOM, z)' where z is sqrt(v), but since z is the whole Unary expression, it should use sqrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 106}, {"description": "In the inverse derivative calculation, the code uses 'z' (the whole Unary expression) instead of 'v' (the input parameter). The derivative of 1/x should be -1/x^2, but the code calculates -(1/x)^2 instead of -1/x^2. This should be 'neg(inverse(squared(v)))'.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 109}, {"description": "In the cbrt (cube root) derivative calculation, the code uses 'squared(z)' instead of the correct formula. The derivative of x^(1/3) should be (1/3) * x^(-2/3) = 1/(3 * x^(2/3)) = 1/(3 * (x^(1/3))^2) = 1/(3 * cbrt(x)^2). The code should be 'div(1/3, squared(z))' where z is cbrt(v), but since z is the whole expression, it should use the cube root of v. However, this might actually be correct if z represents cbrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 133}, {"description": "In the tan derivative calculation, the code calculates 'squared(inverse(cos(v)))' which is (1/cos(v))^2 = sec^2(v). However, the derivative of tan(x) should be sec^2(x) = 1/cos^2(x), which should be 'inverse(squared(cos(v)))' not 'squared(inverse(cos(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 173}, {"description": "In the tanh derivative calculation, the code calculates 'squared(inverse(cosh(v)))' which is (1/cosh(v))^2 = sech^2(v). However, the derivative of tanh(x) should be sech^2(x) = 1/cosh^2(x), which should be 'inverse(squared(cosh(v)))' not 'squared(inverse(cosh(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 176}, {"description": "In the atan2 derivative calculation, the sensitivities are swapped. For atan2(y, x), the partial derivative with respect to y (first parameter) should be x/(x^2 + y^2), and with respect to x (second parameter) should be -y/(x^2 + y^2). However, the code has them reversed: left (y) gets x/denom and right (x) gets -y/denom.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 208}, {"description": "In the Ternary case sensitivity calculation, the condition sensitivity is set to an empty array [[]] instead of [[0]]. The condition parameter should have zero sensitivity since the derivative of a conditional expression with respect to its boolean condition is typically zero in automatic differentiation.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 253}, {"description": "In the bboxFromPoints function, the reduce operations for minCorner and maxCorner don't provide initial values. If the points array is empty, this will throw a TypeError. The reduce function should have initial values like [Infinity, Infinity] for minCorner and [-Infinity, -Infinity] for maxCorner, or there should be a check to ensure points is not empty.", "file": "./packages/core/src/engine/BBox.ts", "line": 160}, {"description": "In the int function, the range check for 32-bit signed integers is incorrect. The condition checks if n is between -0x80000001 and 0x80000000, but the valid range for 32-bit signed integers should be -0x80000000 to 0x7FFFFFFF. The current check excludes the minimum valid value (-2147483648) and includes an invalid maximum value (2147483648).", "file": "./packages/core/src/utils/Wasm.ts", "line": 94}, {"description": "In the minLoc and maxLoc functions, they throw a generic TypeError when the locs array is empty, but they should provide a more descriptive error message. The functions should throw an error with a meaningful message like 'Cannot find min/max location from empty array' instead of just 'new TypeError()'.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 110}, {"description": "In the convexPolygonMinkowskiSDFOneSided function, there's a potential division by zero error on line 92. The function divides by p1.length without checking if p1 is empty. If p1 is an empty array, this will result in division by zero, which could cause NaN values to propagate through the computation.", "file": "./packages/core/src/contrib/Minkowski.ts", "line": 92}, {"description": "In the sqrt derivative calculation, the code uses 'z' (the result of sqrt(x)) instead of 'v' (the input parameter x). The derivative of sqrt(x) should be 1/(2*sqrt(x)), but the code calculates 1/(2*sqrt(sqrt(x))). This should be 'max(EPS_DENOM, sqrt(v))' or just 'max(EPS_DENOM, z)' where z is sqrt(v), but since z is the whole Unary expression, it should use sqrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 106}, {"description": "In the inverse derivative calculation, the code uses 'z' (the whole Unary expression) instead of 'v' (the input parameter). The derivative of 1/x should be -1/x^2, but the code calculates -(1/x)^2 instead of -1/x^2. This should be 'neg(inverse(squared(v)))'.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 109}, {"description": "In the cbrt (cube root) derivative calculation, the code uses 'squared(z)' instead of the correct formula. The derivative of x^(1/3) should be (1/3) * x^(-2/3) = 1/(3 * x^(2/3)) = 1/(3 * (x^(1/3))^2) = 1/(3 * cbrt(x)^2). The code should be 'div(1/3, squared(z))' where z is cbrt(v), but since z is the whole expression, it should use the cube root of v. However, this might actually be correct if z represents cbrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 133}, {"description": "In the tan derivative calculation, the code calculates 'squared(inverse(cos(v)))' which is (1/cos(v))^2 = sec^2(v). However, the derivative of tan(x) should be sec^2(x) = 1/cos^2(x), which should be 'inverse(squared(cos(v)))' not 'squared(inverse(cos(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 173}, {"description": "In the tanh derivative calculation, the code calculates 'squared(inverse(cosh(v)))' which is (1/cosh(v))^2 = sech^2(v). However, the derivative of tanh(x) should be sech^2(x) = 1/cosh^2(x), which should be 'inverse(squared(cosh(v)))' not 'squared(inverse(cosh(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 176}, {"description": "In the atan2 derivative calculation, the sensitivities are swapped. For atan2(y, x), the partial derivative with respect to y (first parameter) should be x/(x^2 + y^2), and with respect to x (second parameter) should be -y/(x^2 + y^2). However, the code has them reversed: left (y) gets x/denom and right (x) gets -y/denom.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 208}, {"description": "In the Ternary case sensitivity calculation, the condition sensitivity is set to an empty array [[]] instead of [[0]]. The condition parameter should have zero sensitivity since the derivative of a conditional expression with respect to its boolean condition is typically zero in automatic differentiation.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 253}, {"description": "In the bboxFromPoints function, the reduce operations for minCorner and maxCorner don't provide initial values. If the points array is empty, this will throw a TypeError. The reduce function should have initial values like [Infinity, Infinity] for minCorner and [-Infinity, -Infinity] for maxCorner, or there should be a check to ensure points is not empty.", "file": "./packages/core/src/engine/BBox.ts", "line": 160}, {"description": "In the int function, the range check for 32-bit signed integers is incorrect. The condition checks if n is between -0x80000001 and 0x80000000, but the valid range for 32-bit signed integers should be -0x80000000 to 0x7FFFFFFF. The current check excludes the minimum valid value (-2147483648) and includes an invalid maximum value (2147483648).", "file": "./packages/core/src/utils/Wasm.ts", "line": 94}, {"description": "In the minLoc and maxLoc functions, they throw a generic TypeError when the locs array is empty, but they should provide a more descriptive error message. The functions should throw an error with a meaningful message like 'Cannot find min/max location from empty array' instead of just 'new TypeError()'.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 110}, {"description": "In the convexPolygonMinkowskiSDFOneSided function, there's a potential division by zero error on line 92. The function divides by p1.length without checking if p1 is empty. If p1 is an empty array, this will result in division by zero, which could cause NaN values to propagate through the computation.", "file": "./packages/core/src/contrib/Minkowski.ts", "line": 92}, {"description": "The renderCanvas method returns JSX elements but is declared as async Promise void. The return statements on lines 137 and 170 will cause TypeScript compilation errors since the method should perform DOM manipulation side effects rather than return JSX.", "file": "./packages/components/src/Simple.tsx", "line": 137}, {"description": "In the setState callback on line 85, the code returns `{ ...prev, optStatuses }` but the state interface expects `optimized` not `optStatuses`. This will cause the state update to fail silently and the optimized array will not be updated properly.", "file": "./packages/components/src/Grid.tsx", "line": 85}, {"description": "CSS properties in the H2 styled component are missing hyphens. Lines 93-96 have 'borderbottom', 'marginbottom', and 'fontfamily' which should be 'border-bottom', 'margin-bottom', and 'font-family'. This will cause these styles to be ignored.", "file": "./packages/components/src/Gridbox.tsx", "line": 93}, {"description": "In the onDeselect callback on lines 151-157, the code directly mutates the Set by calling prevRes.delete(i) and then returns the same Set reference. React won't detect this change because the reference hasn't changed. This should create a new Set instead of mutating the existing one.", "file": "./packages/components/src/MultipleChoiceProblem.tsx", "line": 152}, {"description": "In the map function on lines 85-92, the Stage components are missing the 'key' prop which is required for React list rendering. This will cause React to show warnings and potentially have rendering issues when the stages array changes.", "file": "./packages/components/src/StagedDiagram.tsx", "line": 87}, {"description": "On line 103, the code accesses VimMode.Vim.SET_WRITE which appears to be a custom property being set as a hack to prevent multiple definitions. However, this property is being set on the VimMode.Vim object which may not be intended to be mutated and could cause issues if the VimMode library is updated or if multiple instances exist.", "file": "./packages/components/src/editing/EditorPane.tsx", "line": 103}, {"description": "On line 17, there's an import statement `import { Simple } from \"../Simple\"` that's missing the `.js` file extension. This is inconsistent with the ES module setup and other imports in the codebase, and could cause module resolution issues.", "file": "./packages/components/src/editing/TimelineTable.tsx", "line": 17}, {"description": "The code uses the deprecated ReactDOM.render method on line 6. This method was deprecated in React 18 and should be replaced with ReactDOM.createRoot for better performance and to avoid deprecation warnings.", "file": "./packages/components/src/main.tsx", "line": 6}, {"description": "On line 15, there's a typo in the property name 'substancce' which should be 'substance'. This will cause the error example to not work properly as the property name is incorrect.", "file": "./packages/components/src/stories/PenrosePrograms.tsx", "line": 15}, {"description": "On line 38, the code calls compileDomain(domain).unsafelyUnwrap() without error handling. If compileDomain returns an error result, unsafelyUnwrap() will throw an exception and crash the component. This should be wrapped in proper error handling or use a safer unwrapping method.", "file": "./packages/components/src/Listing.tsx", "line": 38}, {"description": "In the sqrt derivative calculation, the code uses 'z' (the result of sqrt(x)) instead of 'v' (the input parameter x). The derivative of sqrt(x) should be 1/(2*sqrt(x)), but the code calculates 1/(2*sqrt(sqrt(x))). This should be 'max(EPS_DENOM, sqrt(v))' or just 'max(EPS_DENOM, z)' where z is sqrt(v), but since z is the whole Unary expression, it should use sqrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 106}, {"description": "In the inverse derivative calculation, the code uses 'z' (the whole Unary expression) instead of 'v' (the input parameter). The derivative of 1/x should be -1/x^2, but the code calculates -(1/x)^2 instead of -1/x^2. This should be 'neg(inverse(squared(v)))'.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 109}, {"description": "In the cbrt (cube root) derivative calculation, the code uses 'squared(z)' instead of the correct formula. The derivative of x^(1/3) should be (1/3) * x^(-2/3) = 1/(3 * x^(2/3)) = 1/(3 * (x^(1/3))^2) = 1/(3 * cbrt(x)^2). The code should be 'div(1/3, squared(z))' where z is cbrt(v), but since z is the whole expression, it should use the cube root of v. However, this might actually be correct if z represents cbrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 133}, {"description": "In the tan derivative calculation, the code calculates 'squared(inverse(cos(v)))' which is (1/cos(v))^2 = sec^2(v). However, the derivative of tan(x) should be sec^2(x) = 1/cos^2(x), which should be 'inverse(squared(cos(v)))' not 'squared(inverse(cos(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 173}, {"description": "In the tanh derivative calculation, the code calculates 'squared(inverse(cosh(v)))' which is (1/cosh(v))^2 = sech^2(v). However, the derivative of tanh(x) should be sech^2(x) = 1/cosh^2(x), which should be 'inverse(squared(cosh(v)))' not 'squared(inverse(cosh(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 176}, {"description": "In the atan2 derivative calculation, the sensitivities are swapped. For atan2(y, x), the partial derivative with respect to y (first parameter) should be x/(x^2 + y^2), and with respect to x (second parameter) should be -y/(x^2 + y^2). However, the code has them reversed: left (y) gets x/denom and right (x) gets -y/denom.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 208}, {"description": "In the Ternary case sensitivity calculation, the condition sensitivity is set to an empty array [[]] instead of [[0]]. The condition parameter should have zero sensitivity since the derivative of a conditional expression with respect to its boolean condition is typically zero in automatic differentiation.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 253}, {"description": "In the bboxFromPoints function, the reduce operations for minCorner and maxCorner don't provide initial values. If the points array is empty, this will throw a TypeError. The reduce function should have initial values like [Infinity, Infinity] for minCorner and [-Infinity, -Infinity] for maxCorner, or there should be a check to ensure points is not empty.", "file": "./packages/core/src/engine/BBox.ts", "line": 160}, {"description": "In the int function, the range check for 32-bit signed integers is incorrect. The condition checks if n is between -0x80000001 and 0x80000000, but the valid range for 32-bit signed integers should be -0x80000000 to 0x7FFFFFFF. The current check excludes the minimum valid value (-2147483648) and includes an invalid maximum value (2147483648).", "file": "./packages/core/src/utils/Wasm.ts", "line": 94}, {"description": "In the minLoc and maxLoc functions, they throw a generic TypeError when the locs array is empty, but they should provide a more descriptive error message. The functions should throw an error with a meaningful message like 'Cannot find min/max location from empty array' instead of just 'new TypeError()'.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 110}, {"description": "In the convexPolygonMinkowskiSDFOneSided function, there's a potential division by zero error on line 92. The function divides by p1.length without checking if p1 is empty. If p1 is an empty array, this will result in division by zero, which could cause NaN values to propagate through the computation.", "file": "./packages/core/src/contrib/Minkowski.ts", "line": 92}, {"description": "The renderCanvas method returns JSX elements but is declared as async Promise void. The return statements on lines 137 and 170 will cause TypeScript compilation errors since the method should perform DOM manipulation side effects rather than return JSX.", "file": "./packages/components/src/Simple.tsx", "line": 137}, {"description": "In the setState callback on line 85, the code returns `{ ...prev, optStatuses }` but the state interface expects `optimized` not `optStatuses`. This will cause the state update to fail silently and the optimized array will not be updated properly.", "file": "./packages/components/src/Grid.tsx", "line": 85}, {"description": "CSS properties in the H2 styled component are missing hyphens. Lines 93-96 have 'borderbottom', 'marginbottom', and 'fontfamily' which should be 'border-bottom', 'margin-bottom', and 'font-family'. This will cause these styles to be ignored.", "file": "./packages/components/src/Gridbox.tsx", "line": 93}, {"description": "In the onDeselect callback on lines 151-157, the code directly mutates the Set by calling prevRes.delete(i) and then returns the same Set reference. React won't detect this change because the reference hasn't changed. This should create a new Set instead of mutating the existing one.", "file": "./packages/components/src/MultipleChoiceProblem.tsx", "line": 152}, {"description": "In the map function on lines 85-92, the Stage components are missing the 'key' prop which is required for React list rendering. This will cause React to show warnings and potentially have rendering issues when the stages array changes.", "file": "./packages/components/src/StagedDiagram.tsx", "line": 87}, {"description": "On line 103, the code accesses VimMode.Vim.SET_WRITE which appears to be a custom property being set as a hack to prevent multiple definitions. However, this property is being set on the VimMode.Vim object which may not be intended to be mutated and could cause issues if the VimMode library is updated or if multiple instances exist.", "file": "./packages/components/src/editing/EditorPane.tsx", "line": 103}, {"description": "On line 17, there's an import statement `import { Simple } from \"../Simple\"` that's missing the `.js` file extension. This is inconsistent with the ES module setup and other imports in the codebase, and could cause module resolution issues.", "file": "./packages/components/src/editing/TimelineTable.tsx", "line": 17}, {"description": "The code uses the deprecated ReactDOM.render method on line 6. This method was deprecated in React 18 and should be replaced with ReactDOM.createRoot for better performance and to avoid deprecation warnings.", "file": "./packages/components/src/main.tsx", "line": 6}, {"description": "On line 15, there's a typo in the property name 'substancce' which should be 'substance'. This will cause the error example to not work properly as the property name is incorrect.", "file": "./packages/components/src/stories/PenrosePrograms.tsx", "line": 15}, {"description": "On line 38, the code calls compileDomain(domain).unsafelyUnwrap() without error handling. If compileDomain returns an error result, unsafelyUnwrap() will throw an exception and crash the component. This should be wrapped in proper error handling or use a safer unwrapping method.", "file": "./packages/components/src/Listing.tsx", "line": 38}, {"description": "ErrorBoundary component is missing state management and getDerivedStateFromError method. The component should have a state to track error status and implement getDerivedStateFromError to properly handle errors in React. Currently, it only logs errors but doesn't prevent the component tree from crashing.", "file": "./packages/editor/src/main.tsx", "line": 9}, {"description": "Import statement uses .js extension for a TypeScript file. The import './App.js' should be './App' or './App.tsx' since this is a TypeScript project and the actual file is App.tsx.", "file": "./packages/editor/src/main.tsx", "line": 6}, {"description": "Multiple import statements use .js extensions for TypeScript files. All imports from lines 18-29 and 40 should use relative paths without extensions or .tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/App.tsx", "line": 18}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/App.tsx", "line": 304}, {"description": "Missing dependency in useCallback hook. The connectRoger callback uses rogerState, setRogerState, updatedFile, updateTrio, and updateExcludeWarnings but has an empty dependency array. This could lead to stale closures and incorrect behavior.", "file": "./packages/editor/src/App.tsx", "line": 318}, {"description": "Missing dependency in useEffect hook. The useEffect on line 319 calls connectRoger but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 323}, {"description": "Missing dependency in useEffect hook. The useEffect on line 341 calls checkURL but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 346}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 22, and 23 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/atoms.ts", "line": 8}, {"description": "Potential null pointer exception in gridSizeEffect. The oldValue parameter could be a DefaultValue on first run, but the code casts it directly to DiagramGrid without checking. This could cause a runtime error when accessing properties like gridSize and variations.", "file": "./packages/editor/src/state/atoms.ts", "line": 327}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 33, and 34 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/callbacks.ts", "line": 8}, {"description": "Missing error handling for JSON.parse in gist loading. If the gist contains malformed JSON in metadata.json, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Potential null pointer exception when accessing gist files. The code assumes gistFiles['metadata.json'], gistFiles['domain'], gistFiles['style'], and gistFiles['substance'] exist without checking. If any of these files are missing from the gist, it will cause a runtime error.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Import statements use .js extensions for TypeScript files. Lines 7 and 8 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 7}, {"description": "Missing error handling for DOMParser.parseFromString. If the SVG file contains malformed XML, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 31}, {"description": "Import statements use .js extensions for TypeScript files. Lines 11 and 12 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ProgramEditor.tsx", "line": 11}, {"description": "Import statements use .js extensions for TypeScript files. Lines 26 and 27 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 26}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 96}, {"description": "Missing await for httpResource.text() call. The text() method returns a Promise but is not awaited, which means httpBody will be a Promise object instead of the actual text content. This will cause incorrect data to be stored in localStorage.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 58}, {"description": "Import statements use .js extensions for TypeScript files. Lines 3, 4, and 5 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/Settings.tsx", "line": 3}, {"description": "Missing dependency in useCallback hook. The signOut callback uses setSettings but has an empty dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/components/Settings.tsx", "line": 12}, {"description": "Import statements use .js extensions for TypeScript files. Lines 4, 5, and 6 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 4}, {"description": "Potential null pointer exception when accessing SVG elements. The code uses non-null assertion (!) on line 32 for svgNode without checking if querySelector returns null. If the SVG doesn't contain a valid svg element, this will cause a runtime error.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 32}, {"description": "Missing error handling for DOMParser.parseFromString. If the example.preview contains malformed XML/SVG, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 30}, {"description": "In the sqrt derivative calculation, the code uses 'z' (the result of sqrt(x)) instead of 'v' (the input parameter x). The derivative of sqrt(x) should be 1/(2*sqrt(x)), but the code calculates 1/(2*sqrt(sqrt(x))). This should be 'max(EPS_DENOM, sqrt(v))' or just 'max(EPS_DENOM, z)' where z is sqrt(v), but since z is the whole Unary expression, it should use sqrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 106}, {"description": "In the inverse derivative calculation, the code uses 'z' (the whole Unary expression) instead of 'v' (the input parameter). The derivative of 1/x should be -1/x^2, but the code calculates -(1/x)^2 instead of -1/x^2. This should be 'neg(inverse(squared(v)))'.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 109}, {"description": "In the cbrt (cube root) derivative calculation, the code uses 'squared(z)' instead of the correct formula. The derivative of x^(1/3) should be (1/3) * x^(-2/3) = 1/(3 * x^(2/3)) = 1/(3 * (x^(1/3))^2) = 1/(3 * cbrt(x)^2). The code should be 'div(1/3, squared(z))' where z is cbrt(v), but since z is the whole expression, it should use the cube root of v. However, this might actually be correct if z represents cbrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 133}, {"description": "In the tan derivative calculation, the code calculates 'squared(inverse(cos(v)))' which is (1/cos(v))^2 = sec^2(v). However, the derivative of tan(x) should be sec^2(x) = 1/cos^2(x), which should be 'inverse(squared(cos(v)))' not 'squared(inverse(cos(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 173}, {"description": "In the tanh derivative calculation, the code calculates 'squared(inverse(cosh(v)))' which is (1/cosh(v))^2 = sech^2(v). However, the derivative of tanh(x) should be sech^2(x) = 1/cosh^2(x), which should be 'inverse(squared(cosh(v)))' not 'squared(inverse(cosh(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 176}, {"description": "In the atan2 derivative calculation, the sensitivities are swapped. For atan2(y, x), the partial derivative with respect to y (first parameter) should be x/(x^2 + y^2), and with respect to x (second parameter) should be -y/(x^2 + y^2). However, the code has them reversed: left (y) gets x/denom and right (x) gets -y/denom.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 208}, {"description": "In the Ternary case sensitivity calculation, the condition sensitivity is set to an empty array [[]] instead of [[0]]. The condition parameter should have zero sensitivity since the derivative of a conditional expression with respect to its boolean condition is typically zero in automatic differentiation.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 253}, {"description": "In the bboxFromPoints function, the reduce operations for minCorner and maxCorner don't provide initial values. If the points array is empty, this will throw a TypeError. The reduce function should have initial values like [Infinity, Infinity] for minCorner and [-Infinity, -Infinity] for maxCorner, or there should be a check to ensure points is not empty.", "file": "./packages/core/src/engine/BBox.ts", "line": 160}, {"description": "In the int function, the range check for 32-bit signed integers is incorrect. The condition checks if n is between -0x80000001 and 0x80000000, but the valid range for 32-bit signed integers should be -0x80000000 to 0x7FFFFFFF. The current check excludes the minimum valid value (-2147483648) and includes an invalid maximum value (2147483648).", "file": "./packages/core/src/utils/Wasm.ts", "line": 94}, {"description": "In the minLoc and maxLoc functions, they throw a generic TypeError when the locs array is empty, but they should provide a more descriptive error message. The functions should throw an error with a meaningful message like 'Cannot find min/max location from empty array' instead of just 'new TypeError()'.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 110}, {"description": "In the convexPolygonMinkowskiSDFOneSided function, there's a potential division by zero error on line 92. The function divides by p1.length without checking if p1 is empty. If p1 is an empty array, this will result in division by zero, which could cause NaN values to propagate through the computation.", "file": "./packages/core/src/contrib/Minkowski.ts", "line": 92}, {"description": "The renderCanvas method returns JSX elements but is declared as async Promise void. The return statements on lines 137 and 170 will cause TypeScript compilation errors since the method should perform DOM manipulation side effects rather than return JSX.", "file": "./packages/components/src/Simple.tsx", "line": 137}, {"description": "In the setState callback on line 85, the code returns `{ ...prev, optStatuses }` but the state interface expects `optimized` not `optStatuses`. This will cause the state update to fail silently and the optimized array will not be updated properly.", "file": "./packages/components/src/Grid.tsx", "line": 85}, {"description": "CSS properties in the H2 styled component are missing hyphens. Lines 93-96 have 'borderbottom', 'marginbottom', and 'fontfamily' which should be 'border-bottom', 'margin-bottom', and 'font-family'. This will cause these styles to be ignored.", "file": "./packages/components/src/Gridbox.tsx", "line": 93}, {"description": "In the onDeselect callback on lines 151-157, the code directly mutates the Set by calling prevRes.delete(i) and then returns the same Set reference. React won't detect this change because the reference hasn't changed. This should create a new Set instead of mutating the existing one.", "file": "./packages/components/src/MultipleChoiceProblem.tsx", "line": 152}, {"description": "In the map function on lines 85-92, the Stage components are missing the 'key' prop which is required for React list rendering. This will cause React to show warnings and potentially have rendering issues when the stages array changes.", "file": "./packages/components/src/StagedDiagram.tsx", "line": 87}, {"description": "On line 103, the code accesses VimMode.Vim.SET_WRITE which appears to be a custom property being set as a hack to prevent multiple definitions. However, this property is being set on the VimMode.Vim object which may not be intended to be mutated and could cause issues if the VimMode library is updated or if multiple instances exist.", "file": "./packages/components/src/editing/EditorPane.tsx", "line": 103}, {"description": "On line 17, there's an import statement `import { Simple } from \"../Simple\"` that's missing the `.js` file extension. This is inconsistent with the ES module setup and other imports in the codebase, and could cause module resolution issues.", "file": "./packages/components/src/editing/TimelineTable.tsx", "line": 17}, {"description": "The code uses the deprecated ReactDOM.render method on line 6. This method was deprecated in React 18 and should be replaced with ReactDOM.createRoot for better performance and to avoid deprecation warnings.", "file": "./packages/components/src/main.tsx", "line": 6}, {"description": "On line 15, there's a typo in the property name 'substancce' which should be 'substance'. This will cause the error example to not work properly as the property name is incorrect.", "file": "./packages/components/src/stories/PenrosePrograms.tsx", "line": 15}, {"description": "On line 38, the code calls compileDomain(domain).unsafelyUnwrap() without error handling. If compileDomain returns an error result, unsafelyUnwrap() will throw an exception and crash the component. This should be wrapped in proper error handling or use a safer unwrapping method.", "file": "./packages/components/src/Listing.tsx", "line": 38}, {"description": "ErrorBoundary component is missing state management and getDerivedStateFromError method. The component should have a state to track error status and implement getDerivedStateFromError to properly handle errors in React. Currently, it only logs errors but doesn't prevent the component tree from crashing.", "file": "./packages/editor/src/main.tsx", "line": 9}, {"description": "Import statement uses .js extension for a TypeScript file. The import './App.js' should be './App' or './App.tsx' since this is a TypeScript project and the actual file is App.tsx.", "file": "./packages/editor/src/main.tsx", "line": 6}, {"description": "Multiple import statements use .js extensions for TypeScript files. All imports from lines 18-29 and 40 should use relative paths without extensions or .tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/App.tsx", "line": 18}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/App.tsx", "line": 304}, {"description": "Missing dependency in useCallback hook. The connectRoger callback uses rogerState, setRogerState, updatedFile, updateTrio, and updateExcludeWarnings but has an empty dependency array. This could lead to stale closures and incorrect behavior.", "file": "./packages/editor/src/App.tsx", "line": 318}, {"description": "Missing dependency in useEffect hook. The useEffect on line 319 calls connectRoger but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 323}, {"description": "Missing dependency in useEffect hook. The useEffect on line 341 calls checkURL but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 346}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 22, and 23 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/atoms.ts", "line": 8}, {"description": "Potential null pointer exception in gridSizeEffect. The oldValue parameter could be a DefaultValue on first run, but the code casts it directly to DiagramGrid without checking. This could cause a runtime error when accessing properties like gridSize and variations.", "file": "./packages/editor/src/state/atoms.ts", "line": 327}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 33, and 34 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/callbacks.ts", "line": 8}, {"description": "Missing error handling for JSON.parse in gist loading. If the gist contains malformed JSON in metadata.json, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Potential null pointer exception when accessing gist files. The code assumes gistFiles['metadata.json'], gistFiles['domain'], gistFiles['style'], and gistFiles['substance'] exist without checking. If any of these files are missing from the gist, it will cause a runtime error.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Import statements use .js extensions for TypeScript files. Lines 7 and 8 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 7}, {"description": "Missing error handling for DOMParser.parseFromString. If the SVG file contains malformed XML, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 31}, {"description": "Import statements use .js extensions for TypeScript files. Lines 11 and 12 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ProgramEditor.tsx", "line": 11}, {"description": "Import statements use .js extensions for TypeScript files. Lines 26 and 27 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 26}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 96}, {"description": "Missing await for httpResource.text() call. The text() method returns a Promise but is not awaited, which means httpBody will be a Promise object instead of the actual text content. This will cause incorrect data to be stored in localStorage.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 58}, {"description": "Import statements use .js extensions for TypeScript files. Lines 3, 4, and 5 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/Settings.tsx", "line": 3}, {"description": "Missing dependency in useCallback hook. The signOut callback uses setSettings but has an empty dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/components/Settings.tsx", "line": 12}, {"description": "Import statements use .js extensions for TypeScript files. Lines 4, 5, and 6 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 4}, {"description": "Potential null pointer exception when accessing SVG elements. The code uses non-null assertion (!) on line 32 for svgNode without checking if querySelector returns null. If the SVG doesn't contain a valid svg element, this will cause a runtime error.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 32}, {"description": "Missing error handling for DOMParser.parseFromString. If the example.preview contains malformed XML/SVG, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 30}, {"description": "The `join` function has a potential bug when `parts.pop()` is called on an empty array or when there are more '..' components than directory levels. If `dir` is an empty string or if there are more '..' path components than available directory parts, `parts.pop()` will return undefined but the function will continue processing. This could lead to incorrect path resolution. The function should validate that there are parts to pop before calling `parts.pop()`, or handle the case where the path tries to go above the root directory.", "file": "packages/examples/src/index.ts", "line": 7}, {"description": "Cross-platform path separator issue in codegen.js. The code splits the directory path using `path.sep` (which is '\\' on Windows and '/' on Unix-like systems) but then joins the result using hardcoded '/' separator. This creates inconsistent path handling and could lead to incorrect import paths on Windows systems. The code should use consistent path separators or normalize paths for the target environment.", "file": "packages/examples/codegen.js", "line": 56}, {"description": "Missing error handling for JSON.parse() in codegen.js. If a .trio.json file contains invalid JSON, the JSON.parse() call on line 20 will throw an exception and crash the code generation process. This could happen due to malformed JSON files, encoding issues, or incomplete file writes. The code should wrap JSON.parse() in a try-catch block and provide meaningful error messages indicating which file failed to parse.", "file": "packages/examples/codegen.js", "line": 20}, {"description": "Missing error handling for JSON.parse() when reading registry.json in codegen.js. If the registry.json file contains invalid JSON, the JSON.parse() call on line 80 will throw an exception and crash the code generation process. Additionally, there's no error handling if the registry.json file doesn't exist or can't be read. The code should wrap both the file read and JSON.parse() operations in try-catch blocks with meaningful error messages.", "file": "packages/examples/codegen.js", "line": 80}, {"description": "Missing validation of trio object structure in codegen.js. The code assumes that the parsed trio object has the required properties (substance, style, domain, variation) without validation. If any of these properties are missing or have unexpected types, the code will fail. For example, if `trio.style` is not an array, the `.map()` calls on lines 25 and 33 will throw TypeError. The code should validate the trio object structure before attempting to use its properties.", "file": "packages/examples/codegen.js", "line": 25}, {"description": "Potential array access error in registry.test.ts. The code accesses `style[0]` on line 72 without checking if the `style` array has any elements. If a trio has an empty style array, this will result in accessing undefined and cause a runtime error when trying to destructure the `resolver` property. The code should validate that the style array is not empty before accessing its first element.", "file": "packages/examples/src/registry.test.ts", "line": 72}, {"description": "Missing dependency 'rimraf' in package.json. The build script on line 17 uses 'rimraf dist' but 'rimraf' is not listed in the dependencies or devDependencies. This will cause the build script to fail if rimraf is not globally installed. The package should include rimraf as a devDependency or use an alternative like 'rm -rf' on Unix systems or Node.js built-in fs.rmSync().", "file": "packages/examples/package.json", "line": 17}, {"description": "Unsafe type assertion and potential null reference error in eigenspace.ts. The code on line 13 uses unsafe type assertion `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without checking if `elem.firstChild?.firstChild` is actually an SVGSVGElement or even exists. If the render function doesn't produce the expected DOM structure, this will either return undefined.outerHTML (causing a TypeError) or cast a non-SVG element to SVGSVGElement. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/eigenspace.ts", "line": 13}, {"description": "Unsafe type assertion and potential null reference error in vectors.ts. The code on line 13 uses the same unsafe pattern as eigenspace.ts: `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without validating that the element exists or is actually an SVGSVGElement. If the render function doesn't produce the expected DOM structure, this will cause a TypeError when trying to access outerHTML on undefined, or incorrectly cast a non-SVG element. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/vectors.ts", "line": 13}, {"description": "Missing error handling for file system operations in codegen.js. The code uses synchronous file system operations (fs.readdirSync, fs.statSync, fs.readFileSync, fs.writeFileSync) without error handling. If any of these operations fail due to permission issues, missing files, disk space problems, or other I/O errors, the script will crash with an unhandled exception. The code should wrap these operations in try-catch blocks to provide meaningful error messages and graceful failure handling.", "file": "packages/examples/codegen.js", "line": 11}, {"description": "Potential code injection vulnerability in codegen.js. The code on lines 95 and 101 uses JSON.stringify() to embed registry keys directly into generated import statements without validation. If a registry key contains malicious content or special characters that could break out of the string context, it could lead to code injection in the generated TypeScript files. While JSON.stringify() provides some protection, the code should validate that registry keys contain only safe characters for file paths and imports.", "file": "packages/examples/codegen.js", "line": 95}, {"description": "Missing validation of registry entry structure in codegen.js. The code assumes that registry entries (variable 'v') are objects without validation. If a registry entry is null, undefined, or a primitive value, accessing properties like 'v.trio' on line 91 or using the 'in' operator on lines 97 and 105 could cause runtime errors. The code should validate that each registry entry is a valid object before processing its properties.", "file": "packages/examples/codegen.js", "line": 91}, {"description": "In the sqrt derivative calculation, the code uses 'z' (the result of sqrt(x)) instead of 'v' (the input parameter x). The derivative of sqrt(x) should be 1/(2*sqrt(x)), but the code calculates 1/(2*sqrt(sqrt(x))). This should be 'max(EPS_DENOM, sqrt(v))' or just 'max(EPS_DENOM, z)' where z is sqrt(v), but since z is the whole Unary expression, it should use sqrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 106}, {"description": "In the inverse derivative calculation, the code uses 'z' (the whole Unary expression) instead of 'v' (the input parameter). The derivative of 1/x should be -1/x^2, but the code calculates -(1/x)^2 instead of -1/x^2. This should be 'neg(inverse(squared(v)))'.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 109}, {"description": "In the cbrt (cube root) derivative calculation, the code uses 'squared(z)' instead of the correct formula. The derivative of x^(1/3) should be (1/3) * x^(-2/3) = 1/(3 * x^(2/3)) = 1/(3 * (x^(1/3))^2) = 1/(3 * cbrt(x)^2). The code should be 'div(1/3, squared(z))' where z is cbrt(v), but since z is the whole expression, it should use the cube root of v. However, this might actually be correct if z represents cbrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 133}, {"description": "In the tan derivative calculation, the code calculates 'squared(inverse(cos(v)))' which is (1/cos(v))^2 = sec^2(v). However, the derivative of tan(x) should be sec^2(x) = 1/cos^2(x), which should be 'inverse(squared(cos(v)))' not 'squared(inverse(cos(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 173}, {"description": "In the tanh derivative calculation, the code calculates 'squared(inverse(cosh(v)))' which is (1/cosh(v))^2 = sech^2(v). However, the derivative of tanh(x) should be sech^2(x) = 1/cosh^2(x), which should be 'inverse(squared(cosh(v)))' not 'squared(inverse(cosh(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 176}, {"description": "In the atan2 derivative calculation, the sensitivities are swapped. For atan2(y, x), the partial derivative with respect to y (first parameter) should be x/(x^2 + y^2), and with respect to x (second parameter) should be -y/(x^2 + y^2). However, the code has them reversed: left (y) gets x/denom and right (x) gets -y/denom.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 208}, {"description": "In the Ternary case sensitivity calculation, the condition sensitivity is set to an empty array [[]] instead of [[0]]. The condition parameter should have zero sensitivity since the derivative of a conditional expression with respect to its boolean condition is typically zero in automatic differentiation.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 253}, {"description": "In the bboxFromPoints function, the reduce operations for minCorner and maxCorner don't provide initial values. If the points array is empty, this will throw a TypeError. The reduce function should have initial values like [Infinity, Infinity] for minCorner and [-Infinity, -Infinity] for maxCorner, or there should be a check to ensure points is not empty.", "file": "./packages/core/src/engine/BBox.ts", "line": 160}, {"description": "In the int function, the range check for 32-bit signed integers is incorrect. The condition checks if n is between -0x80000001 and 0x80000000, but the valid range for 32-bit signed integers should be -0x80000000 to 0x7FFFFFFF. The current check excludes the minimum valid value (-2147483648) and includes an invalid maximum value (2147483648).", "file": "./packages/core/src/utils/Wasm.ts", "line": 94}, {"description": "In the minLoc and maxLoc functions, they throw a generic TypeError when the locs array is empty, but they should provide a more descriptive error message. The functions should throw an error with a meaningful message like 'Cannot find min/max location from empty array' instead of just 'new TypeError()'.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 110}, {"description": "In the convexPolygonMinkowskiSDFOneSided function, there's a potential division by zero error on line 92. The function divides by p1.length without checking if p1 is empty. If p1 is an empty array, this will result in division by zero, which could cause NaN values to propagate through the computation.", "file": "./packages/core/src/contrib/Minkowski.ts", "line": 92}, {"description": "The renderCanvas method returns JSX elements but is declared as async Promise void. The return statements on lines 137 and 170 will cause TypeScript compilation errors since the method should perform DOM manipulation side effects rather than return JSX.", "file": "./packages/components/src/Simple.tsx", "line": 137}, {"description": "In the setState callback on line 85, the code returns `{ ...prev, optStatuses }` but the state interface expects `optimized` not `optStatuses`. This will cause the state update to fail silently and the optimized array will not be updated properly.", "file": "./packages/components/src/Grid.tsx", "line": 85}, {"description": "CSS properties in the H2 styled component are missing hyphens. Lines 93-96 have 'borderbottom', 'marginbottom', and 'fontfamily' which should be 'border-bottom', 'margin-bottom', and 'font-family'. This will cause these styles to be ignored.", "file": "./packages/components/src/Gridbox.tsx", "line": 93}, {"description": "In the onDeselect callback on lines 151-157, the code directly mutates the Set by calling prevRes.delete(i) and then returns the same Set reference. React won't detect this change because the reference hasn't changed. This should create a new Set instead of mutating the existing one.", "file": "./packages/components/src/MultipleChoiceProblem.tsx", "line": 152}, {"description": "In the map function on lines 85-92, the Stage components are missing the 'key' prop which is required for React list rendering. This will cause React to show warnings and potentially have rendering issues when the stages array changes.", "file": "./packages/components/src/StagedDiagram.tsx", "line": 87}, {"description": "On line 103, the code accesses VimMode.Vim.SET_WRITE which appears to be a custom property being set as a hack to prevent multiple definitions. However, this property is being set on the VimMode.Vim object which may not be intended to be mutated and could cause issues if the VimMode library is updated or if multiple instances exist.", "file": "./packages/components/src/editing/EditorPane.tsx", "line": 103}, {"description": "On line 17, there's an import statement `import { Simple } from \"../Simple\"` that's missing the `.js` file extension. This is inconsistent with the ES module setup and other imports in the codebase, and could cause module resolution issues.", "file": "./packages/components/src/editing/TimelineTable.tsx", "line": 17}, {"description": "The code uses the deprecated ReactDOM.render method on line 6. This method was deprecated in React 18 and should be replaced with ReactDOM.createRoot for better performance and to avoid deprecation warnings.", "file": "./packages/components/src/main.tsx", "line": 6}, {"description": "On line 15, there's a typo in the property name 'substancce' which should be 'substance'. This will cause the error example to not work properly as the property name is incorrect.", "file": "./packages/components/src/stories/PenrosePrograms.tsx", "line": 15}, {"description": "On line 38, the code calls compileDomain(domain).unsafelyUnwrap() without error handling. If compileDomain returns an error result, unsafelyUnwrap() will throw an exception and crash the component. This should be wrapped in proper error handling or use a safer unwrapping method.", "file": "./packages/components/src/Listing.tsx", "line": 38}, {"description": "ErrorBoundary component is missing state management and getDerivedStateFromError method. The component should have a state to track error status and implement getDerivedStateFromError to properly handle errors in React. Currently, it only logs errors but doesn't prevent the component tree from crashing.", "file": "./packages/editor/src/main.tsx", "line": 9}, {"description": "Import statement uses .js extension for a TypeScript file. The import './App.js' should be './App' or './App.tsx' since this is a TypeScript project and the actual file is App.tsx.", "file": "./packages/editor/src/main.tsx", "line": 6}, {"description": "Multiple import statements use .js extensions for TypeScript files. All imports from lines 18-29 and 40 should use relative paths without extensions or .tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/App.tsx", "line": 18}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/App.tsx", "line": 304}, {"description": "Missing dependency in useCallback hook. The connectRoger callback uses rogerState, setRogerState, updatedFile, updateTrio, and updateExcludeWarnings but has an empty dependency array. This could lead to stale closures and incorrect behavior.", "file": "./packages/editor/src/App.tsx", "line": 318}, {"description": "Missing dependency in useEffect hook. The useEffect on line 319 calls connectRoger but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 323}, {"description": "Missing dependency in useEffect hook. The useEffect on line 341 calls checkURL but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 346}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 22, and 23 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/atoms.ts", "line": 8}, {"description": "Potential null pointer exception in gridSizeEffect. The oldValue parameter could be a DefaultValue on first run, but the code casts it directly to DiagramGrid without checking. This could cause a runtime error when accessing properties like gridSize and variations.", "file": "./packages/editor/src/state/atoms.ts", "line": 327}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 33, and 34 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/callbacks.ts", "line": 8}, {"description": "Missing error handling for JSON.parse in gist loading. If the gist contains malformed JSON in metadata.json, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Potential null pointer exception when accessing gist files. The code assumes gistFiles['metadata.json'], gistFiles['domain'], gistFiles['style'], and gistFiles['substance'] exist without checking. If any of these files are missing from the gist, it will cause a runtime error.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Import statements use .js extensions for TypeScript files. Lines 7 and 8 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 7}, {"description": "Missing error handling for DOMParser.parseFromString. If the SVG file contains malformed XML, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 31}, {"description": "Import statements use .js extensions for TypeScript files. Lines 11 and 12 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ProgramEditor.tsx", "line": 11}, {"description": "Import statements use .js extensions for TypeScript files. Lines 26 and 27 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 26}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 96}, {"description": "Missing await for httpResource.text() call. The text() method returns a Promise but is not awaited, which means httpBody will be a Promise object instead of the actual text content. This will cause incorrect data to be stored in localStorage.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 58}, {"description": "Import statements use .js extensions for TypeScript files. Lines 3, 4, and 5 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/Settings.tsx", "line": 3}, {"description": "Missing dependency in useCallback hook. The signOut callback uses setSettings but has an empty dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/components/Settings.tsx", "line": 12}, {"description": "Import statements use .js extensions for TypeScript files. Lines 4, 5, and 6 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 4}, {"description": "Potential null pointer exception when accessing SVG elements. The code uses non-null assertion (!) on line 32 for svgNode without checking if querySelector returns null. If the SVG doesn't contain a valid svg element, this will cause a runtime error.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 32}, {"description": "Missing error handling for DOMParser.parseFromString. If the example.preview contains malformed XML/SVG, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 30}, {"description": "The `join` function has a potential bug when `parts.pop()` is called on an empty array or when there are more '..' components than directory levels. If `dir` is an empty string or if there are more '..' path components than available directory parts, `parts.pop()` will return undefined but the function will continue processing. This could lead to incorrect path resolution. The function should validate that there are parts to pop before calling `parts.pop()`, or handle the case where the path tries to go above the root directory.", "file": "packages/examples/src/index.ts", "line": 7}, {"description": "Cross-platform path separator issue in codegen.js. The code splits the directory path using `path.sep` (which is '\\' on Windows and '/' on Unix-like systems) but then joins the result using hardcoded '/' separator. This creates inconsistent path handling and could lead to incorrect import paths on Windows systems. The code should use consistent path separators or normalize paths for the target environment.", "file": "packages/examples/codegen.js", "line": 56}, {"description": "Missing error handling for JSON.parse() in codegen.js. If a .trio.json file contains invalid JSON, the JSON.parse() call on line 20 will throw an exception and crash the code generation process. This could happen due to malformed JSON files, encoding issues, or incomplete file writes. The code should wrap JSON.parse() in a try-catch block and provide meaningful error messages indicating which file failed to parse.", "file": "packages/examples/codegen.js", "line": 20}, {"description": "Missing error handling for JSON.parse() when reading registry.json in codegen.js. If the registry.json file contains invalid JSON, the JSON.parse() call on line 80 will throw an exception and crash the code generation process. Additionally, there's no error handling if the registry.json file doesn't exist or can't be read. The code should wrap both the file read and JSON.parse() operations in try-catch blocks with meaningful error messages.", "file": "packages/examples/codegen.js", "line": 80}, {"description": "Missing validation of trio object structure in codegen.js. The code assumes that the parsed trio object has the required properties (substance, style, domain, variation) without validation. If any of these properties are missing or have unexpected types, the code will fail. For example, if `trio.style` is not an array, the `.map()` calls on lines 25 and 33 will throw TypeError. The code should validate the trio object structure before attempting to use its properties.", "file": "packages/examples/codegen.js", "line": 25}, {"description": "Potential array access error in registry.test.ts. The code accesses `style[0]` on line 72 without checking if the `style` array has any elements. If a trio has an empty style array, this will result in accessing undefined and cause a runtime error when trying to destructure the `resolver` property. The code should validate that the style array is not empty before accessing its first element.", "file": "packages/examples/src/registry.test.ts", "line": 72}, {"description": "Missing dependency 'rimraf' in package.json. The build script on line 17 uses 'rimraf dist' but 'rimraf' is not listed in the dependencies or devDependencies. This will cause the build script to fail if rimraf is not globally installed. The package should include rimraf as a devDependency or use an alternative like 'rm -rf' on Unix systems or Node.js built-in fs.rmSync().", "file": "packages/examples/package.json", "line": 17}, {"description": "Unsafe type assertion and potential null reference error in eigenspace.ts. The code on line 13 uses unsafe type assertion `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without checking if `elem.firstChild?.firstChild` is actually an SVGSVGElement or even exists. If the render function doesn't produce the expected DOM structure, this will either return undefined.outerHTML (causing a TypeError) or cast a non-SVG element to SVGSVGElement. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/eigenspace.ts", "line": 13}, {"description": "Unsafe type assertion and potential null reference error in vectors.ts. The code on line 13 uses the same unsafe pattern as eigenspace.ts: `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without validating that the element exists or is actually an SVGSVGElement. If the render function doesn't produce the expected DOM structure, this will cause a TypeError when trying to access outerHTML on undefined, or incorrectly cast a non-SVG element. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/vectors.ts", "line": 13}, {"description": "Missing error handling for file system operations in codegen.js. The code uses synchronous file system operations (fs.readdirSync, fs.statSync, fs.readFileSync, fs.writeFileSync) without error handling. If any of these operations fail due to permission issues, missing files, disk space problems, or other I/O errors, the script will crash with an unhandled exception. The code should wrap these operations in try-catch blocks to provide meaningful error messages and graceful failure handling.", "file": "packages/examples/codegen.js", "line": 11}, {"description": "Potential code injection vulnerability in codegen.js. The code on lines 95 and 101 uses JSON.stringify() to embed registry keys directly into generated import statements without validation. If a registry key contains malicious content or special characters that could break out of the string context, it could lead to code injection in the generated TypeScript files. While JSON.stringify() provides some protection, the code should validate that registry keys contain only safe characters for file paths and imports.", "file": "packages/examples/codegen.js", "line": 95}, {"description": "Missing validation of registry entry structure in codegen.js. The code assumes that registry entries (variable 'v') are objects without validation. If a registry entry is null, undefined, or a primitive value, accessing properties like 'v.trio' on line 91 or using the 'in' operator on lines 97 and 105 could cause runtime errors. The code should validate that each registry entry is a valid object before processing its properties.", "file": "packages/examples/codegen.js", "line": 91}, {"description": "Non-null assertion on potentially undefined value. The generateProgs function can return undefined when envOrError.isOk() is false (line 25), but line 57 uses a non-null assertion (!) assuming it will always return a value. This could cause a runtime error if the domain compilation fails.", "file": "./packages/edgeworth/src/problems/util.tsx", "line": 57}, {"description": "Unsafe non-null assertion on array.pop(). The code uses ids.pop()! with a non-null assertion, but there's no guarantee that the ids array is non-empty when pop() is called. The while loop condition checks ids.length > 0, but the array could become empty during the loop iteration before pop() is called, potentially causing a runtime error.", "file": "./packages/edgeworth/src/analysis/SubstanceAnalysis.ts", "line": 332}, {"description": "Non-null assertion on potentially undefined value. The code uses type!.name.value with a non-null assertion, but the comment on line 158 indicates 'TODO: enforce the existence of var types', suggesting that type could be undefined. If env.vars.get(id.value) returns undefined, this will cause a runtime error.", "file": "./packages/edgeworth/src/synthesis/Synthesizer.ts", "line": 159}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![0] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the preset domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 307}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no preset entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 329}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 335}, {"description": "Non-null assertion on potentially undefined state property. The code uses this.state.setting!.opWeights but setting is declared as 'SynthesizerSetting | undefined' on line 94. This will cause a runtime error if setting is undefined when this code executes.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 647}, {"description": "Typo in application name. The 'short_name' field contains 'Edgewroth' instead of 'Edgeworth', which is inconsistent with the 'name' field and the actual application name.", "file": "./packages/edgeworth/public/manifest.json", "line": 2}, {"description": "Using deprecated ReactDOM.render API. The code uses ReactDOM.render which is deprecated in React 18. This should be replaced with ReactDOM.createRoot for React 18 compatibility and to avoid deprecation warnings.", "file": "./packages/edgeworth/src/main.tsx", "line": 6}, {"description": "In the sqrt derivative calculation, the code uses 'z' (the result of sqrt(x)) instead of 'v' (the input parameter x). The derivative of sqrt(x) should be 1/(2*sqrt(x)), but the code calculates 1/(2*sqrt(sqrt(x))). This should be 'max(EPS_DENOM, sqrt(v))' or just 'max(EPS_DENOM, z)' where z is sqrt(v), but since z is the whole Unary expression, it should use sqrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 106}, {"description": "In the inverse derivative calculation, the code uses 'z' (the whole Unary expression) instead of 'v' (the input parameter). The derivative of 1/x should be -1/x^2, but the code calculates -(1/x)^2 instead of -1/x^2. This should be 'neg(inverse(squared(v)))'.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 109}, {"description": "In the cbrt (cube root) derivative calculation, the code uses 'squared(z)' instead of the correct formula. The derivative of x^(1/3) should be (1/3) * x^(-2/3) = 1/(3 * x^(2/3)) = 1/(3 * (x^(1/3))^2) = 1/(3 * cbrt(x)^2). The code should be 'div(1/3, squared(z))' where z is cbrt(v), but since z is the whole expression, it should use the cube root of v. However, this might actually be correct if z represents cbrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 133}, {"description": "In the tan derivative calculation, the code calculates 'squared(inverse(cos(v)))' which is (1/cos(v))^2 = sec^2(v). However, the derivative of tan(x) should be sec^2(x) = 1/cos^2(x), which should be 'inverse(squared(cos(v)))' not 'squared(inverse(cos(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 173}, {"description": "In the tanh derivative calculation, the code calculates 'squared(inverse(cosh(v)))' which is (1/cosh(v))^2 = sech^2(v). However, the derivative of tanh(x) should be sech^2(x) = 1/cosh^2(x), which should be 'inverse(squared(cosh(v)))' not 'squared(inverse(cosh(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 176}, {"description": "In the atan2 derivative calculation, the sensitivities are swapped. For atan2(y, x), the partial derivative with respect to y (first parameter) should be x/(x^2 + y^2), and with respect to x (second parameter) should be -y/(x^2 + y^2). However, the code has them reversed: left (y) gets x/denom and right (x) gets -y/denom.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 208}, {"description": "In the Ternary case sensitivity calculation, the condition sensitivity is set to an empty array [[]] instead of [[0]]. The condition parameter should have zero sensitivity since the derivative of a conditional expression with respect to its boolean condition is typically zero in automatic differentiation.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 253}, {"description": "In the bboxFromPoints function, the reduce operations for minCorner and maxCorner don't provide initial values. If the points array is empty, this will throw a TypeError. The reduce function should have initial values like [Infinity, Infinity] for minCorner and [-Infinity, -Infinity] for maxCorner, or there should be a check to ensure points is not empty.", "file": "./packages/core/src/engine/BBox.ts", "line": 160}, {"description": "In the int function, the range check for 32-bit signed integers is incorrect. The condition checks if n is between -0x80000001 and 0x80000000, but the valid range for 32-bit signed integers should be -0x80000000 to 0x7FFFFFFF. The current check excludes the minimum valid value (-2147483648) and includes an invalid maximum value (2147483648).", "file": "./packages/core/src/utils/Wasm.ts", "line": 94}, {"description": "In the minLoc and maxLoc functions, they throw a generic TypeError when the locs array is empty, but they should provide a more descriptive error message. The functions should throw an error with a meaningful message like 'Cannot find min/max location from empty array' instead of just 'new TypeError()'.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 110}, {"description": "In the convexPolygonMinkowskiSDFOneSided function, there's a potential division by zero error on line 92. The function divides by p1.length without checking if p1 is empty. If p1 is an empty array, this will result in division by zero, which could cause NaN values to propagate through the computation.", "file": "./packages/core/src/contrib/Minkowski.ts", "line": 92}, {"description": "The renderCanvas method returns JSX elements but is declared as async Promise void. The return statements on lines 137 and 170 will cause TypeScript compilation errors since the method should perform DOM manipulation side effects rather than return JSX.", "file": "./packages/components/src/Simple.tsx", "line": 137}, {"description": "In the setState callback on line 85, the code returns `{ ...prev, optStatuses }` but the state interface expects `optimized` not `optStatuses`. This will cause the state update to fail silently and the optimized array will not be updated properly.", "file": "./packages/components/src/Grid.tsx", "line": 85}, {"description": "CSS properties in the H2 styled component are missing hyphens. Lines 93-96 have 'borderbottom', 'marginbottom', and 'fontfamily' which should be 'border-bottom', 'margin-bottom', and 'font-family'. This will cause these styles to be ignored.", "file": "./packages/components/src/Gridbox.tsx", "line": 93}, {"description": "In the onDeselect callback on lines 151-157, the code directly mutates the Set by calling prevRes.delete(i) and then returns the same Set reference. React won't detect this change because the reference hasn't changed. This should create a new Set instead of mutating the existing one.", "file": "./packages/components/src/MultipleChoiceProblem.tsx", "line": 152}, {"description": "In the map function on lines 85-92, the Stage components are missing the 'key' prop which is required for React list rendering. This will cause React to show warnings and potentially have rendering issues when the stages array changes.", "file": "./packages/components/src/StagedDiagram.tsx", "line": 87}, {"description": "On line 103, the code accesses VimMode.Vim.SET_WRITE which appears to be a custom property being set as a hack to prevent multiple definitions. However, this property is being set on the VimMode.Vim object which may not be intended to be mutated and could cause issues if the VimMode library is updated or if multiple instances exist.", "file": "./packages/components/src/editing/EditorPane.tsx", "line": 103}, {"description": "On line 17, there's an import statement `import { Simple } from \"../Simple\"` that's missing the `.js` file extension. This is inconsistent with the ES module setup and other imports in the codebase, and could cause module resolution issues.", "file": "./packages/components/src/editing/TimelineTable.tsx", "line": 17}, {"description": "The code uses the deprecated ReactDOM.render method on line 6. This method was deprecated in React 18 and should be replaced with ReactDOM.createRoot for better performance and to avoid deprecation warnings.", "file": "./packages/components/src/main.tsx", "line": 6}, {"description": "On line 15, there's a typo in the property name 'substancce' which should be 'substance'. This will cause the error example to not work properly as the property name is incorrect.", "file": "./packages/components/src/stories/PenrosePrograms.tsx", "line": 15}, {"description": "On line 38, the code calls compileDomain(domain).unsafelyUnwrap() without error handling. If compileDomain returns an error result, unsafelyUnwrap() will throw an exception and crash the component. This should be wrapped in proper error handling or use a safer unwrapping method.", "file": "./packages/components/src/Listing.tsx", "line": 38}, {"description": "ErrorBoundary component is missing state management and getDerivedStateFromError method. The component should have a state to track error status and implement getDerivedStateFromError to properly handle errors in React. Currently, it only logs errors but doesn't prevent the component tree from crashing.", "file": "./packages/editor/src/main.tsx", "line": 9}, {"description": "Import statement uses .js extension for a TypeScript file. The import './App.js' should be './App' or './App.tsx' since this is a TypeScript project and the actual file is App.tsx.", "file": "./packages/editor/src/main.tsx", "line": 6}, {"description": "Multiple import statements use .js extensions for TypeScript files. All imports from lines 18-29 and 40 should use relative paths without extensions or .tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/App.tsx", "line": 18}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/App.tsx", "line": 304}, {"description": "Missing dependency in useCallback hook. The connectRoger callback uses rogerState, setRogerState, updatedFile, updateTrio, and updateExcludeWarnings but has an empty dependency array. This could lead to stale closures and incorrect behavior.", "file": "./packages/editor/src/App.tsx", "line": 318}, {"description": "Missing dependency in useEffect hook. The useEffect on line 319 calls connectRoger but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 323}, {"description": "Missing dependency in useEffect hook. The useEffect on line 341 calls checkURL but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 346}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 22, and 23 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/atoms.ts", "line": 8}, {"description": "Potential null pointer exception in gridSizeEffect. The oldValue parameter could be a DefaultValue on first run, but the code casts it directly to DiagramGrid without checking. This could cause a runtime error when accessing properties like gridSize and variations.", "file": "./packages/editor/src/state/atoms.ts", "line": 327}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 33, and 34 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/callbacks.ts", "line": 8}, {"description": "Missing error handling for JSON.parse in gist loading. If the gist contains malformed JSON in metadata.json, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Potential null pointer exception when accessing gist files. The code assumes gistFiles['metadata.json'], gistFiles['domain'], gistFiles['style'], and gistFiles['substance'] exist without checking. If any of these files are missing from the gist, it will cause a runtime error.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Import statements use .js extensions for TypeScript files. Lines 7 and 8 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 7}, {"description": "Missing error handling for DOMParser.parseFromString. If the SVG file contains malformed XML, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 31}, {"description": "Import statements use .js extensions for TypeScript files. Lines 11 and 12 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ProgramEditor.tsx", "line": 11}, {"description": "Import statements use .js extensions for TypeScript files. Lines 26 and 27 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 26}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 96}, {"description": "Missing await for httpResource.text() call. The text() method returns a Promise but is not awaited, which means httpBody will be a Promise object instead of the actual text content. This will cause incorrect data to be stored in localStorage.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 58}, {"description": "Import statements use .js extensions for TypeScript files. Lines 3, 4, and 5 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/Settings.tsx", "line": 3}, {"description": "Missing dependency in useCallback hook. The signOut callback uses setSettings but has an empty dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/components/Settings.tsx", "line": 12}, {"description": "Import statements use .js extensions for TypeScript files. Lines 4, 5, and 6 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 4}, {"description": "Potential null pointer exception when accessing SVG elements. The code uses non-null assertion (!) on line 32 for svgNode without checking if querySelector returns null. If the SVG doesn't contain a valid svg element, this will cause a runtime error.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 32}, {"description": "Missing error handling for DOMParser.parseFromString. If the example.preview contains malformed XML/SVG, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 30}, {"description": "The `join` function has a potential bug when `parts.pop()` is called on an empty array or when there are more '..' components than directory levels. If `dir` is an empty string or if there are more '..' path components than available directory parts, `parts.pop()` will return undefined but the function will continue processing. This could lead to incorrect path resolution. The function should validate that there are parts to pop before calling `parts.pop()`, or handle the case where the path tries to go above the root directory.", "file": "packages/examples/src/index.ts", "line": 7}, {"description": "Cross-platform path separator issue in codegen.js. The code splits the directory path using `path.sep` (which is '\\' on Windows and '/' on Unix-like systems) but then joins the result using hardcoded '/' separator. This creates inconsistent path handling and could lead to incorrect import paths on Windows systems. The code should use consistent path separators or normalize paths for the target environment.", "file": "packages/examples/codegen.js", "line": 56}, {"description": "Missing error handling for JSON.parse() in codegen.js. If a .trio.json file contains invalid JSON, the JSON.parse() call on line 20 will throw an exception and crash the code generation process. This could happen due to malformed JSON files, encoding issues, or incomplete file writes. The code should wrap JSON.parse() in a try-catch block and provide meaningful error messages indicating which file failed to parse.", "file": "packages/examples/codegen.js", "line": 20}, {"description": "Missing error handling for JSON.parse() when reading registry.json in codegen.js. If the registry.json file contains invalid JSON, the JSON.parse() call on line 80 will throw an exception and crash the code generation process. Additionally, there's no error handling if the registry.json file doesn't exist or can't be read. The code should wrap both the file read and JSON.parse() operations in try-catch blocks with meaningful error messages.", "file": "packages/examples/codegen.js", "line": 80}, {"description": "Missing validation of trio object structure in codegen.js. The code assumes that the parsed trio object has the required properties (substance, style, domain, variation) without validation. If any of these properties are missing or have unexpected types, the code will fail. For example, if `trio.style` is not an array, the `.map()` calls on lines 25 and 33 will throw TypeError. The code should validate the trio object structure before attempting to use its properties.", "file": "packages/examples/codegen.js", "line": 25}, {"description": "Potential array access error in registry.test.ts. The code accesses `style[0]` on line 72 without checking if the `style` array has any elements. If a trio has an empty style array, this will result in accessing undefined and cause a runtime error when trying to destructure the `resolver` property. The code should validate that the style array is not empty before accessing its first element.", "file": "packages/examples/src/registry.test.ts", "line": 72}, {"description": "Missing dependency 'rimraf' in package.json. The build script on line 17 uses 'rimraf dist' but 'rimraf' is not listed in the dependencies or devDependencies. This will cause the build script to fail if rimraf is not globally installed. The package should include rimraf as a devDependency or use an alternative like 'rm -rf' on Unix systems or Node.js built-in fs.rmSync().", "file": "packages/examples/package.json", "line": 17}, {"description": "Unsafe type assertion and potential null reference error in eigenspace.ts. The code on line 13 uses unsafe type assertion `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without checking if `elem.firstChild?.firstChild` is actually an SVGSVGElement or even exists. If the render function doesn't produce the expected DOM structure, this will either return undefined.outerHTML (causing a TypeError) or cast a non-SVG element to SVGSVGElement. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/eigenspace.ts", "line": 13}, {"description": "Unsafe type assertion and potential null reference error in vectors.ts. The code on line 13 uses the same unsafe pattern as eigenspace.ts: `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without validating that the element exists or is actually an SVGSVGElement. If the render function doesn't produce the expected DOM structure, this will cause a TypeError when trying to access outerHTML on undefined, or incorrectly cast a non-SVG element. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/vectors.ts", "line": 13}, {"description": "Missing error handling for file system operations in codegen.js. The code uses synchronous file system operations (fs.readdirSync, fs.statSync, fs.readFileSync, fs.writeFileSync) without error handling. If any of these operations fail due to permission issues, missing files, disk space problems, or other I/O errors, the script will crash with an unhandled exception. The code should wrap these operations in try-catch blocks to provide meaningful error messages and graceful failure handling.", "file": "packages/examples/codegen.js", "line": 11}, {"description": "Potential code injection vulnerability in codegen.js. The code on lines 95 and 101 uses JSON.stringify() to embed registry keys directly into generated import statements without validation. If a registry key contains malicious content or special characters that could break out of the string context, it could lead to code injection in the generated TypeScript files. While JSON.stringify() provides some protection, the code should validate that registry keys contain only safe characters for file paths and imports.", "file": "packages/examples/codegen.js", "line": 95}, {"description": "Missing validation of registry entry structure in codegen.js. The code assumes that registry entries (variable 'v') are objects without validation. If a registry entry is null, undefined, or a primitive value, accessing properties like 'v.trio' on line 91 or using the 'in' operator on lines 97 and 105 could cause runtime errors. The code should validate that each registry entry is a valid object before processing its properties.", "file": "packages/examples/codegen.js", "line": 91}, {"description": "Non-null assertion on potentially undefined value. The generateProgs function can return undefined when envOrError.isOk() is false (line 25), but line 57 uses a non-null assertion (!) assuming it will always return a value. This could cause a runtime error if the domain compilation fails.", "file": "./packages/edgeworth/src/problems/util.tsx", "line": 57}, {"description": "Unsafe non-null assertion on array.pop(). The code uses ids.pop()! with a non-null assertion, but there's no guarantee that the ids array is non-empty when pop() is called. The while loop condition checks ids.length > 0, but the array could become empty during the loop iteration before pop() is called, potentially causing a runtime error.", "file": "./packages/edgeworth/src/analysis/SubstanceAnalysis.ts", "line": 332}, {"description": "Non-null assertion on potentially undefined value. The code uses type!.name.value with a non-null assertion, but the comment on line 158 indicates 'TODO: enforce the existence of var types', suggesting that type could be undefined. If env.vars.get(id.value) returns undefined, this will cause a runtime error.", "file": "./packages/edgeworth/src/synthesis/Synthesizer.ts", "line": 159}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![0] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the preset domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 307}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no preset entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 329}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 335}, {"description": "Non-null assertion on potentially undefined state property. The code uses this.state.setting!.opWeights but setting is declared as 'SynthesizerSetting | undefined' on line 94. This will cause a runtime error if setting is undefined when this code executes.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 647}, {"description": "Typo in application name. The 'short_name' field contains 'Edgewroth' instead of 'Edgeworth', which is inconsistent with the 'name' field and the actual application name.", "file": "./packages/edgeworth/public/manifest.json", "line": 2}, {"description": "Using deprecated ReactDOM.render API. The code uses ReactDOM.render which is deprecated in React 18. This should be replaced with ReactDOM.createRoot for React 18 compatibility and to avoid deprecation warnings.", "file": "./packages/edgeworth/src/main.tsx", "line": 6}, {"description": "Critical bug in orderTrio function: using 'for...in' loop on array instead of 'for...of'. The code 'for (const fakeType in unordered)' treats 'fakeType' as array indices (strings '0', '1', '2') rather than the actual filenames. This causes 'unordered[fakeType]' to access array elements correctly by coincidence, but the variable name 'fakeType' suggests it should contain the filename, not the index. This is confusing and could lead to bugs if the code is modified.", "file": "packages/roger/index.ts", "line": 167}, {"description": "Unhandled exception risk: fs.readFileSync called without error handling in resolvePath function. If the resolved file path doesn't exist or is inaccessible, this will throw an unhandled exception that could crash the application. The function should wrap this in a try-catch block and return undefined or handle the error gracefully.", "file": "packages/roger/index.ts", "line": 148}, {"description": "Array bounds violation: stylePrefixes[0] accessed without checking if array is empty. If stylePaths array is empty, stylePrefixes will also be empty, causing stylePrefixes[0] to return undefined, which could lead to unexpected behavior in path resolution.", "file": "packages/roger/index.ts", "line": 132}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when reading trio files. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the application. This occurs in multiple locations in the trio command handler.", "file": "packages/roger/index.ts", "line": 243}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when reading trio files in the trios command. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the application.", "file": "packages/roger/index.ts", "line": 321}, {"description": "WebSocket server crash risk: JSON.parse called without error handling on incoming WebSocket messages. If a client sends malformed JSON, this will throw an unhandled SyntaxError that could crash the WebSocket server, affecting all connected clients.", "file": "packages/roger/watch.ts", "line": 55}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when parsing trio file contents in WebSocket message handler. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the WebSocket server.", "file": "packages/roger/watch.ts", "line": 71}, {"description": "Potential undefined access: p.split('.').pop() could return undefined if the path doesn't contain a dot, but this value is used directly in string comparisons and switch statements without null checks. This could lead to unexpected behavior when processing files without extensions.", "file": "packages/roger/watch.ts", "line": 129}, {"description": "File system operations without error handling: fs.readFileSync calls in readTrio function don't have proper error handling. If any of the trio files (substance, style, or domain) don't exist or are inaccessible, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 154}, {"description": "File write operation without error handling: fs.writeFileSync called without try-catch block when saving output file. If the output directory doesn't exist, lacks write permissions, or disk is full, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 280}, {"description": "File write operation without error handling: fs.writeFileSync called without try-catch block when saving SVG files in trios command. If the output directory lacks write permissions or disk is full, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 351}, {"description": "Potential undefined access: p.split('.').pop() could return undefined if the path doesn't contain a dot, but this value is used directly in switch statement without null checks. This occurs in the file unlink handler and could lead to unexpected behavior when processing files without extensions.", "file": "packages/roger/watch.ts", "line": 160}, {"description": "Directory creation without error handling: fs.mkdirSync called without try-catch block. If the parent directory doesn't exist or lacks write permissions, this will throw an unhandled exception that could crash the application. The function should use recursive option or proper error handling.", "file": "packages/roger/index.ts", "line": 348}, {"description": "In the sqrt derivative calculation, the code uses 'z' (the result of sqrt(x)) instead of 'v' (the input parameter x). The derivative of sqrt(x) should be 1/(2*sqrt(x)), but the code calculates 1/(2*sqrt(sqrt(x))). This should be 'max(EPS_DENOM, sqrt(v))' or just 'max(EPS_DENOM, z)' where z is sqrt(v), but since z is the whole Unary expression, it should use sqrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 106}, {"description": "In the inverse derivative calculation, the code uses 'z' (the whole Unary expression) instead of 'v' (the input parameter). The derivative of 1/x should be -1/x^2, but the code calculates -(1/x)^2 instead of -1/x^2. This should be 'neg(inverse(squared(v)))'.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 109}, {"description": "In the cbrt (cube root) derivative calculation, the code uses 'squared(z)' instead of the correct formula. The derivative of x^(1/3) should be (1/3) * x^(-2/3) = 1/(3 * x^(2/3)) = 1/(3 * (x^(1/3))^2) = 1/(3 * cbrt(x)^2). The code should be 'div(1/3, squared(z))' where z is cbrt(v), but since z is the whole expression, it should use the cube root of v. However, this might actually be correct if z represents cbrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 133}, {"description": "In the tan derivative calculation, the code calculates 'squared(inverse(cos(v)))' which is (1/cos(v))^2 = sec^2(v). However, the derivative of tan(x) should be sec^2(x) = 1/cos^2(x), which should be 'inverse(squared(cos(v)))' not 'squared(inverse(cos(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 173}, {"description": "In the tanh derivative calculation, the code calculates 'squared(inverse(cosh(v)))' which is (1/cosh(v))^2 = sech^2(v). However, the derivative of tanh(x) should be sech^2(x) = 1/cosh^2(x), which should be 'inverse(squared(cosh(v)))' not 'squared(inverse(cosh(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 176}, {"description": "In the atan2 derivative calculation, the sensitivities are swapped. For atan2(y, x), the partial derivative with respect to y (first parameter) should be x/(x^2 + y^2), and with respect to x (second parameter) should be -y/(x^2 + y^2). However, the code has them reversed: left (y) gets x/denom and right (x) gets -y/denom.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 208}, {"description": "In the Ternary case sensitivity calculation, the condition sensitivity is set to an empty array [[]] instead of [[0]]. The condition parameter should have zero sensitivity since the derivative of a conditional expression with respect to its boolean condition is typically zero in automatic differentiation.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 253}, {"description": "In the bboxFromPoints function, the reduce operations for minCorner and maxCorner don't provide initial values. If the points array is empty, this will throw a TypeError. The reduce function should have initial values like [Infinity, Infinity] for minCorner and [-Infinity, -Infinity] for maxCorner, or there should be a check to ensure points is not empty.", "file": "./packages/core/src/engine/BBox.ts", "line": 160}, {"description": "In the int function, the range check for 32-bit signed integers is incorrect. The condition checks if n is between -0x80000001 and 0x80000000, but the valid range for 32-bit signed integers should be -0x80000000 to 0x7FFFFFFF. The current check excludes the minimum valid value (-2147483648) and includes an invalid maximum value (2147483648).", "file": "./packages/core/src/utils/Wasm.ts", "line": 94}, {"description": "In the minLoc and maxLoc functions, they throw a generic TypeError when the locs array is empty, but they should provide a more descriptive error message. The functions should throw an error with a meaningful message like 'Cannot find min/max location from empty array' instead of just 'new TypeError()'.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 110}, {"description": "In the convexPolygonMinkowskiSDFOneSided function, there's a potential division by zero error on line 92. The function divides by p1.length without checking if p1 is empty. If p1 is an empty array, this will result in division by zero, which could cause NaN values to propagate through the computation.", "file": "./packages/core/src/contrib/Minkowski.ts", "line": 92}, {"description": "The renderCanvas method returns JSX elements but is declared as async Promise void. The return statements on lines 137 and 170 will cause TypeScript compilation errors since the method should perform DOM manipulation side effects rather than return JSX.", "file": "./packages/components/src/Simple.tsx", "line": 137}, {"description": "In the setState callback on line 85, the code returns `{ ...prev, optStatuses }` but the state interface expects `optimized` not `optStatuses`. This will cause the state update to fail silently and the optimized array will not be updated properly.", "file": "./packages/components/src/Grid.tsx", "line": 85}, {"description": "CSS properties in the H2 styled component are missing hyphens. Lines 93-96 have 'borderbottom', 'marginbottom', and 'fontfamily' which should be 'border-bottom', 'margin-bottom', and 'font-family'. This will cause these styles to be ignored.", "file": "./packages/components/src/Gridbox.tsx", "line": 93}, {"description": "In the onDeselect callback on lines 151-157, the code directly mutates the Set by calling prevRes.delete(i) and then returns the same Set reference. React won't detect this change because the reference hasn't changed. This should create a new Set instead of mutating the existing one.", "file": "./packages/components/src/MultipleChoiceProblem.tsx", "line": 152}, {"description": "In the map function on lines 85-92, the Stage components are missing the 'key' prop which is required for React list rendering. This will cause React to show warnings and potentially have rendering issues when the stages array changes.", "file": "./packages/components/src/StagedDiagram.tsx", "line": 87}, {"description": "On line 103, the code accesses VimMode.Vim.SET_WRITE which appears to be a custom property being set as a hack to prevent multiple definitions. However, this property is being set on the VimMode.Vim object which may not be intended to be mutated and could cause issues if the VimMode library is updated or if multiple instances exist.", "file": "./packages/components/src/editing/EditorPane.tsx", "line": 103}, {"description": "On line 17, there's an import statement `import { Simple } from \"../Simple\"` that's missing the `.js` file extension. This is inconsistent with the ES module setup and other imports in the codebase, and could cause module resolution issues.", "file": "./packages/components/src/editing/TimelineTable.tsx", "line": 17}, {"description": "The code uses the deprecated ReactDOM.render method on line 6. This method was deprecated in React 18 and should be replaced with ReactDOM.createRoot for better performance and to avoid deprecation warnings.", "file": "./packages/components/src/main.tsx", "line": 6}, {"description": "On line 15, there's a typo in the property name 'substancce' which should be 'substance'. This will cause the error example to not work properly as the property name is incorrect.", "file": "./packages/components/src/stories/PenrosePrograms.tsx", "line": 15}, {"description": "On line 38, the code calls compileDomain(domain).unsafelyUnwrap() without error handling. If compileDomain returns an error result, unsafelyUnwrap() will throw an exception and crash the component. This should be wrapped in proper error handling or use a safer unwrapping method.", "file": "./packages/components/src/Listing.tsx", "line": 38}, {"description": "ErrorBoundary component is missing state management and getDerivedStateFromError method. The component should have a state to track error status and implement getDerivedStateFromError to properly handle errors in React. Currently, it only logs errors but doesn't prevent the component tree from crashing.", "file": "./packages/editor/src/main.tsx", "line": 9}, {"description": "Import statement uses .js extension for a TypeScript file. The import './App.js' should be './App' or './App.tsx' since this is a TypeScript project and the actual file is App.tsx.", "file": "./packages/editor/src/main.tsx", "line": 6}, {"description": "Multiple import statements use .js extensions for TypeScript files. All imports from lines 18-29 and 40 should use relative paths without extensions or .tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/App.tsx", "line": 18}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/App.tsx", "line": 304}, {"description": "Missing dependency in useCallback hook. The connectRoger callback uses rogerState, setRogerState, updatedFile, updateTrio, and updateExcludeWarnings but has an empty dependency array. This could lead to stale closures and incorrect behavior.", "file": "./packages/editor/src/App.tsx", "line": 318}, {"description": "Missing dependency in useEffect hook. The useEffect on line 319 calls connectRoger but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 323}, {"description": "Missing dependency in useEffect hook. The useEffect on line 341 calls checkURL but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 346}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 22, and 23 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/atoms.ts", "line": 8}, {"description": "Potential null pointer exception in gridSizeEffect. The oldValue parameter could be a DefaultValue on first run, but the code casts it directly to DiagramGrid without checking. This could cause a runtime error when accessing properties like gridSize and variations.", "file": "./packages/editor/src/state/atoms.ts", "line": 327}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 33, and 34 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/callbacks.ts", "line": 8}, {"description": "Missing error handling for JSON.parse in gist loading. If the gist contains malformed JSON in metadata.json, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Potential null pointer exception when accessing gist files. The code assumes gistFiles['metadata.json'], gistFiles['domain'], gistFiles['style'], and gistFiles['substance'] exist without checking. If any of these files are missing from the gist, it will cause a runtime error.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Import statements use .js extensions for TypeScript files. Lines 7 and 8 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 7}, {"description": "Missing error handling for DOMParser.parseFromString. If the SVG file contains malformed XML, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 31}, {"description": "Import statements use .js extensions for TypeScript files. Lines 11 and 12 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ProgramEditor.tsx", "line": 11}, {"description": "Import statements use .js extensions for TypeScript files. Lines 26 and 27 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 26}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 96}, {"description": "Missing await for httpResource.text() call. The text() method returns a Promise but is not awaited, which means httpBody will be a Promise object instead of the actual text content. This will cause incorrect data to be stored in localStorage.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 58}, {"description": "Import statements use .js extensions for TypeScript files. Lines 3, 4, and 5 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/Settings.tsx", "line": 3}, {"description": "Missing dependency in useCallback hook. The signOut callback uses setSettings but has an empty dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/components/Settings.tsx", "line": 12}, {"description": "Import statements use .js extensions for TypeScript files. Lines 4, 5, and 6 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 4}, {"description": "Potential null pointer exception when accessing SVG elements. The code uses non-null assertion (!) on line 32 for svgNode without checking if querySelector returns null. If the SVG doesn't contain a valid svg element, this will cause a runtime error.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 32}, {"description": "Missing error handling for DOMParser.parseFromString. If the example.preview contains malformed XML/SVG, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 30}, {"description": "The `join` function has a potential bug when `parts.pop()` is called on an empty array or when there are more '..' components than directory levels. If `dir` is an empty string or if there are more '..' path components than available directory parts, `parts.pop()` will return undefined but the function will continue processing. This could lead to incorrect path resolution. The function should validate that there are parts to pop before calling `parts.pop()`, or handle the case where the path tries to go above the root directory.", "file": "packages/examples/src/index.ts", "line": 7}, {"description": "Cross-platform path separator issue in codegen.js. The code splits the directory path using `path.sep` (which is '\\' on Windows and '/' on Unix-like systems) but then joins the result using hardcoded '/' separator. This creates inconsistent path handling and could lead to incorrect import paths on Windows systems. The code should use consistent path separators or normalize paths for the target environment.", "file": "packages/examples/codegen.js", "line": 56}, {"description": "Missing error handling for JSON.parse() in codegen.js. If a .trio.json file contains invalid JSON, the JSON.parse() call on line 20 will throw an exception and crash the code generation process. This could happen due to malformed JSON files, encoding issues, or incomplete file writes. The code should wrap JSON.parse() in a try-catch block and provide meaningful error messages indicating which file failed to parse.", "file": "packages/examples/codegen.js", "line": 20}, {"description": "Missing error handling for JSON.parse() when reading registry.json in codegen.js. If the registry.json file contains invalid JSON, the JSON.parse() call on line 80 will throw an exception and crash the code generation process. Additionally, there's no error handling if the registry.json file doesn't exist or can't be read. The code should wrap both the file read and JSON.parse() operations in try-catch blocks with meaningful error messages.", "file": "packages/examples/codegen.js", "line": 80}, {"description": "Missing validation of trio object structure in codegen.js. The code assumes that the parsed trio object has the required properties (substance, style, domain, variation) without validation. If any of these properties are missing or have unexpected types, the code will fail. For example, if `trio.style` is not an array, the `.map()` calls on lines 25 and 33 will throw TypeError. The code should validate the trio object structure before attempting to use its properties.", "file": "packages/examples/codegen.js", "line": 25}, {"description": "Potential array access error in registry.test.ts. The code accesses `style[0]` on line 72 without checking if the `style` array has any elements. If a trio has an empty style array, this will result in accessing undefined and cause a runtime error when trying to destructure the `resolver` property. The code should validate that the style array is not empty before accessing its first element.", "file": "packages/examples/src/registry.test.ts", "line": 72}, {"description": "Missing dependency 'rimraf' in package.json. The build script on line 17 uses 'rimraf dist' but 'rimraf' is not listed in the dependencies or devDependencies. This will cause the build script to fail if rimraf is not globally installed. The package should include rimraf as a devDependency or use an alternative like 'rm -rf' on Unix systems or Node.js built-in fs.rmSync().", "file": "packages/examples/package.json", "line": 17}, {"description": "Unsafe type assertion and potential null reference error in eigenspace.ts. The code on line 13 uses unsafe type assertion `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without checking if `elem.firstChild?.firstChild` is actually an SVGSVGElement or even exists. If the render function doesn't produce the expected DOM structure, this will either return undefined.outerHTML (causing a TypeError) or cast a non-SVG element to SVGSVGElement. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/eigenspace.ts", "line": 13}, {"description": "Unsafe type assertion and potential null reference error in vectors.ts. The code on line 13 uses the same unsafe pattern as eigenspace.ts: `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without validating that the element exists or is actually an SVGSVGElement. If the render function doesn't produce the expected DOM structure, this will cause a TypeError when trying to access outerHTML on undefined, or incorrectly cast a non-SVG element. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/vectors.ts", "line": 13}, {"description": "Missing error handling for file system operations in codegen.js. The code uses synchronous file system operations (fs.readdirSync, fs.statSync, fs.readFileSync, fs.writeFileSync) without error handling. If any of these operations fail due to permission issues, missing files, disk space problems, or other I/O errors, the script will crash with an unhandled exception. The code should wrap these operations in try-catch blocks to provide meaningful error messages and graceful failure handling.", "file": "packages/examples/codegen.js", "line": 11}, {"description": "Potential code injection vulnerability in codegen.js. The code on lines 95 and 101 uses JSON.stringify() to embed registry keys directly into generated import statements without validation. If a registry key contains malicious content or special characters that could break out of the string context, it could lead to code injection in the generated TypeScript files. While JSON.stringify() provides some protection, the code should validate that registry keys contain only safe characters for file paths and imports.", "file": "packages/examples/codegen.js", "line": 95}, {"description": "Missing validation of registry entry structure in codegen.js. The code assumes that registry entries (variable 'v') are objects without validation. If a registry entry is null, undefined, or a primitive value, accessing properties like 'v.trio' on line 91 or using the 'in' operator on lines 97 and 105 could cause runtime errors. The code should validate that each registry entry is a valid object before processing its properties.", "file": "packages/examples/codegen.js", "line": 91}, {"description": "Non-null assertion on potentially undefined value. The generateProgs function can return undefined when envOrError.isOk() is false (line 25), but line 57 uses a non-null assertion (!) assuming it will always return a value. This could cause a runtime error if the domain compilation fails.", "file": "./packages/edgeworth/src/problems/util.tsx", "line": 57}, {"description": "Unsafe non-null assertion on array.pop(). The code uses ids.pop()! with a non-null assertion, but there's no guarantee that the ids array is non-empty when pop() is called. The while loop condition checks ids.length > 0, but the array could become empty during the loop iteration before pop() is called, potentially causing a runtime error.", "file": "./packages/edgeworth/src/analysis/SubstanceAnalysis.ts", "line": 332}, {"description": "Non-null assertion on potentially undefined value. The code uses type!.name.value with a non-null assertion, but the comment on line 158 indicates 'TODO: enforce the existence of var types', suggesting that type could be undefined. If env.vars.get(id.value) returns undefined, this will cause a runtime error.", "file": "./packages/edgeworth/src/synthesis/Synthesizer.ts", "line": 159}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![0] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the preset domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 307}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no preset entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 329}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 335}, {"description": "Non-null assertion on potentially undefined state property. The code uses this.state.setting!.opWeights but setting is declared as 'SynthesizerSetting | undefined' on line 94. This will cause a runtime error if setting is undefined when this code executes.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 647}, {"description": "Typo in application name. The 'short_name' field contains 'Edgewroth' instead of 'Edgeworth', which is inconsistent with the 'name' field and the actual application name.", "file": "./packages/edgeworth/public/manifest.json", "line": 2}, {"description": "Using deprecated ReactDOM.render API. The code uses ReactDOM.render which is deprecated in React 18. This should be replaced with ReactDOM.createRoot for React 18 compatibility and to avoid deprecation warnings.", "file": "./packages/edgeworth/src/main.tsx", "line": 6}, {"description": "Critical bug in orderTrio function: using 'for...in' loop on array instead of 'for...of'. The code 'for (const fakeType in unordered)' treats 'fakeType' as array indices (strings '0', '1', '2') rather than the actual filenames. This causes 'unordered[fakeType]' to access array elements correctly by coincidence, but the variable name 'fakeType' suggests it should contain the filename, not the index. This is confusing and could lead to bugs if the code is modified.", "file": "packages/roger/index.ts", "line": 167}, {"description": "Unhandled exception risk: fs.readFileSync called without error handling in resolvePath function. If the resolved file path doesn't exist or is inaccessible, this will throw an unhandled exception that could crash the application. The function should wrap this in a try-catch block and return undefined or handle the error gracefully.", "file": "packages/roger/index.ts", "line": 148}, {"description": "Array bounds violation: stylePrefixes[0] accessed without checking if array is empty. If stylePaths array is empty, stylePrefixes will also be empty, causing stylePrefixes[0] to return undefined, which could lead to unexpected behavior in path resolution.", "file": "packages/roger/index.ts", "line": 132}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when reading trio files. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the application. This occurs in multiple locations in the trio command handler.", "file": "packages/roger/index.ts", "line": 243}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when reading trio files in the trios command. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the application.", "file": "packages/roger/index.ts", "line": 321}, {"description": "WebSocket server crash risk: JSON.parse called without error handling on incoming WebSocket messages. If a client sends malformed JSON, this will throw an unhandled SyntaxError that could crash the WebSocket server, affecting all connected clients.", "file": "packages/roger/watch.ts", "line": 55}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when parsing trio file contents in WebSocket message handler. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the WebSocket server.", "file": "packages/roger/watch.ts", "line": 71}, {"description": "Potential undefined access: p.split('.').pop() could return undefined if the path doesn't contain a dot, but this value is used directly in string comparisons and switch statements without null checks. This could lead to unexpected behavior when processing files without extensions.", "file": "packages/roger/watch.ts", "line": 129}, {"description": "File system operations without error handling: fs.readFileSync calls in readTrio function don't have proper error handling. If any of the trio files (substance, style, or domain) don't exist or are inaccessible, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 154}, {"description": "File write operation without error handling: fs.writeFileSync called without try-catch block when saving output file. If the output directory doesn't exist, lacks write permissions, or disk is full, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 280}, {"description": "File write operation without error handling: fs.writeFileSync called without try-catch block when saving SVG files in trios command. If the output directory lacks write permissions or disk is full, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 351}, {"description": "Potential undefined access: p.split('.').pop() could return undefined if the path doesn't contain a dot, but this value is used directly in switch statement without null checks. This occurs in the file unlink handler and could lead to unexpected behavior when processing files without extensions.", "file": "packages/roger/watch.ts", "line": 160}, {"description": "Directory creation without error handling: fs.mkdirSync called without try-catch block. If the parent directory doesn't exist or lacks write permissions, this will throw an unhandled exception that could crash the application. The function should use recursive option or proper error handling.", "file": "packages/roger/index.ts", "line": 348}, {"description": "Import path mismatch: App.tsx imports 'eigenvectors.jsx' but the actual file is 'eigenvectors.tsx'. This will cause a module resolution error since the .jsx file doesn't exist.", "file": "./packages/solids/src/App.tsx", "line": 1}, {"description": "Import path mismatch in commented code: The commented import on line 4 references 'triangles.jsx' but the actual file is 'triangles.tsx'. This would cause a module resolution error if uncommented.", "file": "./packages/solids/src/App.tsx", "line": 4}, {"description": "Missing import for 'seedrandom': The code imports 'seedrandom' on line 16 but this package is not listed in the dependencies in package.json. This will cause a module resolution error at runtime.", "file": "./packages/solids/src/util.ts", "line": 16}, {"description": "Import path mismatch: closedElasticCurve.tsx imports 'Slider.jsx' on line 16 but the actual file is 'Slider.tsx'. This will cause a module resolution error.", "file": "./packages/solids/src/closedElasticCurve.tsx", "line": 16}, {"description": "Missing import for 'seedrandom': The code imports 'seedrandom' on line 14 but this package is not listed in the dependencies in package.json. This will cause a module resolution error at runtime.", "file": "./packages/solids/src/closedElasticCurve.tsx", "line": 14}, {"description": "Missing import for 'seedrandom': The code imports 'seedrandom' on line 13 but this package is not listed in the dependencies in package.json. This will cause a module resolution error at runtime.", "file": "./packages/solids/src/texts.tsx", "line": 13}, {"description": "Invalid SVG attribute: 'fill-color' is not a valid SVG attribute on line 153. The correct attribute should be 'fill'. This will cause the text color to not be applied correctly.", "file": "./packages/solids/src/triangles.tsx", "line": 153}, {"description": "Import path mismatch: main.tsx imports 'App.js' on line 4 but the actual file is 'App.tsx'. This will cause a module resolution error.", "file": "./packages/solids/src/main.tsx", "line": 4}, {"description": "Variable scope issue: The variable 'frame' is declared with 'let' on line 70 but is also assigned on line 66 inside the loop function. This creates a potential issue where the frame variable might be undefined when accessed in the loop, leading to incorrect behavior in animation frame management.", "file": "./packages/solids/src/closedElasticCurve.tsx", "line": 66}, {"description": "Invalid script command: The 'build' script on line 27 uses ':' which is a no-op command. While this might be intentional, it could indicate that the build script is incomplete or misconfigured, potentially causing build failures.", "file": "./packages/solids/package.json", "line": 27}, {"description": "Invalid script command: The 'typecheck' script on line 32 uses ':' which is a no-op command. While this might be intentional, it could indicate that the typecheck script is incomplete or misconfigured, potentially causing type checking to be skipped.", "file": "./packages/solids/package.json", "line": 32}, {"description": "In the sqrt derivative calculation, the code uses 'z' (the result of sqrt(x)) instead of 'v' (the input parameter x). The derivative of sqrt(x) should be 1/(2*sqrt(x)), but the code calculates 1/(2*sqrt(sqrt(x))). This should be 'max(EPS_DENOM, sqrt(v))' or just 'max(EPS_DENOM, z)' where z is sqrt(v), but since z is the whole Unary expression, it should use sqrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 106}, {"description": "In the inverse derivative calculation, the code uses 'z' (the whole Unary expression) instead of 'v' (the input parameter). The derivative of 1/x should be -1/x^2, but the code calculates -(1/x)^2 instead of -1/x^2. This should be 'neg(inverse(squared(v)))'.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 109}, {"description": "In the cbrt (cube root) derivative calculation, the code uses 'squared(z)' instead of the correct formula. The derivative of x^(1/3) should be (1/3) * x^(-2/3) = 1/(3 * x^(2/3)) = 1/(3 * (x^(1/3))^2) = 1/(3 * cbrt(x)^2). The code should be 'div(1/3, squared(z))' where z is cbrt(v), but since z is the whole expression, it should use the cube root of v. However, this might actually be correct if z represents cbrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 133}, {"description": "In the tan derivative calculation, the code calculates 'squared(inverse(cos(v)))' which is (1/cos(v))^2 = sec^2(v). However, the derivative of tan(x) should be sec^2(x) = 1/cos^2(x), which should be 'inverse(squared(cos(v)))' not 'squared(inverse(cos(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 173}, {"description": "In the tanh derivative calculation, the code calculates 'squared(inverse(cosh(v)))' which is (1/cosh(v))^2 = sech^2(v). However, the derivative of tanh(x) should be sech^2(x) = 1/cosh^2(x), which should be 'inverse(squared(cosh(v)))' not 'squared(inverse(cosh(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 176}, {"description": "In the atan2 derivative calculation, the sensitivities are swapped. For atan2(y, x), the partial derivative with respect to y (first parameter) should be x/(x^2 + y^2), and with respect to x (second parameter) should be -y/(x^2 + y^2). However, the code has them reversed: left (y) gets x/denom and right (x) gets -y/denom.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 208}, {"description": "In the Ternary case sensitivity calculation, the condition sensitivity is set to an empty array [[]] instead of [[0]]. The condition parameter should have zero sensitivity since the derivative of a conditional expression with respect to its boolean condition is typically zero in automatic differentiation.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 253}, {"description": "In the bboxFromPoints function, the reduce operations for minCorner and maxCorner don't provide initial values. If the points array is empty, this will throw a TypeError. The reduce function should have initial values like [Infinity, Infinity] for minCorner and [-Infinity, -Infinity] for maxCorner, or there should be a check to ensure points is not empty.", "file": "./packages/core/src/engine/BBox.ts", "line": 160}, {"description": "In the int function, the range check for 32-bit signed integers is incorrect. The condition checks if n is between -0x80000001 and 0x80000000, but the valid range for 32-bit signed integers should be -0x80000000 to 0x7FFFFFFF. The current check excludes the minimum valid value (-2147483648) and includes an invalid maximum value (2147483648).", "file": "./packages/core/src/utils/Wasm.ts", "line": 94}, {"description": "In the minLoc and maxLoc functions, they throw a generic TypeError when the locs array is empty, but they should provide a more descriptive error message. The functions should throw an error with a meaningful message like 'Cannot find min/max location from empty array' instead of just 'new TypeError()'.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 110}, {"description": "In the convexPolygonMinkowskiSDFOneSided function, there's a potential division by zero error on line 92. The function divides by p1.length without checking if p1 is empty. If p1 is an empty array, this will result in division by zero, which could cause NaN values to propagate through the computation.", "file": "./packages/core/src/contrib/Minkowski.ts", "line": 92}, {"description": "The renderCanvas method returns JSX elements but is declared as async Promise void. The return statements on lines 137 and 170 will cause TypeScript compilation errors since the method should perform DOM manipulation side effects rather than return JSX.", "file": "./packages/components/src/Simple.tsx", "line": 137}, {"description": "In the setState callback on line 85, the code returns `{ ...prev, optStatuses }` but the state interface expects `optimized` not `optStatuses`. This will cause the state update to fail silently and the optimized array will not be updated properly.", "file": "./packages/components/src/Grid.tsx", "line": 85}, {"description": "CSS properties in the H2 styled component are missing hyphens. Lines 93-96 have 'borderbottom', 'marginbottom', and 'fontfamily' which should be 'border-bottom', 'margin-bottom', and 'font-family'. This will cause these styles to be ignored.", "file": "./packages/components/src/Gridbox.tsx", "line": 93}, {"description": "In the onDeselect callback on lines 151-157, the code directly mutates the Set by calling prevRes.delete(i) and then returns the same Set reference. React won't detect this change because the reference hasn't changed. This should create a new Set instead of mutating the existing one.", "file": "./packages/components/src/MultipleChoiceProblem.tsx", "line": 152}, {"description": "In the map function on lines 85-92, the Stage components are missing the 'key' prop which is required for React list rendering. This will cause React to show warnings and potentially have rendering issues when the stages array changes.", "file": "./packages/components/src/StagedDiagram.tsx", "line": 87}, {"description": "On line 103, the code accesses VimMode.Vim.SET_WRITE which appears to be a custom property being set as a hack to prevent multiple definitions. However, this property is being set on the VimMode.Vim object which may not be intended to be mutated and could cause issues if the VimMode library is updated or if multiple instances exist.", "file": "./packages/components/src/editing/EditorPane.tsx", "line": 103}, {"description": "On line 17, there's an import statement `import { Simple } from \"../Simple\"` that's missing the `.js` file extension. This is inconsistent with the ES module setup and other imports in the codebase, and could cause module resolution issues.", "file": "./packages/components/src/editing/TimelineTable.tsx", "line": 17}, {"description": "The code uses the deprecated ReactDOM.render method on line 6. This method was deprecated in React 18 and should be replaced with ReactDOM.createRoot for better performance and to avoid deprecation warnings.", "file": "./packages/components/src/main.tsx", "line": 6}, {"description": "On line 15, there's a typo in the property name 'substancce' which should be 'substance'. This will cause the error example to not work properly as the property name is incorrect.", "file": "./packages/components/src/stories/PenrosePrograms.tsx", "line": 15}, {"description": "On line 38, the code calls compileDomain(domain).unsafelyUnwrap() without error handling. If compileDomain returns an error result, unsafelyUnwrap() will throw an exception and crash the component. This should be wrapped in proper error handling or use a safer unwrapping method.", "file": "./packages/components/src/Listing.tsx", "line": 38}, {"description": "ErrorBoundary component is missing state management and getDerivedStateFromError method. The component should have a state to track error status and implement getDerivedStateFromError to properly handle errors in React. Currently, it only logs errors but doesn't prevent the component tree from crashing.", "file": "./packages/editor/src/main.tsx", "line": 9}, {"description": "Import statement uses .js extension for a TypeScript file. The import './App.js' should be './App' or './App.tsx' since this is a TypeScript project and the actual file is App.tsx.", "file": "./packages/editor/src/main.tsx", "line": 6}, {"description": "Multiple import statements use .js extensions for TypeScript files. All imports from lines 18-29 and 40 should use relative paths without extensions or .tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/App.tsx", "line": 18}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/App.tsx", "line": 304}, {"description": "Missing dependency in useCallback hook. The connectRoger callback uses rogerState, setRogerState, updatedFile, updateTrio, and updateExcludeWarnings but has an empty dependency array. This could lead to stale closures and incorrect behavior.", "file": "./packages/editor/src/App.tsx", "line": 318}, {"description": "Missing dependency in useEffect hook. The useEffect on line 319 calls connectRoger but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 323}, {"description": "Missing dependency in useEffect hook. The useEffect on line 341 calls checkURL but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 346}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 22, and 23 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/atoms.ts", "line": 8}, {"description": "Potential null pointer exception in gridSizeEffect. The oldValue parameter could be a DefaultValue on first run, but the code casts it directly to DiagramGrid without checking. This could cause a runtime error when accessing properties like gridSize and variations.", "file": "./packages/editor/src/state/atoms.ts", "line": 327}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 33, and 34 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/callbacks.ts", "line": 8}, {"description": "Missing error handling for JSON.parse in gist loading. If the gist contains malformed JSON in metadata.json, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Potential null pointer exception when accessing gist files. The code assumes gistFiles['metadata.json'], gistFiles['domain'], gistFiles['style'], and gistFiles['substance'] exist without checking. If any of these files are missing from the gist, it will cause a runtime error.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Import statements use .js extensions for TypeScript files. Lines 7 and 8 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 7}, {"description": "Missing error handling for DOMParser.parseFromString. If the SVG file contains malformed XML, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 31}, {"description": "Import statements use .js extensions for TypeScript files. Lines 11 and 12 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ProgramEditor.tsx", "line": 11}, {"description": "Import statements use .js extensions for TypeScript files. Lines 26 and 27 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 26}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 96}, {"description": "Missing await for httpResource.text() call. The text() method returns a Promise but is not awaited, which means httpBody will be a Promise object instead of the actual text content. This will cause incorrect data to be stored in localStorage.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 58}, {"description": "Import statements use .js extensions for TypeScript files. Lines 3, 4, and 5 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/Settings.tsx", "line": 3}, {"description": "Missing dependency in useCallback hook. The signOut callback uses setSettings but has an empty dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/components/Settings.tsx", "line": 12}, {"description": "Import statements use .js extensions for TypeScript files. Lines 4, 5, and 6 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 4}, {"description": "Potential null pointer exception when accessing SVG elements. The code uses non-null assertion (!) on line 32 for svgNode without checking if querySelector returns null. If the SVG doesn't contain a valid svg element, this will cause a runtime error.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 32}, {"description": "Missing error handling for DOMParser.parseFromString. If the example.preview contains malformed XML/SVG, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 30}, {"description": "The `join` function has a potential bug when `parts.pop()` is called on an empty array or when there are more '..' components than directory levels. If `dir` is an empty string or if there are more '..' path components than available directory parts, `parts.pop()` will return undefined but the function will continue processing. This could lead to incorrect path resolution. The function should validate that there are parts to pop before calling `parts.pop()`, or handle the case where the path tries to go above the root directory.", "file": "packages/examples/src/index.ts", "line": 7}, {"description": "Cross-platform path separator issue in codegen.js. The code splits the directory path using `path.sep` (which is '\\' on Windows and '/' on Unix-like systems) but then joins the result using hardcoded '/' separator. This creates inconsistent path handling and could lead to incorrect import paths on Windows systems. The code should use consistent path separators or normalize paths for the target environment.", "file": "packages/examples/codegen.js", "line": 56}, {"description": "Missing error handling for JSON.parse() in codegen.js. If a .trio.json file contains invalid JSON, the JSON.parse() call on line 20 will throw an exception and crash the code generation process. This could happen due to malformed JSON files, encoding issues, or incomplete file writes. The code should wrap JSON.parse() in a try-catch block and provide meaningful error messages indicating which file failed to parse.", "file": "packages/examples/codegen.js", "line": 20}, {"description": "Missing error handling for JSON.parse() when reading registry.json in codegen.js. If the registry.json file contains invalid JSON, the JSON.parse() call on line 80 will throw an exception and crash the code generation process. Additionally, there's no error handling if the registry.json file doesn't exist or can't be read. The code should wrap both the file read and JSON.parse() operations in try-catch blocks with meaningful error messages.", "file": "packages/examples/codegen.js", "line": 80}, {"description": "Missing validation of trio object structure in codegen.js. The code assumes that the parsed trio object has the required properties (substance, style, domain, variation) without validation. If any of these properties are missing or have unexpected types, the code will fail. For example, if `trio.style` is not an array, the `.map()` calls on lines 25 and 33 will throw TypeError. The code should validate the trio object structure before attempting to use its properties.", "file": "packages/examples/codegen.js", "line": 25}, {"description": "Potential array access error in registry.test.ts. The code accesses `style[0]` on line 72 without checking if the `style` array has any elements. If a trio has an empty style array, this will result in accessing undefined and cause a runtime error when trying to destructure the `resolver` property. The code should validate that the style array is not empty before accessing its first element.", "file": "packages/examples/src/registry.test.ts", "line": 72}, {"description": "Missing dependency 'rimraf' in package.json. The build script on line 17 uses 'rimraf dist' but 'rimraf' is not listed in the dependencies or devDependencies. This will cause the build script to fail if rimraf is not globally installed. The package should include rimraf as a devDependency or use an alternative like 'rm -rf' on Unix systems or Node.js built-in fs.rmSync().", "file": "packages/examples/package.json", "line": 17}, {"description": "Unsafe type assertion and potential null reference error in eigenspace.ts. The code on line 13 uses unsafe type assertion `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without checking if `elem.firstChild?.firstChild` is actually an SVGSVGElement or even exists. If the render function doesn't produce the expected DOM structure, this will either return undefined.outerHTML (causing a TypeError) or cast a non-SVG element to SVGSVGElement. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/eigenspace.ts", "line": 13}, {"description": "Unsafe type assertion and potential null reference error in vectors.ts. The code on line 13 uses the same unsafe pattern as eigenspace.ts: `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without validating that the element exists or is actually an SVGSVGElement. If the render function doesn't produce the expected DOM structure, this will cause a TypeError when trying to access outerHTML on undefined, or incorrectly cast a non-SVG element. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/vectors.ts", "line": 13}, {"description": "Missing error handling for file system operations in codegen.js. The code uses synchronous file system operations (fs.readdirSync, fs.statSync, fs.readFileSync, fs.writeFileSync) without error handling. If any of these operations fail due to permission issues, missing files, disk space problems, or other I/O errors, the script will crash with an unhandled exception. The code should wrap these operations in try-catch blocks to provide meaningful error messages and graceful failure handling.", "file": "packages/examples/codegen.js", "line": 11}, {"description": "Potential code injection vulnerability in codegen.js. The code on lines 95 and 101 uses JSON.stringify() to embed registry keys directly into generated import statements without validation. If a registry key contains malicious content or special characters that could break out of the string context, it could lead to code injection in the generated TypeScript files. While JSON.stringify() provides some protection, the code should validate that registry keys contain only safe characters for file paths and imports.", "file": "packages/examples/codegen.js", "line": 95}, {"description": "Missing validation of registry entry structure in codegen.js. The code assumes that registry entries (variable 'v') are objects without validation. If a registry entry is null, undefined, or a primitive value, accessing properties like 'v.trio' on line 91 or using the 'in' operator on lines 97 and 105 could cause runtime errors. The code should validate that each registry entry is a valid object before processing its properties.", "file": "packages/examples/codegen.js", "line": 91}, {"description": "Non-null assertion on potentially undefined value. The generateProgs function can return undefined when envOrError.isOk() is false (line 25), but line 57 uses a non-null assertion (!) assuming it will always return a value. This could cause a runtime error if the domain compilation fails.", "file": "./packages/edgeworth/src/problems/util.tsx", "line": 57}, {"description": "Unsafe non-null assertion on array.pop(). The code uses ids.pop()! with a non-null assertion, but there's no guarantee that the ids array is non-empty when pop() is called. The while loop condition checks ids.length > 0, but the array could become empty during the loop iteration before pop() is called, potentially causing a runtime error.", "file": "./packages/edgeworth/src/analysis/SubstanceAnalysis.ts", "line": 332}, {"description": "Non-null assertion on potentially undefined value. The code uses type!.name.value with a non-null assertion, but the comment on line 158 indicates 'TODO: enforce the existence of var types', suggesting that type could be undefined. If env.vars.get(id.value) returns undefined, this will cause a runtime error.", "file": "./packages/edgeworth/src/synthesis/Synthesizer.ts", "line": 159}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![0] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the preset domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 307}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no preset entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 329}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 335}, {"description": "Non-null assertion on potentially undefined state property. The code uses this.state.setting!.opWeights but setting is declared as 'SynthesizerSetting | undefined' on line 94. This will cause a runtime error if setting is undefined when this code executes.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 647}, {"description": "Typo in application name. The 'short_name' field contains 'Edgewroth' instead of 'Edgeworth', which is inconsistent with the 'name' field and the actual application name.", "file": "./packages/edgeworth/public/manifest.json", "line": 2}, {"description": "Using deprecated ReactDOM.render API. The code uses ReactDOM.render which is deprecated in React 18. This should be replaced with ReactDOM.createRoot for React 18 compatibility and to avoid deprecation warnings.", "file": "./packages/edgeworth/src/main.tsx", "line": 6}, {"description": "Critical bug in orderTrio function: using 'for...in' loop on array instead of 'for...of'. The code 'for (const fakeType in unordered)' treats 'fakeType' as array indices (strings '0', '1', '2') rather than the actual filenames. This causes 'unordered[fakeType]' to access array elements correctly by coincidence, but the variable name 'fakeType' suggests it should contain the filename, not the index. This is confusing and could lead to bugs if the code is modified.", "file": "packages/roger/index.ts", "line": 167}, {"description": "Unhandled exception risk: fs.readFileSync called without error handling in resolvePath function. If the resolved file path doesn't exist or is inaccessible, this will throw an unhandled exception that could crash the application. The function should wrap this in a try-catch block and return undefined or handle the error gracefully.", "file": "packages/roger/index.ts", "line": 148}, {"description": "Array bounds violation: stylePrefixes[0] accessed without checking if array is empty. If stylePaths array is empty, stylePrefixes will also be empty, causing stylePrefixes[0] to return undefined, which could lead to unexpected behavior in path resolution.", "file": "packages/roger/index.ts", "line": 132}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when reading trio files. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the application. This occurs in multiple locations in the trio command handler.", "file": "packages/roger/index.ts", "line": 243}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when reading trio files in the trios command. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the application.", "file": "packages/roger/index.ts", "line": 321}, {"description": "WebSocket server crash risk: JSON.parse called without error handling on incoming WebSocket messages. If a client sends malformed JSON, this will throw an unhandled SyntaxError that could crash the WebSocket server, affecting all connected clients.", "file": "packages/roger/watch.ts", "line": 55}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when parsing trio file contents in WebSocket message handler. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the WebSocket server.", "file": "packages/roger/watch.ts", "line": 71}, {"description": "Potential undefined access: p.split('.').pop() could return undefined if the path doesn't contain a dot, but this value is used directly in string comparisons and switch statements without null checks. This could lead to unexpected behavior when processing files without extensions.", "file": "packages/roger/watch.ts", "line": 129}, {"description": "File system operations without error handling: fs.readFileSync calls in readTrio function don't have proper error handling. If any of the trio files (substance, style, or domain) don't exist or are inaccessible, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 154}, {"description": "File write operation without error handling: fs.writeFileSync called without try-catch block when saving output file. If the output directory doesn't exist, lacks write permissions, or disk is full, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 280}, {"description": "File write operation without error handling: fs.writeFileSync called without try-catch block when saving SVG files in trios command. If the output directory lacks write permissions or disk is full, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 351}, {"description": "Potential undefined access: p.split('.').pop() could return undefined if the path doesn't contain a dot, but this value is used directly in switch statement without null checks. This occurs in the file unlink handler and could lead to unexpected behavior when processing files without extensions.", "file": "packages/roger/watch.ts", "line": 160}, {"description": "Directory creation without error handling: fs.mkdirSync called without try-catch block. If the parent directory doesn't exist or lacks write permissions, this will throw an unhandled exception that could crash the application. The function should use recursive option or proper error handling.", "file": "packages/roger/index.ts", "line": 348}, {"description": "Import path mismatch: App.tsx imports 'eigenvectors.jsx' but the actual file is 'eigenvectors.tsx'. This will cause a module resolution error since the .jsx file doesn't exist.", "file": "./packages/solids/src/App.tsx", "line": 1}, {"description": "Import path mismatch in commented code: The commented import on line 4 references 'triangles.jsx' but the actual file is 'triangles.tsx'. This would cause a module resolution error if uncommented.", "file": "./packages/solids/src/App.tsx", "line": 4}, {"description": "Missing import for 'seedrandom': The code imports 'seedrandom' on line 16 but this package is not listed in the dependencies in package.json. This will cause a module resolution error at runtime.", "file": "./packages/solids/src/util.ts", "line": 16}, {"description": "Import path mismatch: closedElasticCurve.tsx imports 'Slider.jsx' on line 16 but the actual file is 'Slider.tsx'. This will cause a module resolution error.", "file": "./packages/solids/src/closedElasticCurve.tsx", "line": 16}, {"description": "Missing import for 'seedrandom': The code imports 'seedrandom' on line 14 but this package is not listed in the dependencies in package.json. This will cause a module resolution error at runtime.", "file": "./packages/solids/src/closedElasticCurve.tsx", "line": 14}, {"description": "Missing import for 'seedrandom': The code imports 'seedrandom' on line 13 but this package is not listed in the dependencies in package.json. This will cause a module resolution error at runtime.", "file": "./packages/solids/src/texts.tsx", "line": 13}, {"description": "Invalid SVG attribute: 'fill-color' is not a valid SVG attribute on line 153. The correct attribute should be 'fill'. This will cause the text color to not be applied correctly.", "file": "./packages/solids/src/triangles.tsx", "line": 153}, {"description": "Import path mismatch: main.tsx imports 'App.js' on line 4 but the actual file is 'App.tsx'. This will cause a module resolution error.", "file": "./packages/solids/src/main.tsx", "line": 4}, {"description": "Variable scope issue: The variable 'frame' is declared with 'let' on line 70 but is also assigned on line 66 inside the loop function. This creates a potential issue where the frame variable might be undefined when accessed in the loop, leading to incorrect behavior in animation frame management.", "file": "./packages/solids/src/closedElasticCurve.tsx", "line": 66}, {"description": "Invalid script command: The 'build' script on line 27 uses ':' which is a no-op command. While this might be intentional, it could indicate that the build script is incomplete or misconfigured, potentially causing build failures.", "file": "./packages/solids/package.json", "line": 27}, {"description": "Invalid script command: The 'typecheck' script on line 32 uses ':' which is a no-op command. While this might be intentional, it could indicate that the typecheck script is incomplete or misconfigured, potentially causing type checking to be skipped.", "file": "./packages/solids/package.json", "line": 32}, {"description": "Incorrect regex pattern in Vim syntax file for substance strings. Line 19 uses '[^$]*' inside double quotes but should use '[^\"]*' to match characters that are not double quotes. The current pattern matches characters that are not dollar signs, which is incorrect for double-quoted strings.", "file": "util/vim/syntax/substance.vim", "line": 19}, {"description": "Outdated keywords in Emacs syntax highlighting. The Emacs configuration uses 'tconstructor', 'operator', 'vconstructor', and 'display' keywords that don't match the current VS Code grammar which uses 'symmetric', 'constructor', 'function', and 'Prop'. This inconsistency means Emacs users won't get proper syntax highlighting for current Penrose domain files.", "file": "util/emacs/penrose-modes.el", "line": 27}, {"description": "Incomplete keywords in Vim domain syntax highlighting. The Vim configuration is missing 'symmetric', 'value', and 'Prop' keywords that are present in the VS Code grammar. This means Vim users won't get proper syntax highlighting for these valid Penrose domain keywords.", "file": "util/vim/syntax/domain.vim", "line": 11}, {"description": "Invalid regex pattern in VS Code style grammar. Line 46 uses '^\\\\b' which is incorrect - the caret (^) matches start of line and word boundary (\\\\b) matches word boundaries, but combining them like this doesn't make sense. The pattern should either use '^' for start of line or '\\\\b' for word boundary, but not both together. This could cause the type keywords to not be highlighted properly when they don't appear at the start of a line.", "file": "packages/vscode/syntaxes/style.tmGrammar.json", "line": 46}, {"description": "Undefined syntax group in Vim style syntax file. Line 56 references 'styLabelKeyword' in the highlight link definition, but this syntax group is never defined anywhere in the file. This will cause Vim to show an error or warning when loading the syntax file.", "file": "util/vim/syntax/style.vim", "line": 56}, {"description": "In the sqrt derivative calculation, the code uses 'z' (the result of sqrt(x)) instead of 'v' (the input parameter x). The derivative of sqrt(x) should be 1/(2*sqrt(x)), but the code calculates 1/(2*sqrt(sqrt(x))). This should be 'max(EPS_DENOM, sqrt(v))' or just 'max(EPS_DENOM, z)' where z is sqrt(v), but since z is the whole Unary expression, it should use sqrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 106}, {"description": "In the inverse derivative calculation, the code uses 'z' (the whole Unary expression) instead of 'v' (the input parameter). The derivative of 1/x should be -1/x^2, but the code calculates -(1/x)^2 instead of -1/x^2. This should be 'neg(inverse(squared(v)))'.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 109}, {"description": "In the cbrt (cube root) derivative calculation, the code uses 'squared(z)' instead of the correct formula. The derivative of x^(1/3) should be (1/3) * x^(-2/3) = 1/(3 * x^(2/3)) = 1/(3 * (x^(1/3))^2) = 1/(3 * cbrt(x)^2). The code should be 'div(1/3, squared(z))' where z is cbrt(v), but since z is the whole expression, it should use the cube root of v. However, this might actually be correct if z represents cbrt(v).", "file": "./packages/core/src/engine/Autodiff.ts", "line": 133}, {"description": "In the tan derivative calculation, the code calculates 'squared(inverse(cos(v)))' which is (1/cos(v))^2 = sec^2(v). However, the derivative of tan(x) should be sec^2(x) = 1/cos^2(x), which should be 'inverse(squared(cos(v)))' not 'squared(inverse(cos(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 173}, {"description": "In the tanh derivative calculation, the code calculates 'squared(inverse(cosh(v)))' which is (1/cosh(v))^2 = sech^2(v). However, the derivative of tanh(x) should be sech^2(x) = 1/cosh^2(x), which should be 'inverse(squared(cosh(v)))' not 'squared(inverse(cosh(v)))'. While mathematically equivalent, this could cause numerical issues.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 176}, {"description": "In the atan2 derivative calculation, the sensitivities are swapped. For atan2(y, x), the partial derivative with respect to y (first parameter) should be x/(x^2 + y^2), and with respect to x (second parameter) should be -y/(x^2 + y^2). However, the code has them reversed: left (y) gets x/denom and right (x) gets -y/denom.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 208}, {"description": "In the Ternary case sensitivity calculation, the condition sensitivity is set to an empty array [[]] instead of [[0]]. The condition parameter should have zero sensitivity since the derivative of a conditional expression with respect to its boolean condition is typically zero in automatic differentiation.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 253}, {"description": "In the bboxFromPoints function, the reduce operations for minCorner and maxCorner don't provide initial values. If the points array is empty, this will throw a TypeError. The reduce function should have initial values like [Infinity, Infinity] for minCorner and [-Infinity, -Infinity] for maxCorner, or there should be a check to ensure points is not empty.", "file": "./packages/core/src/engine/BBox.ts", "line": 160}, {"description": "In the int function, the range check for 32-bit signed integers is incorrect. The condition checks if n is between -0x80000001 and 0x80000000, but the valid range for 32-bit signed integers should be -0x80000000 to 0x7FFFFFFF. The current check excludes the minimum valid value (-2147483648) and includes an invalid maximum value (2147483648).", "file": "./packages/core/src/utils/Wasm.ts", "line": 94}, {"description": "In the minLoc and maxLoc functions, they throw a generic TypeError when the locs array is empty, but they should provide a more descriptive error message. The functions should throw an error with a meaningful message like 'Cannot find min/max location from empty array' instead of just 'new TypeError()'.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 110}, {"description": "In the convexPolygonMinkowskiSDFOneSided function, there's a potential division by zero error on line 92. The function divides by p1.length without checking if p1 is empty. If p1 is an empty array, this will result in division by zero, which could cause NaN values to propagate through the computation.", "file": "./packages/core/src/contrib/Minkowski.ts", "line": 92}, {"description": "The renderCanvas method returns JSX elements but is declared as async Promise void. The return statements on lines 137 and 170 will cause TypeScript compilation errors since the method should perform DOM manipulation side effects rather than return JSX.", "file": "./packages/components/src/Simple.tsx", "line": 137}, {"description": "In the setState callback on line 85, the code returns `{ ...prev, optStatuses }` but the state interface expects `optimized` not `optStatuses`. This will cause the state update to fail silently and the optimized array will not be updated properly.", "file": "./packages/components/src/Grid.tsx", "line": 85}, {"description": "CSS properties in the H2 styled component are missing hyphens. Lines 93-96 have 'borderbottom', 'marginbottom', and 'fontfamily' which should be 'border-bottom', 'margin-bottom', and 'font-family'. This will cause these styles to be ignored.", "file": "./packages/components/src/Gridbox.tsx", "line": 93}, {"description": "In the onDeselect callback on lines 151-157, the code directly mutates the Set by calling prevRes.delete(i) and then returns the same Set reference. React won't detect this change because the reference hasn't changed. This should create a new Set instead of mutating the existing one.", "file": "./packages/components/src/MultipleChoiceProblem.tsx", "line": 152}, {"description": "In the map function on lines 85-92, the Stage components are missing the 'key' prop which is required for React list rendering. This will cause React to show warnings and potentially have rendering issues when the stages array changes.", "file": "./packages/components/src/StagedDiagram.tsx", "line": 87}, {"description": "On line 103, the code accesses VimMode.Vim.SET_WRITE which appears to be a custom property being set as a hack to prevent multiple definitions. However, this property is being set on the VimMode.Vim object which may not be intended to be mutated and could cause issues if the VimMode library is updated or if multiple instances exist.", "file": "./packages/components/src/editing/EditorPane.tsx", "line": 103}, {"description": "On line 17, there's an import statement `import { Simple } from \"../Simple\"` that's missing the `.js` file extension. This is inconsistent with the ES module setup and other imports in the codebase, and could cause module resolution issues.", "file": "./packages/components/src/editing/TimelineTable.tsx", "line": 17}, {"description": "The code uses the deprecated ReactDOM.render method on line 6. This method was deprecated in React 18 and should be replaced with ReactDOM.createRoot for better performance and to avoid deprecation warnings.", "file": "./packages/components/src/main.tsx", "line": 6}, {"description": "On line 15, there's a typo in the property name 'substancce' which should be 'substance'. This will cause the error example to not work properly as the property name is incorrect.", "file": "./packages/components/src/stories/PenrosePrograms.tsx", "line": 15}, {"description": "On line 38, the code calls compileDomain(domain).unsafelyUnwrap() without error handling. If compileDomain returns an error result, unsafelyUnwrap() will throw an exception and crash the component. This should be wrapped in proper error handling or use a safer unwrapping method.", "file": "./packages/components/src/Listing.tsx", "line": 38}, {"description": "ErrorBoundary component is missing state management and getDerivedStateFromError method. The component should have a state to track error status and implement getDerivedStateFromError to properly handle errors in React. Currently, it only logs errors but doesn't prevent the component tree from crashing.", "file": "./packages/editor/src/main.tsx", "line": 9}, {"description": "Import statement uses .js extension for a TypeScript file. The import './App.js' should be './App' or './App.tsx' since this is a TypeScript project and the actual file is App.tsx.", "file": "./packages/editor/src/main.tsx", "line": 6}, {"description": "Multiple import statements use .js extensions for TypeScript files. All imports from lines 18-29 and 40 should use relative paths without extensions or .tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/App.tsx", "line": 18}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/App.tsx", "line": 304}, {"description": "Missing dependency in useCallback hook. The connectRoger callback uses rogerState, setRogerState, updatedFile, updateTrio, and updateExcludeWarnings but has an empty dependency array. This could lead to stale closures and incorrect behavior.", "file": "./packages/editor/src/App.tsx", "line": 318}, {"description": "Missing dependency in useEffect hook. The useEffect on line 319 calls connectRoger but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 323}, {"description": "Missing dependency in useEffect hook. The useEffect on line 341 calls checkURL but doesn't include it in the dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/App.tsx", "line": 346}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 22, and 23 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/atoms.ts", "line": 8}, {"description": "Potential null pointer exception in gridSizeEffect. The oldValue parameter could be a DefaultValue on first run, but the code casts it directly to DiagramGrid without checking. This could cause a runtime error when accessing properties like gridSize and variations.", "file": "./packages/editor/src/state/atoms.ts", "line": 327}, {"description": "Import statements use .js extensions for TypeScript files. Lines 8, 9, 33, and 34 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/state/callbacks.ts", "line": 8}, {"description": "Missing error handling for JSON.parse in gist loading. If the gist contains malformed JSON in metadata.json, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Potential null pointer exception when accessing gist files. The code assumes gistFiles['metadata.json'], gistFiles['domain'], gistFiles['style'], and gistFiles['substance'] exist without checking. If any of these files are missing from the gist, it will cause a runtime error.", "file": "./packages/editor/src/state/callbacks.ts", "line": 348}, {"description": "Import statements use .js extensions for TypeScript files. Lines 7 and 8 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 7}, {"description": "Missing error handling for DOMParser.parseFromString. If the SVG file contains malformed XML, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/SvgUploader.tsx", "line": 31}, {"description": "Import statements use .js extensions for TypeScript files. Lines 11 and 12 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ProgramEditor.tsx", "line": 11}, {"description": "Import statements use .js extensions for TypeScript files. Lines 26 and 27 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 26}, {"description": "Missing error handling for JSON.parse in WebSocket message handler. If the server sends malformed JSON, this will throw an exception and crash the application. Should wrap JSON.parse in try-catch block.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 96}, {"description": "Missing await for httpResource.text() call. The text() method returns a Promise but is not awaited, which means httpBody will be a Promise object instead of the actual text content. This will cause incorrect data to be stored in localStorage.", "file": "./packages/editor/src/components/DiagramPanel.tsx", "line": 58}, {"description": "Import statements use .js extensions for TypeScript files. Lines 3, 4, and 5 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/Settings.tsx", "line": 3}, {"description": "Missing dependency in useCallback hook. The signOut callback uses setSettings but has an empty dependency array, which could lead to stale closure issues.", "file": "./packages/editor/src/components/Settings.tsx", "line": 12}, {"description": "Import statements use .js extensions for TypeScript files. Lines 4, 5, and 6 import from .js files but should use relative paths without extensions or .ts/.tsx extensions since these are TypeScript files.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 4}, {"description": "Potential null pointer exception when accessing SVG elements. The code uses non-null assertion (!) on line 32 for svgNode without checking if querySelector returns null. If the SVG doesn't contain a valid svg element, this will cause a runtime error.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 32}, {"description": "Missing error handling for DOMParser.parseFromString. If the example.preview contains malformed XML/SVG, the parser may fail silently or throw errors when accessing elements. Should check for parsing errors before proceeding with element access.", "file": "./packages/editor/src/components/ExamplesBrowser.tsx", "line": 30}, {"description": "The `join` function has a potential bug when `parts.pop()` is called on an empty array or when there are more '..' components than directory levels. If `dir` is an empty string or if there are more '..' path components than available directory parts, `parts.pop()` will return undefined but the function will continue processing. This could lead to incorrect path resolution. The function should validate that there are parts to pop before calling `parts.pop()`, or handle the case where the path tries to go above the root directory.", "file": "packages/examples/src/index.ts", "line": 7}, {"description": "Cross-platform path separator issue in codegen.js. The code splits the directory path using `path.sep` (which is '\\' on Windows and '/' on Unix-like systems) but then joins the result using hardcoded '/' separator. This creates inconsistent path handling and could lead to incorrect import paths on Windows systems. The code should use consistent path separators or normalize paths for the target environment.", "file": "packages/examples/codegen.js", "line": 56}, {"description": "Missing error handling for JSON.parse() in codegen.js. If a .trio.json file contains invalid JSON, the JSON.parse() call on line 20 will throw an exception and crash the code generation process. This could happen due to malformed JSON files, encoding issues, or incomplete file writes. The code should wrap JSON.parse() in a try-catch block and provide meaningful error messages indicating which file failed to parse.", "file": "packages/examples/codegen.js", "line": 20}, {"description": "Missing error handling for JSON.parse() when reading registry.json in codegen.js. If the registry.json file contains invalid JSON, the JSON.parse() call on line 80 will throw an exception and crash the code generation process. Additionally, there's no error handling if the registry.json file doesn't exist or can't be read. The code should wrap both the file read and JSON.parse() operations in try-catch blocks with meaningful error messages.", "file": "packages/examples/codegen.js", "line": 80}, {"description": "Missing validation of trio object structure in codegen.js. The code assumes that the parsed trio object has the required properties (substance, style, domain, variation) without validation. If any of these properties are missing or have unexpected types, the code will fail. For example, if `trio.style` is not an array, the `.map()` calls on lines 25 and 33 will throw TypeError. The code should validate the trio object structure before attempting to use its properties.", "file": "packages/examples/codegen.js", "line": 25}, {"description": "Potential array access error in registry.test.ts. The code accesses `style[0]` on line 72 without checking if the `style` array has any elements. If a trio has an empty style array, this will result in accessing undefined and cause a runtime error when trying to destructure the `resolver` property. The code should validate that the style array is not empty before accessing its first element.", "file": "packages/examples/src/registry.test.ts", "line": 72}, {"description": "Missing dependency 'rimraf' in package.json. The build script on line 17 uses 'rimraf dist' but 'rimraf' is not listed in the dependencies or devDependencies. This will cause the build script to fail if rimraf is not globally installed. The package should include rimraf as a devDependency or use an alternative like 'rm -rf' on Unix systems or Node.js built-in fs.rmSync().", "file": "packages/examples/package.json", "line": 17}, {"description": "Unsafe type assertion and potential null reference error in eigenspace.ts. The code on line 13 uses unsafe type assertion `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without checking if `elem.firstChild?.firstChild` is actually an SVGSVGElement or even exists. If the render function doesn't produce the expected DOM structure, this will either return undefined.outerHTML (causing a TypeError) or cast a non-SVG element to SVGSVGElement. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/eigenspace.ts", "line": 13}, {"description": "Unsafe type assertion and potential null reference error in vectors.ts. The code on line 13 uses the same unsafe pattern as eigenspace.ts: `(elem.firstChild?.firstChild as SVGSVGElement).outerHTML` without validating that the element exists or is actually an SVGSVGElement. If the render function doesn't produce the expected DOM structure, this will cause a TypeError when trying to access outerHTML on undefined, or incorrectly cast a non-SVG element. The code should validate the element type and existence before accessing outerHTML.", "file": "packages/examples/src/solid/vectors.ts", "line": 13}, {"description": "Missing error handling for file system operations in codegen.js. The code uses synchronous file system operations (fs.readdirSync, fs.statSync, fs.readFileSync, fs.writeFileSync) without error handling. If any of these operations fail due to permission issues, missing files, disk space problems, or other I/O errors, the script will crash with an unhandled exception. The code should wrap these operations in try-catch blocks to provide meaningful error messages and graceful failure handling.", "file": "packages/examples/codegen.js", "line": 11}, {"description": "Potential code injection vulnerability in codegen.js. The code on lines 95 and 101 uses JSON.stringify() to embed registry keys directly into generated import statements without validation. If a registry key contains malicious content or special characters that could break out of the string context, it could lead to code injection in the generated TypeScript files. While JSON.stringify() provides some protection, the code should validate that registry keys contain only safe characters for file paths and imports.", "file": "packages/examples/codegen.js", "line": 95}, {"description": "Missing validation of registry entry structure in codegen.js. The code assumes that registry entries (variable 'v') are objects without validation. If a registry entry is null, undefined, or a primitive value, accessing properties like 'v.trio' on line 91 or using the 'in' operator on lines 97 and 105 could cause runtime errors. The code should validate that each registry entry is a valid object before processing its properties.", "file": "packages/examples/codegen.js", "line": 91}, {"description": "Non-null assertion on potentially undefined value. The generateProgs function can return undefined when envOrError.isOk() is false (line 25), but line 57 uses a non-null assertion (!) assuming it will always return a value. This could cause a runtime error if the domain compilation fails.", "file": "./packages/edgeworth/src/problems/util.tsx", "line": 57}, {"description": "Unsafe non-null assertion on array.pop(). The code uses ids.pop()! with a non-null assertion, but there's no guarantee that the ids array is non-empty when pop() is called. The while loop condition checks ids.length > 0, but the array could become empty during the loop iteration before pop() is called, potentially causing a runtime error.", "file": "./packages/edgeworth/src/analysis/SubstanceAnalysis.ts", "line": 332}, {"description": "Non-null assertion on potentially undefined value. The code uses type!.name.value with a non-null assertion, but the comment on line 158 indicates 'TODO: enforce the existence of var types', suggesting that type could be undefined. If env.vars.get(id.value) returns undefined, this will cause a runtime error.", "file": "./packages/edgeworth/src/synthesis/Synthesizer.ts", "line": 159}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![0] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the preset domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 307}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no preset entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 329}, {"description": "Non-null assertion on potentially undefined array find result. The code uses find()![1] but Array.find() can return undefined if no matching element is found. This will cause a runtime error if no domain entry matches the current domain.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 335}, {"description": "Non-null assertion on potentially undefined state property. The code uses this.state.setting!.opWeights but setting is declared as 'SynthesizerSetting | undefined' on line 94. This will cause a runtime error if setting is undefined when this code executes.", "file": "./packages/edgeworth/src/components/Settings.tsx", "line": 647}, {"description": "Typo in application name. The 'short_name' field contains 'Edgewroth' instead of 'Edgeworth', which is inconsistent with the 'name' field and the actual application name.", "file": "./packages/edgeworth/public/manifest.json", "line": 2}, {"description": "Using deprecated ReactDOM.render API. The code uses ReactDOM.render which is deprecated in React 18. This should be replaced with ReactDOM.createRoot for React 18 compatibility and to avoid deprecation warnings.", "file": "./packages/edgeworth/src/main.tsx", "line": 6}, {"description": "Critical bug in orderTrio function: using 'for...in' loop on array instead of 'for...of'. The code 'for (const fakeType in unordered)' treats 'fakeType' as array indices (strings '0', '1', '2') rather than the actual filenames. This causes 'unordered[fakeType]' to access array elements correctly by coincidence, but the variable name 'fakeType' suggests it should contain the filename, not the index. This is confusing and could lead to bugs if the code is modified.", "file": "packages/roger/index.ts", "line": 167}, {"description": "Unhandled exception risk: fs.readFileSync called without error handling in resolvePath function. If the resolved file path doesn't exist or is inaccessible, this will throw an unhandled exception that could crash the application. The function should wrap this in a try-catch block and return undefined or handle the error gracefully.", "file": "packages/roger/index.ts", "line": 148}, {"description": "Array bounds violation: stylePrefixes[0] accessed without checking if array is empty. If stylePaths array is empty, stylePrefixes will also be empty, causing stylePrefixes[0] to return undefined, which could lead to unexpected behavior in path resolution.", "file": "packages/roger/index.ts", "line": 132}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when reading trio files. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the application. This occurs in multiple locations in the trio command handler.", "file": "packages/roger/index.ts", "line": 243}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when reading trio files in the trios command. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the application.", "file": "packages/roger/index.ts", "line": 321}, {"description": "WebSocket server crash risk: JSON.parse called without error handling on incoming WebSocket messages. If a client sends malformed JSON, this will throw an unhandled SyntaxError that could crash the WebSocket server, affecting all connected clients.", "file": "packages/roger/watch.ts", "line": 55}, {"description": "JSON parsing without error handling: JSON.parse called without try-catch block when parsing trio file contents in WebSocket message handler. If the trio file contains malformed JSON, this will throw an unhandled SyntaxError that could crash the WebSocket server.", "file": "packages/roger/watch.ts", "line": 71}, {"description": "Potential undefined access: p.split('.').pop() could return undefined if the path doesn't contain a dot, but this value is used directly in string comparisons and switch statements without null checks. This could lead to unexpected behavior when processing files without extensions.", "file": "packages/roger/watch.ts", "line": 129}, {"description": "File system operations without error handling: fs.readFileSync calls in readTrio function don't have proper error handling. If any of the trio files (substance, style, or domain) don't exist or are inaccessible, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 154}, {"description": "File write operation without error handling: fs.writeFileSync called without try-catch block when saving output file. If the output directory doesn't exist, lacks write permissions, or disk is full, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 280}, {"description": "File write operation without error handling: fs.writeFileSync called without try-catch block when saving SVG files in trios command. If the output directory lacks write permissions or disk is full, this will throw an unhandled exception that could crash the application.", "file": "packages/roger/index.ts", "line": 351}, {"description": "Potential undefined access: p.split('.').pop() could return undefined if the path doesn't contain a dot, but this value is used directly in switch statement without null checks. This occurs in the file unlink handler and could lead to unexpected behavior when processing files without extensions.", "file": "packages/roger/watch.ts", "line": 160}, {"description": "Directory creation without error handling: fs.mkdirSync called without try-catch block. If the parent directory doesn't exist or lacks write permissions, this will throw an unhandled exception that could crash the application. The function should use recursive option or proper error handling.", "file": "packages/roger/index.ts", "line": 348}, {"description": "Import path mismatch: App.tsx imports 'eigenvectors.jsx' but the actual file is 'eigenvectors.tsx'. This will cause a module resolution error since the .jsx file doesn't exist.", "file": "./packages/solids/src/App.tsx", "line": 1}, {"description": "Import path mismatch in commented code: The commented import on line 4 references 'triangles.jsx' but the actual file is 'triangles.tsx'. This would cause a module resolution error if uncommented.", "file": "./packages/solids/src/App.tsx", "line": 4}, {"description": "Missing import for 'seedrandom': The code imports 'seedrandom' on line 16 but this package is not listed in the dependencies in package.json. This will cause a module resolution error at runtime.", "file": "./packages/solids/src/util.ts", "line": 16}, {"description": "Import path mismatch: closedElasticCurve.tsx imports 'Slider.jsx' on line 16 but the actual file is 'Slider.tsx'. This will cause a module resolution error.", "file": "./packages/solids/src/closedElasticCurve.tsx", "line": 16}, {"description": "Missing import for 'seedrandom': The code imports 'seedrandom' on line 14 but this package is not listed in the dependencies in package.json. This will cause a module resolution error at runtime.", "file": "./packages/solids/src/closedElasticCurve.tsx", "line": 14}, {"description": "Missing import for 'seedrandom': The code imports 'seedrandom' on line 13 but this package is not listed in the dependencies in package.json. This will cause a module resolution error at runtime.", "file": "./packages/solids/src/texts.tsx", "line": 13}, {"description": "Invalid SVG attribute: 'fill-color' is not a valid SVG attribute on line 153. The correct attribute should be 'fill'. This will cause the text color to not be applied correctly.", "file": "./packages/solids/src/triangles.tsx", "line": 153}, {"description": "Import path mismatch: main.tsx imports 'App.js' on line 4 but the actual file is 'App.tsx'. This will cause a module resolution error.", "file": "./packages/solids/src/main.tsx", "line": 4}, {"description": "Variable scope issue: The variable 'frame' is declared with 'let' on line 70 but is also assigned on line 66 inside the loop function. This creates a potential issue where the frame variable might be undefined when accessed in the loop, leading to incorrect behavior in animation frame management.", "file": "./packages/solids/src/closedElasticCurve.tsx", "line": 66}, {"description": "Invalid script command: The 'build' script on line 27 uses ':' which is a no-op command. While this might be intentional, it could indicate that the build script is incomplete or misconfigured, potentially causing build failures.", "file": "./packages/solids/package.json", "line": 27}, {"description": "Invalid script command: The 'typecheck' script on line 32 uses ':' which is a no-op command. While this might be intentional, it could indicate that the typecheck script is incomplete or misconfigured, potentially causing type checking to be skipped.", "file": "./packages/solids/package.json", "line": 32}, {"description": "Incorrect regex pattern in Vim syntax file for substance strings. Line 19 uses '[^$]*' inside double quotes but should use '[^\"]*' to match characters that are not double quotes. The current pattern matches characters that are not dollar signs, which is incorrect for double-quoted strings.", "file": "util/vim/syntax/substance.vim", "line": 19}, {"description": "Outdated keywords in Emacs syntax highlighting. The Emacs configuration uses 'tconstructor', 'operator', 'vconstructor', and 'display' keywords that don't match the current VS Code grammar which uses 'symmetric', 'constructor', 'function', and 'Prop'. This inconsistency means Emacs users won't get proper syntax highlighting for current Penrose domain files.", "file": "util/emacs/penrose-modes.el", "line": 27}, {"description": "Incomplete keywords in Vim domain syntax highlighting. The Vim configuration is missing 'symmetric', 'value', and 'Prop' keywords that are present in the VS Code grammar. This means Vim users won't get proper syntax highlighting for these valid Penrose domain keywords.", "file": "util/vim/syntax/domain.vim", "line": 11}, {"description": "Invalid regex pattern in VS Code style grammar. Line 46 uses '^\\\\b' which is incorrect - the caret (^) matches start of line and word boundary (\\\\b) matches word boundaries, but combining them like this doesn't make sense. The pattern should either use '^' for start of line or '\\\\b' for word boundary, but not both together. This could cause the type keywords to not be highlighted properly when they don't appear at the start of a line.", "file": "packages/vscode/syntaxes/style.tmGrammar.json", "line": 46}, {"description": "Undefined syntax group in Vim style syntax file. Line 56 references 'styLabelKeyword' in the highlight link definition, but this syntax group is never defined anywhere in the file. This will cause Vim to show an error or warning when loading the syntax file.", "file": "util/vim/syntax/style.vim", "line": 56}, {"description": "The setup action hardcodes the architecture as x86_64-unknown-linux-musl when downloading wasm-bindgen. This will fail on non-x86_64 GitHub runners (like ARM-based runners) and could cause the workflow to crash. The wget command also lacks error handling.", "file": ".github/actions/setup/action.yml", "line": 15}, {"description": "JSON.parse is called without error handling, which will cause the script to crash with an uncaught exception if the trio.json file contains malformed JSON. This could happen due to file corruption or incomplete writes.", "file": ".github/gen_readme.js", "line": 12}, {"description": "execFileSync is called without error handling, which will cause the script to crash with an uncaught exception if the 'roger' command is not found in PATH or if the command execution fails for any reason.", "file": ".github/gen_readme.js", "line": 16}, {"description": "Multiple file system operations (fs.readFileSync, fs.writeFileSync) are called without error handling. These will cause the script to crash with uncaught exceptions if files don't exist, have permission issues, or if there are disk space problems.", "file": ".github/gen_readme.js", "line": 8}, {"description": "The git command uses xargs with newline delimiter (-d '\\n') but this may not work on all systems (particularly macOS) where xargs doesn't support the -d flag. This could cause the delete-branches workflow to fail on different runner types.", "file": ".github/workflows/delete-branches.yml", "line": 21}, {"description": "The git checkout command uses github.ref directly in the branch name without sanitization. If github.ref contains special characters or shell metacharacters, this could cause command injection or unexpected behavior. Branch names should be sanitized before use in shell commands.", "file": ".github/workflows/build.yml", "line": 93}, {"description": "The action uses a pinned commit SHA (17f29510f1bf987b916c8cbb451566a56eed23f1) instead of a tagged version. If this specific commit is compromised or becomes unavailable, it could pose a security risk or cause workflow failures. It's better to use tagged versions for third-party actions.", "file": ".github/workflows/build.yml", "line": 147}, {"description": "The npm publish command runs without error handling and will continue to the next step even if publishing fails. If npm publish fails for some packages but succeeds for others, this could lead to inconsistent package versions being published. The workflow should check the exit status and handle failures appropriately.", "file": ".github/workflows/release.yml", "line": 18}], "updated_files": {}}
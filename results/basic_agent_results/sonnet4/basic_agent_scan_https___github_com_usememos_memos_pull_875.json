{"repo_id": "usememos_memos_875", "bugs": [{"description": "Potential ReDoS (Regular Expression Denial of Service) vulnerability in TEXT filter. When a user provides a regex pattern starting with '^', the code creates a new RegExp without any validation or timeout. A malicious regex pattern could cause the application to hang or consume excessive CPU resources.", "file": "./web/src/helpers/filter.ts", "line": 189}, {"description": "Potential ReDoS vulnerability in polyfill. The replaceAll polyfill creates a new RegExp with the 'g' flag without escaping special regex characters. If 'str' contains regex metacharacters like '.', '*', '+', etc., they will be interpreted as regex patterns rather than literal strings, which could lead to unexpected behavior or ReDoS attacks.", "file": "./web/src/helpers/polyfill.ts", "line": 10}, {"description": "Potential security vulnerability due to unsafe JSON.parse usage. The code parses localStorage values without validation, which could lead to prototype pollution or code execution if malicious JSON is stored in localStorage (e.g., through XSS or browser extension manipulation).", "file": "./web/src/helpers/storage.ts", "line": 33}, {"description": "XSS vulnerability in parseHTMLToRawText function. The function directly assigns user-provided HTML string to innerHTML without sanitization, which could execute malicious scripts if the htmlStr parameter contains script tags or other dangerous HTML elements.", "file": "./web/src/helpers/utils.ts", "line": 133}, {"description": "Stale closure bug in useLoading hook. The setState functions capture the initial state value in their closure, causing state updates to overwrite other concurrent state changes. This can lead to race conditions where multiple rapid state updates result in lost state changes.", "file": "./web/src/hooks/useLoading.ts", "line": 8}, {"description": "XSS vulnerability in highlighter. The function creates a RegExp with user input without proper escaping for regex metacharacters, and then uses innerHTML to insert the result. Even though the keyword is escaped with lodash.escape, regex metacharacters are not escaped, which could lead to ReDoS attacks or unexpected behavior.", "file": "./web/src/labs/highlighter/index.ts", "line": 6}, {"description": "SSRF (Server-Side Request Forgery) vulnerability and missing error handling. The function accepts any URL without validation and makes fetch requests to it, which could be exploited to access internal services or perform unauthorized requests. Additionally, there's no error handling for failed fetch requests or FileReader operations.", "file": "./web/src/labs/html2image/convertResourceToDataURL.ts", "line": 8}, {"description": "Multiple security vulnerabilities: 1) URL injection vulnerability on line 19 where user-controlled URL is concatenated without encoding, allowing attackers to manipulate the backend request. 2) XSS vulnerability on line 38 where innerHTML is directly copied without sanitization, potentially executing malicious scripts in the cloned element.", "file": "./web/src/labs/html2image/getCloneStyledElement.ts", "line": 19}, {"description": "XSS vulnerability in CodeBlock renderer. The highlightedCode from hljs.highlightAuto() and hljs.highlight() is inserted directly into HTML without additional sanitization. While highlight.js generally produces safe HTML, there could be edge cases or vulnerabilities in the highlighting library that could lead to XSS attacks.", "file": "./web/src/labs/marked/parser/CodeBlock.ts", "line": 29}], "updated_files": {}}
{"repo_id": "reactjs_react-modal_778", "bugs": [{"description": "Equality comparison using == instead of === on line 285. This can lead to unexpected type coercion behavior. The condition `event.target == this.overlay` should use strict equality (===) to avoid potential bugs when comparing DOM elements.", "file": "src/components/ModalPortal.js", "line": 285}, {"description": "Equality comparison using == instead of === on lines 96 and 109. The conditions `element.nodeName.toLowerCase() == \"html\"` should use strict equality (===) to avoid potential type coercion issues when comparing strings.", "file": "src/helpers/classList.js", "line": 96}, {"description": "Variable 'target' is used before declaration on line 20. The variable is declared with 'var' on line 23, but due to hoisting, it's being assigned before the declaration is reached in the code flow. This should be moved after the declaration or the declaration should be moved up.", "file": "src/helpers/scopeTab.js", "line": 20}, {"description": "Equality comparison using != instead of !== on lines 51, 52, and 53. These should use strict inequality (!==) to avoid type coercion issues when comparing strings and null values in browser detection logic.", "file": "src/helpers/scopeTab.js", "line": 51}, {"description": "Equality comparison using == instead of === on line 27. The condition `style.getPropertyValue(\"display\") == \"none\"` should use strict equality (===) to avoid potential type coercion issues when comparing CSS property values.", "file": "src/helpers/tabbable.js", "line": 27}, {"description": "Potential null reference error on line 119. If isReact16 is true, this.node is not initialized in componentDidMount, but line 119 tries to access this.node.className. This will cause a runtime error when using React 16+ because this.node will be undefined at this point.", "file": "src/components/Modal.js", "line": 119}, {"description": "Potential race condition and null reference error in removePortal method on lines 176-177. The removePortal method can be called via setTimeout after the component has unmounted, but it accesses this.props.parentSelector and this.node without checking if they still exist. This could cause errors if the component is unmounted before the timeout executes.", "file": "src/components/Modal.js", "line": 176}, {"description": "Missing DOM node setup in render method. On line 200, this.node is created but never added to the DOM. Unlike componentDidMount which calls parent.appendChild(this.node), the render method creates the node but doesn't append it to the parent element, which could cause the portal to render into a detached DOM node.", "file": "src/components/Modal.js", "line": 200}, {"description": "Logic error in focus condition on line 109. The condition checks this.state.isOpen, but in the componentDidUpdate lifecycle, this.state.isOpen might not be set correctly since the state is managed differently in the open() method. The condition should check this.state.afterOpen instead of this.state.isOpen for proper focus management.", "file": "src/components/ModalPortal.js", "line": 109}, {"description": "Potential null reference error on line 23. The code checks modalElement.contains(document.activeElement) without first verifying that document.activeElement is not null. In some browsers or edge cases, document.activeElement can be null, which would cause the contains() method to throw an error.", "file": "src/helpers/focusManager.js", "line": 23}], "updated_files": {}}
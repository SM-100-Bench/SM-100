{"repo_id": "foliojs_pdfkit_1023", "bugs": [{"description": "Incorrect boolean assignment for wordSpacing. The line `this.wordSpacing = options.wordSpacing === 0;` sets wordSpacing to a boolean value (true if options.wordSpacing is exactly 0, false otherwise), but wordSpacing should be a numeric value for spacing calculations. This will cause type errors in arithmetic operations where wordSpacing is used (e.g., line 72 where it's added to other numeric values).", "file": "lib/line_wrapper.js", "line": 10}, {"description": "Potential array access with negative index. In the addSegment function, `positions[cur - 1]` is accessed without checking if `cur` is greater than 0. When `cur` is 0, this becomes `positions[-1]` which returns undefined, causing a runtime error when trying to access `.xAdvance` and `.advanceWidth` properties on undefined.", "file": "lib/mixins/text.js", "line": 447}, {"description": "Logic error with columns initialization that can cause arithmetic errors. Lines 226-227 set `result.columns = 0` when columns is falsy, but the LineWrapper constructor uses `this.columns` in calculations like `this.columns - 1` (line 14) and comparisons like `this.column >= this.columns` (line 211). When columns is 0, these operations result in -1 and always-true comparisons respectively, leading to incorrect behavior in column layout calculations.", "file": "lib/mixins/text.js", "line": 227}, {"description": "Inconsistent textWidth calculation after ellipsis handling. After adding the ellipsis to the buffer (line 227), the code recalculates textWidth using only the buffer without the ellipsis (line 230: `textWidth = this.wordWidth(buffer)`). However, at this point buffer includes the ellipsis, so the calculation should account for the complete buffer. This inconsistency could lead to incorrect width calculations for subsequent text positioning.", "file": "lib/line_wrapper.js", "line": 230}, {"description": "Potential division by zero error in word breaking logic. At line 107, the code calculates `l = Math.ceil(this.spaceLeft / (w / word.length))`. If `w` (word width) is 0, this results in division by zero (w / word.length = 0 / word.length = 0), causing `this.spaceLeft / 0` which evaluates to Infinity. Math.ceil(Infinity) returns Infinity, which when used as an array index in `word.slice(0, l)` could cause unexpected behavior.", "file": "lib/line_wrapper.js", "line": 107}, {"description": "Potential division by zero in text justification. At lines 276-280, when calculating word spacing for justified text, the code uses `Math.max(1, words.length - 1)` as a divisor. However, if `words.length` is 0 (which can happen if `text.trim().split(/\\s+/)` results in an empty array when text contains only whitespace), then `words.length - 1` equals -1, and `Math.max(1, -1)` equals 1. While this prevents division by zero, it creates incorrect word spacing calculations for empty or whitespace-only text.", "file": "lib/mixins/text.js", "line": 278}, {"description": "Potential array access error when positions array is empty. At line 425, the code accesses `positions[positions.length - 1]` without checking if the positions array has any elements. If `positions` is empty (which can happen if all words in the text result in empty encoded arrays), then `positions.length - 1` equals -1, causing `positions[-1]` to return undefined. This will cause a runtime error when trying to iterate over `object` properties in the for-in loop at line 426.", "file": "lib/mixins/text.js", "line": 425}, {"description": "Incorrect boolean assignment for wordSpacing. The line `this.wordSpacing = options.wordSpacing === 0;` sets wordSpacing to a boolean value (true if options.wordSpacing is exactly 0, false otherwise), but wordSpacing should be a numeric value for spacing calculations. This will cause type errors in arithmetic operations where wordSpacing is used (e.g., line 72 where it's added to other numeric values).", "file": "lib/line_wrapper.js", "line": 10}, {"description": "Potential array access with negative index. In the addSegment function, `positions[cur - 1]` is accessed without checking if `cur` is greater than 0. When `cur` is 0, this becomes `positions[-1]` which returns undefined, causing a runtime error when trying to access `.xAdvance` and `.advanceWidth` properties on undefined.", "file": "lib/mixins/text.js", "line": 447}, {"description": "Logic error with columns initialization that can cause arithmetic errors. Lines 226-227 set `result.columns = 0` when columns is falsy, but the LineWrapper constructor uses `this.columns` in calculations like `this.columns - 1` (line 14) and comparisons like `this.column >= this.columns` (line 211). When columns is 0, these operations result in -1 and always-true comparisons respectively, leading to incorrect behavior in column layout calculations.", "file": "lib/mixins/text.js", "line": 227}, {"description": "Inconsistent textWidth calculation after ellipsis handling. After adding the ellipsis to the buffer (line 227), the code recalculates textWidth using only the buffer without the ellipsis (line 230: `textWidth = this.wordWidth(buffer)`). However, at this point buffer includes the ellipsis, so the calculation should account for the complete buffer. This inconsistency could lead to incorrect width calculations for subsequent text positioning.", "file": "lib/line_wrapper.js", "line": 230}, {"description": "Potential division by zero error in word breaking logic. At line 107, the code calculates `l = Math.ceil(this.spaceLeft / (w / word.length))`. If `w` (word width) is 0, this results in division by zero (w / word.length = 0 / word.length = 0), causing `this.spaceLeft / 0` which evaluates to Infinity. Math.ceil(Infinity) returns Infinity, which when used as an array index in `word.slice(0, l)` could cause unexpected behavior.", "file": "lib/line_wrapper.js", "line": 107}, {"description": "Potential division by zero in text justification. At lines 276-280, when calculating word spacing for justified text, the code uses `Math.max(1, words.length - 1)` as a divisor. However, if `words.length` is 0 (which can happen if `text.trim().split(/\\s+/)` results in an empty array when text contains only whitespace), then `words.length - 1` equals -1, and `Math.max(1, -1)` equals 1. While this prevents division by zero, it creates incorrect word spacing calculations for empty or whitespace-only text.", "file": "lib/mixins/text.js", "line": 278}, {"description": "Potential array access error when positions array is empty. At line 425, the code accesses `positions[positions.length - 1]` without checking if the positions array has any elements. If `positions` is empty (which can happen if all words in the text result in empty encoded arrays), then `positions.length - 1` equals -1, causing `positions[-1]` to return undefined. This will cause a runtime error when trying to iterate over `object` properties in the for-in loop at line 426.", "file": "lib/mixins/text.js", "line": 425}, {"description": "Deprecated Buffer constructor usage. Line 9 uses 'new Buffer()' which is deprecated and potentially unsafe. Should use 'Buffer.from()' instead to avoid security vulnerabilities and deprecation warnings.", "file": "tests/integration/helpers.js", "line": 9}, {"description": "Potential array bounds access issue. The code finds the first occurrence of chunk[0] in data but doesn't verify that there's enough space in the data array to contain the entire chunk starting from that position. If headIndex + chunk.length exceeds data.length, this could cause an out-of-bounds access when comparing elements in the loop.", "file": "tests/unit/toContainChunk/index.js", "line": 38}, {"description": "Incorrect CMYK color normalization. Lines 18-23 and 31-36 show CMYK color values being normalized incorrectly. CMYK values should be normalized to 0-1 range by dividing by 100, but the code appears to be dividing by 100 and then multiplying by 100 again (e.g., 255/100 = 2.55). This will result in incorrect color values in the PDF output.", "file": "tests/unit/color.spec.js", "line": 18}, {"description": "Deprecated Buffer constructor usage. Lines 39 and 58 use 'new Buffer()' which is deprecated and potentially unsafe. Should use 'Buffer.from()' instead to avoid security vulnerabilities and deprecation warnings.", "file": "tests/unit/reference.spec.js", "line": 39}, {"description": "Deprecated Buffer constructor usage. Lines 18 and 50 use 'new Buffer()' with encoding parameter which is deprecated and potentially unsafe. Should use 'Buffer.from()' instead to avoid security vulnerabilities and deprecation warnings.", "file": "tests/unit/text.spec.js", "line": 18}, {"description": "Deprecated Buffer constructor usage. Line 7 uses 'new Buffer()' which is deprecated and potentially unsafe. Should use 'Buffer.from()' instead to avoid security vulnerabilities and deprecation warnings.", "file": "tests/unit/annotations.spec.js", "line": 7}, {"description": "Deprecated Buffer constructor usage. Line 7 uses 'new Buffer()' which is deprecated and potentially unsafe. Should use 'Buffer.from()' instead to avoid security vulnerabilities and deprecation warnings.", "file": "tests/unit/trailer.spec.js", "line": 7}, {"description": "Deprecated Buffer constructor usage. Lines 17, 42, 67, and 92 use 'new Buffer()' with encoding parameter which is deprecated and potentially unsafe. Should use 'Buffer.from()' instead to avoid security vulnerabilities and deprecation warnings.", "file": "tests/unit/vector.spec.js", "line": 17}], "updated_files": {}}
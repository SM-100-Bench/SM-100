{"repo_id": "socketio_socket.io_4773", "bugs": [{"description": "In the sendFile method, there's a double pipe operation for the 'br' encoding case. Line 640 uses readStream.pipe(createBrotliCompress()).pipe(res) and then line 641 uses pipeline(readStream, createBrotliCompress(), res, onError). This creates two separate streams from the same readStream, which can cause data corruption, resource leaks, and unpredictable behavior. The pipe() call on line 640 should be removed.", "file": "lib/index.ts", "line": 640}, {"description": "Race condition in broadcast acknowledgement handling. The serverCount() method is asynchronous and returns a Promise, but checkCompleteness() can be called before expectedServerCount is set. If all servers respond and all clients acknowledge before the serverCount() Promise resolves, the acknowledgement callback will never be called because expectedServerCount is still -1. This can cause the operation to hang indefinitely even when all responses have been received.", "file": "lib/broadcast-operator.ts", "line": 282}, {"description": "Missing type annotation for 'conn' parameter in onconnection method. This parameter should be typed as it represents an Engine.IO socket connection, but the lack of typing could lead to runtime errors if the wrong type of object is passed or if the object doesn't have expected properties.", "file": "lib/index.ts", "line": 676}, {"description": "In the sendFile method, there's a double pipe operation for the 'br' encoding case. Line 640 uses readStream.pipe(createBrotliCompress()).pipe(res) and then line 641 uses pipeline(readStream, createBrotliCompress(), res, onError). This creates two separate streams from the same readStream, which can cause data corruption, resource leaks, and unpredictable behavior. The pipe() call on line 640 should be removed.", "file": "lib/index.ts", "line": 640}, {"description": "Race condition in broadcast acknowledgement handling. The serverCount() method is asynchronous and returns a Promise, but checkCompleteness() can be called before expectedServerCount is set. If all servers respond and all clients acknowledge before the serverCount() Promise resolves, the acknowledgement callback will never be called because expectedServerCount is still -1. This can cause the operation to hang indefinitely even when all responses have been received.", "file": "lib/broadcast-operator.ts", "line": 282}, {"description": "Missing type annotation for 'conn' parameter in onconnection method. This parameter should be typed as it represents an Engine.IO socket connection, but the lack of typing could lead to runtime errors if the wrong type of object is passed or if the object doesn't have expected properties.", "file": "lib/index.ts", "line": 676}, {"description": "Duplicate test case with identical description. Both test cases on lines 16 and 44 have the same description 'should be able to close sio sending a srv' but test different scenarios (one with httpServer, one without). This could cause confusion and makes it unclear which test is failing if one fails. The second test should have a different, more descriptive name.", "file": "test/close.ts", "line": 44}, {"description": "Duplicate event listener registration in test case. Lines 118-121 register the same event listener twice for the '/news' namespace connection event, which could cause the test to fail or behave unexpectedly. The second registration should likely be for the '/chat' namespace instead.", "file": "test/namespaces.ts", "line": 118}, {"description": "Duplicate test case with identical description. Both test cases on lines 111 and 124 have the same description 'should handle 304' but test different scenarios (one with regular ETag, one with weak ETag). This could cause confusion and makes it unclear which test is failing if one fails. The second test should have a different, more descriptive name like 'should handle 304 with weak ETag'.", "file": "test/server-attachment.ts", "line": 124}], "updated_files": {}}
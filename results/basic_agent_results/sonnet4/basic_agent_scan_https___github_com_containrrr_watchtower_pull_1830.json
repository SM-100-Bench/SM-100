{"repo_id": "containrrr_watchtower_1830", "bugs": [{"description": "Incorrect format verb %e used for error formatting. The %e verb is for floating-point numbers in scientific notation, not errors. This should be %v or %w for proper error formatting.", "file": "internal/flags/flags.go", "line": 667}, {"description": "Potential panic due to accessing scheduler.Entries()[0] without checking if the slice is empty. If the scheduler has no entries, this will cause an index out of bounds panic.", "file": "cmd/root.go", "line": 343}, {"description": "Using hardcoded root directory '/' as temp directory is not cross-platform compatible and will fail on Windows systems. Should use os.TempDir() or an empty string to use the system's default temp directory.", "file": "cmd/notify-upgrade.go", "line": 44}, {"description": "Incorrect character literal used in WriteRune. The code uses a single quote character (') instead of a space character (' '). This will write the wrong character to the string builder.", "file": "cmd/notify-upgrade.go", "line": 56}, {"description": "Program exits with error code 1 at the end of the Run function even when execution completes successfully. This indicates failure to external processes when the program actually succeeded. Should exit with code 0 for success or remove the exit call entirely.", "file": "cmd/root.go", "line": 210}, {"description": "Flawed logic in isFile function for detecting Windows drive paths. The condition 'firstColon != 1 && firstColon != -1' incorrectly rejects valid Windows paths. For a path like 'C:\\file.txt', firstColon would be 1, but for 'C:file.txt' it would also be 1. The logic should check if firstColon == 1 AND the string length is > 2 to properly detect Windows drive letters.", "file": "internal/flags/flags.go", "line": 574}, {"description": "Potential null pointer dereference. If container.GetRunningContainerID() returns a non-nil error but cid is not properly initialized to nil, the check 'if cid != \"\"' on line 70 could panic when calling cid.ShortID() on line 71. The code should check if cid is nil before calling methods on it.", "file": "cmd/notify-upgrade.go", "line": 70}, {"description": "Incorrect format verb %e used for error formatting. The %e verb is for floating-point numbers in scientific notation, not errors. This should be %v or %w for proper error formatting.", "file": "internal/flags/flags.go", "line": 667}, {"description": "Potential panic due to accessing scheduler.Entries()[0] without checking if the slice is empty. If the scheduler has no entries, this will cause an index out of bounds panic.", "file": "cmd/root.go", "line": 343}, {"description": "Using hardcoded root directory '/' as temp directory is not cross-platform compatible and will fail on Windows systems. Should use os.TempDir() or an empty string to use the system's default temp directory.", "file": "cmd/notify-upgrade.go", "line": 44}, {"description": "Incorrect character literal used in WriteRune. The code uses a single quote character (') instead of a space character (' '). This will write the wrong character to the string builder.", "file": "cmd/notify-upgrade.go", "line": 56}, {"description": "Program exits with error code 1 at the end of the Run function even when execution completes successfully. This indicates failure to external processes when the program actually succeeded. Should exit with code 0 for success or remove the exit call entirely.", "file": "cmd/root.go", "line": 210}, {"description": "Flawed logic in isFile function for detecting Windows drive paths. The condition 'firstColon != 1 && firstColon != -1' incorrectly rejects valid Windows paths. For a path like 'C:\\file.txt', firstColon would be 1, but for 'C:file.txt' it would also be 1. The logic should check if firstColon == 1 AND the string length is > 2 to properly detect Windows drive letters.", "file": "internal/flags/flags.go", "line": 574}, {"description": "Potential null pointer dereference. If container.GetRunningContainerID() returns a non-nil error but cid is not properly initialized to nil, the check 'if cid != \"\"' on line 70 could panic when calling cid.ShortID() on line 71. The code should check if cid is nil before calling methods on it.", "file": "cmd/notify-upgrade.go", "line": 70}, {"description": "Potential nil pointer dereference in ImageID() method. The method accesses c.imageInfo.ID without checking if c.imageInfo is nil, which could cause a panic. The comment on line 87 acknowledges this issue, and there's already a SafeImageID() method that handles this case properly. The ImageID() method should either check for nil or the callers should use SafeImageID() instead.", "file": "pkg/container/container.go", "line": 89}, {"description": "Potential index out of bounds error in GetCreateHostConfig() method. The code uses strings.Index(link, \":\") and strings.LastIndex(link, \"/\") without checking if these characters exist in the string. If either character is not found, these functions return -1, which would cause a slice operation with negative indices, leading to a panic. The code should check that both indices are >= 0 before using them in slice operations.", "file": "pkg/container/container.go", "line": 356}, {"description": "Potential nil pointer dereference in waitForExecOrTimeout() method. The code logs fields from execInspect (lines 512-517) before checking if err != nil (line 519). If ContainerExecInspect returns an error, execInspect could be nil or contain invalid data, but the logging code accesses its fields unconditionally. The error check should be moved before the logging statement to prevent accessing potentially nil or invalid data.", "file": "pkg/container/client.go", "line": 512}, {"description": "Potential nil pointer dereference in metadata access methods. The methods getLabelValueOrEmpty(), getLabelValue(), and getBoolLabelValue() access c.containerInfo.Config.Labels without checking if containerInfo, Config, or Labels are nil. If any of these are nil, the code will panic. These methods should include nil checks before accessing the nested fields.", "file": "pkg/container/metadata.go", "line": 50}, {"description": "Potential index out of bounds error in filter functions. Both FilterByNames() and FilterByDisableNames() use c.Name()[1:] without checking if the container name has at least 2 characters. If c.Name() returns an empty string or a single character, this slice operation will panic. The code should check len(c.Name()) > 1 before attempting to slice from index 1.", "file": "pkg/filters/filters.go", "line": 24}, {"description": "Potential nil pointer dereference in StopContainer() method. On line 205, the code accesses c.ContainerInfo().HostConfig.AutoRemove without checking if ContainerInfo() or HostConfig are nil. If either is nil, this will cause a panic. The code should include nil checks before accessing nested fields.", "file": "pkg/container/client.go", "line": 205}, {"description": "Potential index out of bounds error in Links() method. On line 193, the code uses strings.Split(link, \":\")[0] without checking if the split operation returns at least one element. If the link string is empty, strings.Split will return a slice with one empty string, which is safe. However, if there are any edge cases where Split could return an empty slice, this would cause a panic. While this is less likely with strings.Split, it's still a potential risk.", "file": "pkg/container/container.go", "line": 193}, {"description": "Potential nil pointer dereference in GetContainer() method. On line 160, the code accesses containerInfo.HostConfig.NetworkMode without checking if HostConfig is nil. While containerInfo is checked for errors from ContainerInspect, the HostConfig field could potentially be nil, which would cause a panic when accessing NetworkMode.", "file": "pkg/container/client.go", "line": 160}, {"description": "Potential index out of bounds error in FilterByImage() method. On line 111, the code uses strings.Split(c.ImageName(), \":\")[0] without checking if the split operation returns at least one element. While strings.Split typically returns at least one element even for empty strings, if c.ImageName() returns an empty string, this should still be safe. However, it's a similar pattern to the previous issue and could be made more robust with bounds checking.", "file": "pkg/filters/filters.go", "line": 111}, {"description": "Incorrect format verb %e used for error formatting. The %e verb is for floating-point numbers in scientific notation, not errors. This should be %v or %w for proper error formatting.", "file": "internal/flags/flags.go", "line": 667}, {"description": "Potential panic due to accessing scheduler.Entries()[0] without checking if the slice is empty. If the scheduler has no entries, this will cause an index out of bounds panic.", "file": "cmd/root.go", "line": 343}, {"description": "Using hardcoded root directory '/' as temp directory is not cross-platform compatible and will fail on Windows systems. Should use os.TempDir() or an empty string to use the system's default temp directory.", "file": "cmd/notify-upgrade.go", "line": 44}, {"description": "Incorrect character literal used in WriteRune. The code uses a single quote character (') instead of a space character (' '). This will write the wrong character to the string builder.", "file": "cmd/notify-upgrade.go", "line": 56}, {"description": "Program exits with error code 1 at the end of the Run function even when execution completes successfully. This indicates failure to external processes when the program actually succeeded. Should exit with code 0 for success or remove the exit call entirely.", "file": "cmd/root.go", "line": 210}, {"description": "Flawed logic in isFile function for detecting Windows drive paths. The condition 'firstColon != 1 && firstColon != -1' incorrectly rejects valid Windows paths. For a path like 'C:\\file.txt', firstColon would be 1, but for 'C:file.txt' it would also be 1. The logic should check if firstColon == 1 AND the string length is > 2 to properly detect Windows drive letters.", "file": "internal/flags/flags.go", "line": 574}, {"description": "Potential null pointer dereference. If container.GetRunningContainerID() returns a non-nil error but cid is not properly initialized to nil, the check 'if cid != \"\"' on line 70 could panic when calling cid.ShortID() on line 71. The code should check if cid is nil before calling methods on it.", "file": "cmd/notify-upgrade.go", "line": 70}, {"description": "Potential nil pointer dereference in ImageID() method. The method accesses c.imageInfo.ID without checking if c.imageInfo is nil, which could cause a panic. The comment on line 87 acknowledges this issue, and there's already a SafeImageID() method that handles this case properly. The ImageID() method should either check for nil or the callers should use SafeImageID() instead.", "file": "pkg/container/container.go", "line": 89}, {"description": "Potential index out of bounds error in GetCreateHostConfig() method. The code uses strings.Index(link, \":\") and strings.LastIndex(link, \"/\") without checking if these characters exist in the string. If either character is not found, these functions return -1, which would cause a slice operation with negative indices, leading to a panic. The code should check that both indices are >= 0 before using them in slice operations.", "file": "pkg/container/container.go", "line": 356}, {"description": "Potential nil pointer dereference in waitForExecOrTimeout() method. The code logs fields from execInspect (lines 512-517) before checking if err != nil (line 519). If ContainerExecInspect returns an error, execInspect could be nil or contain invalid data, but the logging code accesses its fields unconditionally. The error check should be moved before the logging statement to prevent accessing potentially nil or invalid data.", "file": "pkg/container/client.go", "line": 512}, {"description": "Potential nil pointer dereference in metadata access methods. The methods getLabelValueOrEmpty(), getLabelValue(), and getBoolLabelValue() access c.containerInfo.Config.Labels without checking if containerInfo, Config, or Labels are nil. If any of these are nil, the code will panic. These methods should include nil checks before accessing the nested fields.", "file": "pkg/container/metadata.go", "line": 50}, {"description": "Potential index out of bounds error in filter functions. Both FilterByNames() and FilterByDisableNames() use c.Name()[1:] without checking if the container name has at least 2 characters. If c.Name() returns an empty string or a single character, this slice operation will panic. The code should check len(c.Name()) > 1 before attempting to slice from index 1.", "file": "pkg/filters/filters.go", "line": 24}, {"description": "Potential nil pointer dereference in StopContainer() method. On line 205, the code accesses c.ContainerInfo().HostConfig.AutoRemove without checking if ContainerInfo() or HostConfig are nil. If either is nil, this will cause a panic. The code should include nil checks before accessing nested fields.", "file": "pkg/container/client.go", "line": 205}, {"description": "Potential index out of bounds error in Links() method. On line 193, the code uses strings.Split(link, \":\")[0] without checking if the split operation returns at least one element. If the link string is empty, strings.Split will return a slice with one empty string, which is safe. However, if there are any edge cases where Split could return an empty slice, this would cause a panic. While this is less likely with strings.Split, it's still a potential risk.", "file": "pkg/container/container.go", "line": 193}, {"description": "Potential nil pointer dereference in GetContainer() method. On line 160, the code accesses containerInfo.HostConfig.NetworkMode without checking if HostConfig is nil. While containerInfo is checked for errors from ContainerInspect, the HostConfig field could potentially be nil, which would cause a panic when accessing NetworkMode.", "file": "pkg/container/client.go", "line": 160}, {"description": "Potential index out of bounds error in FilterByImage() method. On line 111, the code uses strings.Split(c.ImageName(), \":\")[0] without checking if the split operation returns at least one element. While strings.Split typically returns at least one element even for empty strings, if c.ImageName() returns an empty string, this should still be safe. However, it's a similar pattern to the previous issue and could be made more robust with bounds checking.", "file": "pkg/filters/filters.go", "line": 111}, {"description": "Incorrect error formatting verb used in fmt.Errorf. Using %e instead of %w for error wrapping. The %e verb is not a valid formatting verb in Go and will cause runtime errors. Should use %w to properly wrap errors or %v to format them.", "file": "pkg/notifications/preview/tplprev.go", "line": 18}, {"description": "Incorrect error formatting verb used in fmt.Errorf. Using %e instead of %w for error wrapping. The %e verb is not a valid formatting verb in Go and will cause runtime errors. Should use %w to properly wrap errors or %v to format them.", "file": "pkg/notifications/preview/tplprev.go", "line": 32}, {"description": "Potential index out of bounds error in sendNotifications function. On line 123, the code accesses n.Urls[i] where i is the index from the errs slice, but there's no guarantee that the errs slice has the same length as n.Urls. If the Router.Send method returns fewer or more errors than the number of URLs, this will cause a panic.", "file": "pkg/notifications/shoutrrr.go", "line": 123}, {"description": "Potential deadlock in sendEntries function. On line 163, the code sends a message to n.messages channel without checking if the channel is closed or if there's a receiver. If the sendNotifications goroutine has already exited or if Close() has been called, this will block indefinitely causing a deadlock.", "file": "pkg/notifications/shoutrrr.go", "line": 163}, {"description": "Potential index out of bounds error in Discord URL parsing. On lines 52-53, the code accesses parts[len(parts)-3] and parts[len(parts)-2] without checking if the parts slice has at least 3 elements. If the URL has fewer than 3 path segments, this will cause a panic due to negative indexing or out-of-bounds access.", "file": "pkg/notifications/slack.go", "line": 52}, {"description": "Potential index out of bounds error in Levels function. On line 191, the code accesses log.AllLevels[:n.logLevel+1] without checking if n.logLevel+1 is within the bounds of log.AllLevels slice. If n.logLevel is greater than or equal to len(log.AllLevels), this will cause a panic due to slice bounds out of range.", "file": "pkg/notifications/shoutrrr.go", "line": 191}, {"description": "Potential panic in randomEntry function. On line 127, the code calls pb.rand.Intn(len(arr)) without checking if arr is empty. If an empty slice is passed to this function, len(arr) will be 0, and rand.Intn(0) will panic with 'invalid argument to Intn'.", "file": "pkg/notifications/preview/data/data.go", "line": 127}, {"description": "Ignored error from os.Hostname() call. On line 124, the error returned by os.Hostname() is ignored with the blank identifier '_'. If os.Hostname() fails, hostname will remain an empty string, which could lead to unexpected behavior in notifications. The error should be handled appropriately.", "file": "pkg/notifications/notifier.go", "line": 124}], "updated_files": {}}
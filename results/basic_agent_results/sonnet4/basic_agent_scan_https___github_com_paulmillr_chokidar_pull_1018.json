{"repo_id": "paulmillr_chokidar_1018", "bugs": [{"description": "Missing semicolon after `await stat(path)` statement. This will cause a syntax error.", "file": "lib/fsevents-handler.js", "line": 243}, {"description": "Duplicate check for `if (this.fsw.closed) return;` on consecutive lines. Line 245 is redundant and should be removed.", "file": "lib/fsevents-handler.js", "line": 245}, {"description": "Missing semicolon after `this.fsw._closeFile(path)` statement. This will cause a syntax error.", "file": "lib/nodefs-handler.js", "line": 373}, {"description": "Missing semicolon after the arrow function definition for `sameTypes`. This will cause a syntax error.", "file": "lib/fsevents-handler.js", "line": 209}, {"description": "Using `throw null;` is problematic as it throws a null value instead of a proper Error object. This can cause issues with error handling and debugging. Should throw a proper Error object or use a different control flow mechanism.", "file": "lib/fsevents-handler.js", "line": 460}, {"description": "Duplicate call to `this.fsw._emitReady()` on lines 504-505. The comment suggests this is a workaround for a test, but calling _emitReady() twice could cause race conditions or incorrect ready state management. This indicates a design flaw that should be properly addressed.", "file": "lib/fsevents-handler.js", "line": 505}, {"description": "Typo in variable name `consolidateThreshhold` - should be `consolidateThreshold` (missing 'h'). This is a spelling error that affects code readability and consistency.", "file": "lib/fsevents-handler.js", "line": 80}, {"description": "The misspelled variable `consolidateThreshhold` is used on line 184, creating consistency with the declaration but perpetuating the spelling error throughout the codebase.", "file": "lib/fsevents-handler.js", "line": 184}, {"description": "Inefficient loop in `toUnix` function using `while (str.match(DOUBLE_SLASH_RE))` which calls `match()` on every iteration. This could be optimized to use `str.replace(/\\/\\//g, '/')` with global flag to replace all occurrences in one operation, or use a more efficient loop condition.", "file": "index.js", "line": 101}, {"description": "Potential resource leak in error handler. If `open(path, 'r')` succeeds but `close(fd)` fails, the file descriptor may remain open. The `catch (err) {}` block silently ignores all errors, including potential close() failures, which could lead to file descriptor leaks.", "file": "lib/nodefs-handler.js", "line": 183}, {"description": "Inconsistent return value in closer function. When `!lst.size` is true and `cont.watcher` exists, the function returns a Promise, but when `cont.watcher` doesn't exist, it returns undefined. This inconsistency could cause issues for callers expecting a consistent return type.", "file": "lib/fsevents-handler.js", "line": 169}, {"description": "Missing semicolon after `await stat(path)` statement. This will cause a syntax error.", "file": "lib/fsevents-handler.js", "line": 243}, {"description": "Duplicate check for `if (this.fsw.closed) return;` on consecutive lines. Line 245 is redundant and should be removed.", "file": "lib/fsevents-handler.js", "line": 245}, {"description": "Missing semicolon after `this.fsw._closeFile(path)` statement. This will cause a syntax error.", "file": "lib/nodefs-handler.js", "line": 373}, {"description": "Missing semicolon after the arrow function definition for `sameTypes`. This will cause a syntax error.", "file": "lib/fsevents-handler.js", "line": 209}, {"description": "Using `throw null;` is problematic as it throws a null value instead of a proper Error object. This can cause issues with error handling and debugging. Should throw a proper Error object or use a different control flow mechanism.", "file": "lib/fsevents-handler.js", "line": 460}, {"description": "Duplicate call to `this.fsw._emitReady()` on lines 504-505. The comment suggests this is a workaround for a test, but calling _emitReady() twice could cause race conditions or incorrect ready state management. This indicates a design flaw that should be properly addressed.", "file": "lib/fsevents-handler.js", "line": 505}, {"description": "Typo in variable name `consolidateThreshhold` - should be `consolidateThreshold` (missing 'h'). This is a spelling error that affects code readability and consistency.", "file": "lib/fsevents-handler.js", "line": 80}, {"description": "The misspelled variable `consolidateThreshhold` is used on line 184, creating consistency with the declaration but perpetuating the spelling error throughout the codebase.", "file": "lib/fsevents-handler.js", "line": 184}, {"description": "Inefficient loop in `toUnix` function using `while (str.match(DOUBLE_SLASH_RE))` which calls `match()` on every iteration. This could be optimized to use `str.replace(/\\/\\//g, '/')` with global flag to replace all occurrences in one operation, or use a more efficient loop condition.", "file": "index.js", "line": 101}, {"description": "Potential resource leak in error handler. If `open(path, 'r')` succeeds but `close(fd)` fails, the file descriptor may remain open. The `catch (err) {}` block silently ignores all errors, including potential close() failures, which could lead to file descriptor leaks.", "file": "lib/nodefs-handler.js", "line": 183}, {"description": "Inconsistent return value in closer function. When `!lst.size` is true and `cont.watcher` exists, the function returns a Promise, but when `cont.watcher` doesn't exist, it returns undefined. This inconsistency could cause issues for callers expecting a consistent return type.", "file": "lib/fsevents-handler.js", "line": 169}, {"description": "Missing semicolon after 'const stats = await stat(path)' statement. This could cause issues with automatic semicolon insertion and potentially lead to syntax errors or unexpected behavior.", "file": "lib/fsevents-handler.js", "line": 243}, {"description": "Missing semicolon after the sameTypes function definition. This could cause issues with automatic semicolon insertion and potentially lead to syntax errors.", "file": "lib/fsevents-handler.js", "line": 209}, {"description": "Missing semicolon after 'this.fsw._closeFile(path)' statement. This could cause issues with automatic semicolon insertion and potentially lead to syntax errors or unexpected behavior.", "file": "lib/nodefs-handler.js", "line": 373}, {"description": "Missing semicolon after the listener function definition. This could cause issues with automatic semicolon insertion and potentially lead to syntax errors.", "file": "lib/nodefs-handler.js", "line": 393}, {"description": "Potential issue in the closer function: when cont.watcher.stop() is called and returns a promise, the function returns the promise but doesn't handle the case where cont.watcher is undefined after the promise resolves. If the watcher.stop() call fails, the cleanup (setting rawEmitter and watcher to undefined, freezing the object) might not happen, leading to potential memory leaks.", "file": "lib/fsevents-handler.js", "line": 169}, {"description": "Throwing 'null' is problematic and unconventional. The code 'throw null;' on line 460 will throw a null value which is not a proper Error object. This can cause issues with error handling code that expects Error objects with properties like .message, .stack, etc. It should throw a proper Error object or use a different control flow mechanism.", "file": "lib/fsevents-handler.js", "line": 460}, {"description": "Potential null/undefined access issue: cont.watcher.close() is called on line 207 without checking if cont.watcher is defined. If cont.watcher is undefined or null, this will throw a TypeError. The code should check if cont.watcher exists before calling close() on it.", "file": "lib/nodefs-handler.js", "line": 207}, {"description": "Variable shadowing issue: The parameter 'newStats' is being shadowed by a local variable with the same name on line 364. The 'const newStats = await stat(file);' declaration creates a new variable that shadows the parameter, which could lead to confusion and potential bugs. The local variable should have a different name.", "file": "lib/nodefs-handler.js", "line": 364}, {"description": "Spelling error in variable name: 'consolidateThreshhold' should be 'consolidateThreshold' (missing 'h'). While this doesn't cause functional issues, it's a typo that could lead to confusion and inconsistency in the codebase.", "file": "lib/fsevents-handler.js", "line": 80}, {"description": "Spelling error in variable usage: 'consolidateThreshhold' should be 'consolidateThreshold' (missing 'h'). This is the same misspelled variable being used consistently, but it's still a typo that should be corrected.", "file": "lib/fsevents-handler.js", "line": 184}, {"description": "Logic error in calcDepth function: The condition '!path.indexOf(root)' on line 199 is problematic. indexOf() returns 0 when the string is found at the beginning, so !path.indexOf(root) will be true when path starts with root, but it will also be true when indexOf returns any falsy value. This should likely be 'path.indexOf(root) === 0' to properly check if path starts with root.", "file": "lib/fsevents-handler.js", "line": 199}, {"description": "Missing return statement in checkIgnored method: The method on line 222 doesn't explicitly return a value when the path is not ignored (lines 232-233). While JavaScript functions return undefined by default, this method appears to be designed to return a boolean indicating whether the path was ignored. It should return false when the path is not ignored for consistency and clarity.", "file": "lib/fsevents-handler.js", "line": 234}, {"description": "Missing error handling for fsrealpath call: The await fsrealpath(path) call on line 424 is not wrapped in a try-catch block. If fsrealpath fails (e.g., due to permission issues, broken symlinks, or file system errors), it will throw an unhandled exception that could crash the application or cause unexpected behavior.", "file": "lib/nodefs-handler.js", "line": 424}, {"description": "Missing error handling for fsrealpath calls: The await fsrealpath(path) calls on lines 606 and 615 are not wrapped in try-catch blocks. If fsrealpath fails (e.g., due to permission issues, broken symlinks, or file system errors), it will throw an unhandled exception that could crash the application or cause unexpected behavior.", "file": "lib/nodefs-handler.js", "line": 606}, {"description": "Missing error handling for fsrealpath call: The await fsrealpath(path) call on line 615 is not wrapped in a try-catch block. If fsrealpath fails (e.g., due to permission issues, broken symlinks, or file system errors), it will throw an unhandled exception that could crash the application or cause unexpected behavior.", "file": "lib/nodefs-handler.js", "line": 615}, {"description": "Missing semicolon after `await stat(path)` statement. This will cause a syntax error.", "file": "lib/fsevents-handler.js", "line": 243}, {"description": "Duplicate check for `if (this.fsw.closed) return;` on consecutive lines. Line 245 is redundant and should be removed.", "file": "lib/fsevents-handler.js", "line": 245}, {"description": "Missing semicolon after `this.fsw._closeFile(path)` statement. This will cause a syntax error.", "file": "lib/nodefs-handler.js", "line": 373}, {"description": "Missing semicolon after the arrow function definition for `sameTypes`. This will cause a syntax error.", "file": "lib/fsevents-handler.js", "line": 209}, {"description": "Using `throw null;` is problematic as it throws a null value instead of a proper Error object. This can cause issues with error handling and debugging. Should throw a proper Error object or use a different control flow mechanism.", "file": "lib/fsevents-handler.js", "line": 460}, {"description": "Duplicate call to `this.fsw._emitReady()` on lines 504-505. The comment suggests this is a workaround for a test, but calling _emitReady() twice could cause race conditions or incorrect ready state management. This indicates a design flaw that should be properly addressed.", "file": "lib/fsevents-handler.js", "line": 505}, {"description": "Typo in variable name `consolidateThreshhold` - should be `consolidateThreshold` (missing 'h'). This is a spelling error that affects code readability and consistency.", "file": "lib/fsevents-handler.js", "line": 80}, {"description": "The misspelled variable `consolidateThreshhold` is used on line 184, creating consistency with the declaration but perpetuating the spelling error throughout the codebase.", "file": "lib/fsevents-handler.js", "line": 184}, {"description": "Inefficient loop in `toUnix` function using `while (str.match(DOUBLE_SLASH_RE))` which calls `match()` on every iteration. This could be optimized to use `str.replace(/\\/\\//g, '/')` with global flag to replace all occurrences in one operation, or use a more efficient loop condition.", "file": "index.js", "line": 101}, {"description": "Potential resource leak in error handler. If `open(path, 'r')` succeeds but `close(fd)` fails, the file descriptor may remain open. The `catch (err) {}` block silently ignores all errors, including potential close() failures, which could lead to file descriptor leaks.", "file": "lib/nodefs-handler.js", "line": 183}, {"description": "Inconsistent return value in closer function. When `!lst.size` is true and `cont.watcher` exists, the function returns a Promise, but when `cont.watcher` doesn't exist, it returns undefined. This inconsistency could cause issues for callers expecting a consistent return type.", "file": "lib/fsevents-handler.js", "line": 169}, {"description": "Missing semicolon after 'const stats = await stat(path)' statement. This could cause issues with automatic semicolon insertion and potentially lead to syntax errors or unexpected behavior.", "file": "lib/fsevents-handler.js", "line": 243}, {"description": "Missing semicolon after the sameTypes function definition. This could cause issues with automatic semicolon insertion and potentially lead to syntax errors.", "file": "lib/fsevents-handler.js", "line": 209}, {"description": "Missing semicolon after 'this.fsw._closeFile(path)' statement. This could cause issues with automatic semicolon insertion and potentially lead to syntax errors or unexpected behavior.", "file": "lib/nodefs-handler.js", "line": 373}, {"description": "Missing semicolon after the listener function definition. This could cause issues with automatic semicolon insertion and potentially lead to syntax errors.", "file": "lib/nodefs-handler.js", "line": 393}, {"description": "Potential issue in the closer function: when cont.watcher.stop() is called and returns a promise, the function returns the promise but doesn't handle the case where cont.watcher is undefined after the promise resolves. If the watcher.stop() call fails, the cleanup (setting rawEmitter and watcher to undefined, freezing the object) might not happen, leading to potential memory leaks.", "file": "lib/fsevents-handler.js", "line": 169}, {"description": "Throwing 'null' is problematic and unconventional. The code 'throw null;' on line 460 will throw a null value which is not a proper Error object. This can cause issues with error handling code that expects Error objects with properties like .message, .stack, etc. It should throw a proper Error object or use a different control flow mechanism.", "file": "lib/fsevents-handler.js", "line": 460}, {"description": "Potential null/undefined access issue: cont.watcher.close() is called on line 207 without checking if cont.watcher is defined. If cont.watcher is undefined or null, this will throw a TypeError. The code should check if cont.watcher exists before calling close() on it.", "file": "lib/nodefs-handler.js", "line": 207}, {"description": "Variable shadowing issue: The parameter 'newStats' is being shadowed by a local variable with the same name on line 364. The 'const newStats = await stat(file);' declaration creates a new variable that shadows the parameter, which could lead to confusion and potential bugs. The local variable should have a different name.", "file": "lib/nodefs-handler.js", "line": 364}, {"description": "Spelling error in variable name: 'consolidateThreshhold' should be 'consolidateThreshold' (missing 'h'). While this doesn't cause functional issues, it's a typo that could lead to confusion and inconsistency in the codebase.", "file": "lib/fsevents-handler.js", "line": 80}, {"description": "Spelling error in variable usage: 'consolidateThreshhold' should be 'consolidateThreshold' (missing 'h'). This is the same misspelled variable being used consistently, but it's still a typo that should be corrected.", "file": "lib/fsevents-handler.js", "line": 184}, {"description": "Logic error in calcDepth function: The condition '!path.indexOf(root)' on line 199 is problematic. indexOf() returns 0 when the string is found at the beginning, so !path.indexOf(root) will be true when path starts with root, but it will also be true when indexOf returns any falsy value. This should likely be 'path.indexOf(root) === 0' to properly check if path starts with root.", "file": "lib/fsevents-handler.js", "line": 199}, {"description": "Missing return statement in checkIgnored method: The method on line 222 doesn't explicitly return a value when the path is not ignored (lines 232-233). While JavaScript functions return undefined by default, this method appears to be designed to return a boolean indicating whether the path was ignored. It should return false when the path is not ignored for consistency and clarity.", "file": "lib/fsevents-handler.js", "line": 234}, {"description": "Missing error handling for fsrealpath call: The await fsrealpath(path) call on line 424 is not wrapped in a try-catch block. If fsrealpath fails (e.g., due to permission issues, broken symlinks, or file system errors), it will throw an unhandled exception that could crash the application or cause unexpected behavior.", "file": "lib/nodefs-handler.js", "line": 424}, {"description": "Missing error handling for fsrealpath calls: The await fsrealpath(path) calls on lines 606 and 615 are not wrapped in try-catch blocks. If fsrealpath fails (e.g., due to permission issues, broken symlinks, or file system errors), it will throw an unhandled exception that could crash the application or cause unexpected behavior.", "file": "lib/nodefs-handler.js", "line": 606}, {"description": "Missing error handling for fsrealpath call: The await fsrealpath(path) call on line 615 is not wrapped in a try-catch block. If fsrealpath fails (e.g., due to permission issues, broken symlinks, or file system errors), it will throw an unhandled exception that could crash the application or cause unexpected behavior.", "file": "lib/nodefs-handler.js", "line": 615}, {"description": "Missing await keywords for async write operations. Lines 184-188, 191-192, and 195-196 call write() without await, which could lead to race conditions and unpredictable test behavior. These async operations should be awaited to ensure proper sequencing.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp_yht7anc/test.js", "line": 184}, {"description": "Use of deprecated fs.rmdir API. The fs.rmdir function is deprecated in Node.js 14+ and should be replaced with fs.rm with the recursive option. This could cause the code to fail in newer Node.js versions or produce deprecation warnings.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp_yht7anc/test.js", "line": 28}, {"description": "Typo in error message. 'SPies zero' should be 'Spies zero' or 'No spies provided'. This is a minor issue but affects code quality and debugging experience.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp_yht7anc/test.js", "line": 90}, {"description": "Resource leak: watcher2 is created on line 251 but is never explicitly closed. The afterEach hook only cleans up the main watcher variable, but watcher2 is not included in the cleanup process. This could lead to resource leaks and interfere with other tests.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp_yht7anc/test.js", "line": 251}, {"description": "Incorrect file mode value. Mode 128 (decimal) equals 0o200 (octal), which gives write-only permission for owner only. This is likely incorrect as it makes the file unreadable. Should probably be 0o644 (readable/writable by owner, readable by others) or another appropriate octal value.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp_yht7anc/test.js", "line": 1610}, {"description": "Resource leak in example.js: The watcher is created and stored in global.watcher but is never closed. This creates a persistent file watcher that will continue running indefinitely, potentially causing resource leaks and preventing the process from exiting cleanly.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp_yht7anc/example.js", "line": 3}, {"description": "Potential type error in types/test.ts: The stats parameter in the 'change' event handler is typed as fs.Stats, but according to the comment and chokidar documentation, stats may be undefined when not available. The parameter should be typed as 'fs.Stats | undefined' to accurately reflect the API.", "file": "/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmp_yht7anc/types/test.ts", "line": 39}], "updated_files": {}}
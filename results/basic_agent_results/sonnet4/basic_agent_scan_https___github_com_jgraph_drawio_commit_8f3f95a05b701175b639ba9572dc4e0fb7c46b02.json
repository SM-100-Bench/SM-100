{"repo_id": "jgraph_drawio_8f3f95a05b701175b639ba9572dc4e0fb7c46b02", "bugs": [{"description": "Reference to undefined variable 'urlParams' before it's defined. In PreConfig.js line 13, urlParams['sync'] is assigned a value, but urlParams is not defined until later in index.html. This will cause a ReferenceError when PreConfig.js is loaded before urlParams is initialized.", "file": "src/main/webapp/js/PreConfig.js", "line": 13}, {"description": "Potential XSS vulnerability in URL parameter parsing. In index.html line 62, JSON.parse(decodeURIComponent(window.location.hash.substring(2))) directly parses user-controlled input from the URL hash without validation. This could allow an attacker to inject malicious JSON that could lead to code execution or other security issues. The parsed object is then assigned to urlParams which is used throughout the application.", "file": "src/main/webapp/index.html", "line": 62}, {"description": "Potential XSS vulnerability in mxscript function. In index.html lines 186-187, the src, id, and dataAppKey parameters are directly concatenated into a document.write() call without proper escaping or validation. If any of these parameters contain user-controlled input with malicious content (like quotes or script tags), it could lead to XSS attacks. The src parameter is particularly dangerous as it's used to load external scripts.", "file": "src/main/webapp/index.html", "line": 186}, {"description": "Unsafe localStorage access without error handling. In Settings.js line 34, localStorage.getItem('.drawio-config') is called without try-catch protection. If localStorage is disabled, quota exceeded, or other storage errors occur, this will throw an exception that could crash the application. Similar issue on line 77 with localStorage.setItem().", "file": "src/main/webapp/js/diagramly/Settings.js", "line": 34}, {"description": "Potential null pointer dereference in Init.js. On line 230, DRAWIO_LIGHTBOX_URL.substring() is called without checking if DRAWIO_LIGHTBOX_URL is null. If DRAWIO_LIGHTBOX_URL is null (which can happen based on the configuration in PreConfig.js line 10), this will throw a TypeError when trying to call substring() on null, causing the application to crash.", "file": "src/main/webapp/js/diagramly/Init.js", "line": 230}, {"description": "Unsafe JSON parsing without error handling in Settings.js. On line 43, JSON.parse(value) is called without try-catch protection. If the stored value in localStorage is corrupted or contains invalid JSON, this will throw a SyntaxError that could crash the application. This is particularly dangerous since localStorage can be modified by users or corrupted.", "file": "src/main/webapp/js/diagramly/Settings.js", "line": 43}, {"description": "Potential XSS vulnerability in Dialogs.js. On line 52, button.setAttribute('title', title) directly sets user-controlled input as the title attribute without proper escaping or validation. If the title parameter contains malicious content like quotes or script-related content, it could lead to XSS attacks. The title parameter comes from user input and should be sanitized before being used in DOM attributes.", "file": "src/main/webapp/js/diagramly/Dialogs.js", "line": 52}, {"description": "Reference to undefined variable 'urlParams' before it's defined. In PreConfig.js line 13, urlParams['sync'] is assigned a value, but urlParams is not defined until later in index.html. This will cause a ReferenceError when PreConfig.js is loaded before urlParams is initialized.", "file": "src/main/webapp/js/PreConfig.js", "line": 13}, {"description": "Potential XSS vulnerability in URL parameter parsing. In index.html line 62, JSON.parse(decodeURIComponent(window.location.hash.substring(2))) directly parses user-controlled input from the URL hash without validation. This could allow an attacker to inject malicious JSON that could lead to code execution or other security issues. The parsed object is then assigned to urlParams which is used throughout the application.", "file": "src/main/webapp/index.html", "line": 62}, {"description": "Potential XSS vulnerability in mxscript function. In index.html lines 186-187, the src, id, and dataAppKey parameters are directly concatenated into a document.write() call without proper escaping or validation. If any of these parameters contain user-controlled input with malicious content (like quotes or script tags), it could lead to XSS attacks. The src parameter is particularly dangerous as it's used to load external scripts.", "file": "src/main/webapp/index.html", "line": 186}, {"description": "Unsafe localStorage access without error handling. In Settings.js line 34, localStorage.getItem('.drawio-config') is called without try-catch protection. If localStorage is disabled, quota exceeded, or other storage errors occur, this will throw an exception that could crash the application. Similar issue on line 77 with localStorage.setItem().", "file": "src/main/webapp/js/diagramly/Settings.js", "line": 34}, {"description": "Potential null pointer dereference in Init.js. On line 230, DRAWIO_LIGHTBOX_URL.substring() is called without checking if DRAWIO_LIGHTBOX_URL is null. If DRAWIO_LIGHTBOX_URL is null (which can happen based on the configuration in PreConfig.js line 10), this will throw a TypeError when trying to call substring() on null, causing the application to crash.", "file": "src/main/webapp/js/diagramly/Init.js", "line": 230}, {"description": "Unsafe JSON parsing without error handling in Settings.js. On line 43, JSON.parse(value) is called without try-catch protection. If the stored value in localStorage is corrupted or contains invalid JSON, this will throw a SyntaxError that could crash the application. This is particularly dangerous since localStorage can be modified by users or corrupted.", "file": "src/main/webapp/js/diagramly/Settings.js", "line": 43}, {"description": "Potential XSS vulnerability in Dialogs.js. On line 52, button.setAttribute('title', title) directly sets user-controlled input as the title attribute without proper escaping or validation. If the title parameter contains malicious content like quotes or script-related content, it could lead to XSS attacks. The title parameter comes from user input and should be sanitized before being used in DOM attributes.", "file": "src/main/webapp/js/diagramly/Dialogs.js", "line": 52}, {"description": "Potential null pointer exception in mergeFile method. At line 300, file.getShadowPages() is called without null checking the 'file' parameter first. If 'file' is null, this will throw a TypeError when trying to call getShadowPages() on null.", "file": "src/main/webapp/js/diagramly/DrawioFile.js", "line": 300}, {"description": "Potential null pointer exception in pusherErrorListener. At line 86, the code checks if err.error != null and err.error.data != null, but it doesn't first check if 'err' itself is not null. If 'err' is null, accessing err.error will throw a TypeError.", "file": "src/main/webapp/js/diagramly/DrawioFileSync.js", "line": 86}, {"description": "Duplicate method definition. The saveAs method is defined twice at lines 94 and 105 with identical implementations. This creates ambiguity and the second definition will override the first one, which could lead to unexpected behavior.", "file": "src/main/webapp/js/diagramly/LocalFile.js", "line": 105}, {"description": "Potential null pointer exception in saveFile method. At lines 213 and 216, the code accesses this.desc.lastModified without checking if this.desc is not null first. If this.desc is null, this will throw a TypeError when trying to access the lastModified property.", "file": "src/main/webapp/js/diagramly/LocalFile.js", "line": 213}, {"description": "Missing semicolon in deleteFile method. At line 491, the statement 'localStorage.removeItem(title)' is missing a semicolon, which could cause issues with automatic semicolon insertion and potentially lead to unexpected behavior.", "file": "src/main/webapp/js/diagramly/StorageFile.js", "line": 491}, {"description": "Potential null pointer exception in getLatestVersion method. At line 362, a new StorageFile is created with 'data' parameter without checking if 'data' is not null first. If StorageFile constructor or its parent DrawioFile constructor doesn't handle null data properly, this could cause issues.", "file": "src/main/webapp/js/diagramly/StorageFile.js", "line": 362}], "updated_files": {}}
{"repo_id": "klauspost_compress_785", "bugs": [{"description": "Missing //go:noescape directive. Line 6 has a comment '// go:noescape' but it should be '//go:noescape' (without space after //). This directive is critical for telling the Go compiler that the assembly function doesn't allow any of the pointers passed as arguments to escape into the heap, which affects garbage collection and performance. Without the proper directive, the compiler may make incorrect assumptions about pointer escape analysis.", "file": "internal/cpuinfo/cpuinfo_amd64.go", "line": 6}, {"description": "Buffer overflow bug in copy operation. Line 403 copies `lLen` bytes from src but only allocates space for `addExtraLits` bytes in dst. The copy should be `copy(dst[di:di+addExtraLits], src[anchor:anchor+addExtraLits])` instead of `copy(dst[di:di+addExtraLits], src[anchor:anchor+lLen])`. This mismatch between the destination slice size (addExtraLits) and source slice size (lLen) can cause buffer overflow if lLen > addExtraLits.", "file": "internal/lz4ref/block.go", "line": 403}, {"description": "Race condition in DisableBMI2 function. The function modifies the global variable `hasBMI2` without any synchronization mechanism. If multiple goroutines call DisableBMI2() or HasBMI2() concurrently, this can lead to data races. The global variables hasBMI1 and hasBMI2 are accessed and modified without proper synchronization, which violates Go's memory model and can cause undefined behavior in concurrent programs.", "file": "internal/cpuinfo/cpuinfo.go", "line": 20}, {"description": "Resource leak: file handle is never closed. The function opens a file with os.Open() on line 34 but never calls file.Close(). This causes a file descriptor leak, which can eventually exhaust the system's file descriptor limit if the function is called repeatedly. The file should be closed with 'defer file.Close()' after the error check.", "file": "internal/fuzz/helpers.go", "line": 34}], "updated_files": {}}
{"repo_id": "penrose_penrose_1878", "bugs": [{"description": "Division by zero vulnerability in ewmmdiv function. The function performs elementwise division of matrices A1[i][j] / A2[i][j] without checking if A2[i][j] is zero. This can lead to division by zero errors, NaN values, or infinite values that could crash the optimization process or produce invalid results.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 228}, {"description": "Division by zero vulnerability in ewvvdiv function. The function performs elementwise division of vectors v1[i] / v2[i] without checking if v2[i] is zero. This can lead to division by zero errors, NaN values, or infinite values that could crash the optimization process or produce invalid results.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 267}, {"description": "Division by zero vulnerability in vdiv function. The function divides each element of vector v by scalar c without checking if c is zero. This can lead to division by zero errors, NaN values, or infinite values that could crash the optimization process or produce invalid results.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 441}, {"description": "Division by zero vulnerability in msdiv function. The function divides each element of matrix A by scalar c without checking if c is zero. This can lead to division by zero errors, NaN values, or infinite values that could crash the optimization process or produce invalid results.", "file": "./packages/core/src/engine/Autodiff.ts", "line": 449}, {"description": "Division by zero vulnerability in BBox.ts at multiple locations. The functions use division operations (ad.div, div) without checking for zero denominators: line 65-66 (dividing by 2), line 301 (vdiv function), line 330 (dividing strokeWidth by 2), line 437-438 (dividing by rxPos and ryPos), line 476-477 (dividing by ry and rx). These could lead to division by zero errors if width, height, strokeWidth, or radius values are zero.", "file": "./packages/core/src/engine/BBox.ts", "line": 65}, {"description": "Incorrect array iteration using 'for...in' loop in cartesianProduct function. The 'for...in' loop iterates over string indices, not numeric indices, which can lead to unexpected behavior. When used with arrays, 'for...in' can iterate over enumerable properties including inherited ones, and the indices are strings. This should use 'for...of' or traditional for loops with numeric indices.", "file": "./packages/core/src/utils/Util.ts", "line": 60}, {"description": "Potential array access without bounds checking in parseDomain function. The code accesses results[0] after only checking if results.length > 0, but doesn't verify that results[0] is not undefined or null. While the length check should be sufficient, there's a theoretical possibility that the parser could return an array with undefined elements.", "file": "./packages/core/src/compiler/Domain.ts", "line": 50}, {"description": "Potential division by zero in sampleWidth function. The code divides canvas.width by 6 without checking if canvas.width is zero or very small. If canvas.width is 0, this will result in division by zero. If canvas.width is less than 18 (6*3), the uniform sampler will have min > max, which could cause issues.", "file": "./packages/core/src/shapes/Samplers.ts", "line": 103}, {"description": "Potential division by zero in sampleHeight function. The code divides canvas.height by 6 without checking if canvas.height is zero or very small. If canvas.height is 0, this will result in division by zero. If canvas.height is less than 18 (6*3), the uniform sampler will have min > max, which could cause issues.", "file": "./packages/core/src/shapes/Samplers.ts", "line": 115}, {"description": "Division by zero vulnerability in Functions.ts line 6155. The code performs div(q, c3) without checking if c3 is zero. If c3 is zero, this will result in division by zero, leading to NaN or infinite values that could crash the computation or produce invalid results.", "file": "./packages/core/src/lib/Functions.ts", "line": 6155}, {"description": "Division by zero vulnerability in Functions.ts lines 6489-6490. The code performs div(ops.cross2(v, w), d) and div(ops.cross2(u, w), d) without checking if d is zero. If d (the cross product of v and u) is zero, this will result in division by zero, leading to NaN or infinite values. This can happen when vectors v and u are parallel or collinear.", "file": "./packages/core/src/lib/Functions.ts", "line": 6489}, {"description": "Potential array access without bounds checking in minLoc and maxLoc functions. While both functions check if locs.length === 0 and throw TypeError, they immediately access locs[0] without verifying it exists. Although the length check should prevent this, there's a theoretical race condition or edge case where the array could be modified between the length check and the access.", "file": "./packages/core/src/parser/ParserUtil.ts", "line": 111}, {"description": "Potential array access without bounds checking in Error.ts line 99-100. The code accesses rowLengths[0] without checking if rowLengths array is empty. If contents is an empty array, rowLengths will be empty and accessing rowLengths[0] will return undefined, which could cause unexpected behavior in the comparison and string interpolation.", "file": "./packages/core/src/utils/Error.ts", "line": 99}, {"description": "Division by zero vulnerability in api.ts lines 23, 40-41, and 52. The code performs division operations (div(height, 2), div(width, 2), div(height, 2), div(canvas[0], 2), div(canvas[1], 2)) without checking if the denominators are zero. If height, width, or canvas dimensions are zero, this will result in division by zero errors.", "file": "./packages/core/src/api.ts", "line": 23}], "updated_files": {}}
{"repo_id": "47ng_nuqs_821", "bugs": [{"description": "Potential null pointer exception in Safari version detection. The code uses non-null assertion operators (!) on potentially undefined values from regex match without proper null checking. If navigator.userAgent is undefined or the regex doesn't match, match will be null, and accessing match![1]! will throw a runtime error.", "file": "./packages/nuqs/src/utils.ts", "line": 36}, {"description": "Potential runtime error in parseAsNumberLiteral when parseFloat returns NaN. The code casts parseFloat(query) to Literal type without checking if it's NaN first. If parseFloat returns NaN, the includes() check will fail to match any valid values, but the type assertion could cause issues in strict type checking scenarios.", "file": "./packages/nuqs/src/parsers.ts", "line": 335}, {"description": "Potential null pointer exception when accessing window.next?.router. The code uses non-null assertion operator (!) on line 34 without proper null checking. If window.next or window.next.router is undefined, this will throw a runtime error. The isPagesRouter() function checks for the existence of the path, but the updateUrl function doesn't verify the router exists before using it.", "file": "./packages/nuqs/src/adapters/next/impl.pages.ts", "line": 34}, {"description": "Potential null pointer exception in Safari version detection. The code uses non-null assertion operators (!) on potentially undefined values from regex match without proper null checking. If navigator.userAgent is undefined or the regex doesn't match, match will be null, and accessing match![1]! will throw a runtime error.", "file": "./packages/nuqs/src/utils.ts", "line": 36}, {"description": "Potential runtime error in parseAsNumberLiteral when parseFloat returns NaN. The code casts parseFloat(query) to Literal type without checking if it's NaN first. If parseFloat returns NaN, the includes() check will fail to match any valid values, but the type assertion could cause issues in strict type checking scenarios.", "file": "./packages/nuqs/src/parsers.ts", "line": 335}, {"description": "Potential null pointer exception when accessing window.next?.router. The code uses non-null assertion operator (!) on line 34 without proper null checking. If window.next or window.next.router is undefined, this will throw a runtime error. The isPagesRouter() function checks for the existence of the path, but the updateUrl function doesn't verify the router exists before using it.", "file": "./packages/nuqs/src/adapters/next/impl.pages.ts", "line": 34}, {"description": "URL parsing bug: When splitting a URL string that contains multiple '?' characters, only the first two parts are captured, causing data loss. For example, if base = '/path?param1=value1?param2=value2', the split('?') creates ['path', 'param1=value1', 'param2=value2'] but only the first two elements are destructured, losing 'param2=value2'. This should use split with a limit of 2 to preserve everything after the first '?' as the search string.", "file": "packages/nuqs/src/serializer.ts", "line": 84}, {"description": "Inconsistent encoding in key escaping: In the renderQueryString function, the key encoding manually replaces specific characters but misses the '%' character in keys, while it does encode '%' in values via encodeQueryValue. This creates inconsistent behavior where '%' in keys is not encoded but '%' in values is encoded as '%25'. This could lead to malformed URLs if keys contain '%' characters.", "file": "packages/nuqs/src/url-encoding.ts", "line": 11}, {"description": "Potential URL constructor exception: The warnIfURLIsTooLong function creates a new URL object using location.href without error handling. If location.href contains an invalid URL (which can happen in some browser environments or edge cases), the URL constructor will throw a TypeError. This could crash the application during URL length validation. The function should wrap the URL constructor in a try-catch block.", "file": "packages/nuqs/src/url-encoding.ts", "line": 60}, {"description": "Potential URL parsing issue with equals sign in query values: The encodeQueryValue function does not encode the '=' character in values (line 38 test shows '=' is passed through unchanged). However, '=' is a reserved character in URL query strings that separates keys from values. If a query parameter value contains '=' characters, it could cause parsing ambiguity. For example, 'key=value=more' could be misinterpreted by URL parsers. The '=' character should be encoded as '%3D' in query values.", "file": "packages/nuqs/src/url-encoding.ts", "line": 24}, {"description": "Potential URLSearchParams constructor exception: In the splitBase function, when base is a string, the code calls 'new URLSearchParams(search)' where 'search' could be undefined if the string doesn't contain a '?' character. While URLSearchParams can handle undefined by treating it as an empty string, if 'search' contains malformed query string syntax, the URLSearchParams constructor could throw an exception, potentially crashing the application.", "file": "packages/nuqs/src/serializer.ts", "line": 85}], "updated_files": {}}
{"repo_id": "flyteorg_flyteadmin_455", "bugs": [{"description": "Typo in error message: 'unmasharl' should be 'unmarshal' in the error message when JSON unmarshaling fails for user info cookie", "file": "auth/cookie_manager.go", "line": 110}, {"description": "Potential security vulnerability: CSRF token generation uses a predictable seed (time.Now().UnixNano()) and math/rand instead of crypto/rand. This makes CSRF tokens predictable and vulnerable to attacks. The function should use crypto/rand for secure random number generation.", "file": "auth/cookie.go", "line": 114}, {"description": "Potential panic vulnerability: Type assertion without checking in interfaceSliceToStringSlice function. If any item in the slice is not a string, this will cause a panic. Should use safe type assertion with ok check.", "file": "auth/authzserver/utils.go", "line": 17}, {"description": "Potential panic vulnerability: Type assertion without checking in rehydrateSession function. At line 74, val.(string) could panic if val is not a string. Should use safe type assertion with ok check.", "file": "auth/authzserver/stateless_token_store.go", "line": 74}, {"description": "Potential index out of bounds vulnerability: At line 138, accessing idToken.Audience[0] without checking if the Audience slice has any elements. This could cause a panic if the audience slice is empty.", "file": "auth/token.go", "line": 138}, {"description": "Security vulnerability: Secret files are written with overly permissive permissions (os.ModePerm = 0777). Secret files should have restrictive permissions (e.g., 0600) to prevent unauthorized access by other users on the system.", "file": "auth/init_secrets.go", "line": 81}, {"description": "Potential panic vulnerability: Type assertion without checking in verifyClaims function. At line 151, userInfoClaim.(map[string]interface{}) could panic if userInfoClaim is not of the expected type. Should use safe type assertion with ok check.", "file": "auth/authzserver/provider.go", "line": 151}, {"description": "Potential panic vulnerability: Type assertion without checking in verifyClaims function. At line 164, clientIDClaim.(string) could panic if clientIDClaim is not a string. Should use safe type assertion with ok check.", "file": "auth/authzserver/provider.go", "line": 164}, {"description": "Potential panic vulnerability: Type assertion without checking in verifyClaims function. At line 169, scopesClaim.([]interface{}) could panic if scopesClaim is not of the expected type. Should use safe type assertion with ok check.", "file": "auth/authzserver/provider.go", "line": 169}, {"description": "Potential panic vulnerability: Type assertion without checking in findPublicKeyForTokenOrFirst function. At line 106, keyID.(string) could panic if keyID is not a string. Should use safe type assertion with ok check.", "file": "auth/authzserver/provider.go", "line": 106}, {"description": "Potential nil pointer dereference: At line 219, block.Bytes is accessed without checking if block is nil. pem.Decode can return nil if the PEM data is invalid, which would cause a panic when accessing block.Bytes.", "file": "auth/authzserver/provider.go", "line": 219}, {"description": "Potential nil pointer dereference: At line 257, block.Bytes is accessed without checking if block is nil. pem.Decode can return nil if the PEM data is invalid, which would cause a panic when accessing block.Bytes. This is the same issue as line 219 but for the old private key.", "file": "auth/authzserver/provider.go", "line": 257}, {"description": "Potential panic vulnerability: Type assertion without checking in IdentityContextFromContext function. At line 107, existing.(IdentityContext) could panic if existing is not of type IdentityContext. Should use safe type assertion with ok check.", "file": "auth/identity_context.go", "line": 107}], "updated_files": {}}
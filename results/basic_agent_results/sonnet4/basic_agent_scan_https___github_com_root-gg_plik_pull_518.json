{"repo_id": "root-gg_plik_518", "bugs": [{"description": "Resource leak: File handle is not closed in AddFile method. The os.Create() call on line 77 creates a file handle 'out' that is never explicitly closed. If io.Copy() fails on line 84, the file handle will remain open, causing a resource leak. The file should be closed with defer out.Close() after successful creation.", "file": "server/data/file/file.go", "line": 77}, {"description": "Race condition and incorrect defer placement in AddFile method. The defer delete(b.store, storeID) on line 56 is executed before the mutex is unlocked, but it should be executed after the io.Copy operation completes. This creates a race condition where GetFile() may try to access the storeID after it's been deleted but before the copy operation finishes. The defer should be moved after the mutex unlock, or the deletion should be handled differently.", "file": "server/data/stream/stream.go", "line": 56}, {"description": "Resource leak: Object writer is not closed in AddFile method when io.Copy fails. The ObjectCreate call on line 73 returns an object writer that must be closed. If io.Copy fails on line 75, the function returns early without closing the object, causing a resource leak. The object.Close() should be called in a defer statement after successful creation.", "file": "server/data/swift/swift.go", "line": 73}, {"description": "Race condition in GetFiles method: The GetFiles() method on line 32-34 returns the internal files map without acquiring the mutex lock, while other methods (GetFile, AddFile, RemoveFile) properly use mutex protection. This creates a race condition where concurrent access to the map can cause data races and potential crashes.", "file": "server/data/testing/testing.go", "line": 32}, {"description": "Error handling bug: AddFile method always returns nil on line 64, ignoring any error from io.Copy operation on line 61. If io.Copy fails, the error should be returned to the caller instead of being silently ignored. This can lead to silent data corruption or incomplete uploads.", "file": "server/data/stream/stream.go", "line": 64}, {"description": "Potential path traversal vulnerability: The getPath and getPathCompat methods construct file paths using file.ID and file.UploadID without proper sanitization. If these values contain path traversal sequences like '../', an attacker could potentially access files outside the intended directory. The code should use filepath.Clean() and validate that the resulting path is within the expected directory structure.", "file": "server/data/file/file.go", "line": 126}, {"description": "Goroutine leak potential: In GetFile method, a goroutine is started on line 56 to handle ObjectGet, but there's no mechanism to ensure the goroutine terminates if the reader is never consumed or if an error occurs early. If the returned reader is closed without being read, the goroutine may remain blocked indefinitely on the ObjectGet call, causing a goroutine leak.", "file": "server/data/swift/swift.go", "line": 56}], "updated_files": {}}
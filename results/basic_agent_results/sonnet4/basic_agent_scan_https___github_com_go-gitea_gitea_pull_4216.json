{"repo_id": "go-gitea_gitea_4216", "bugs": [{"description": "The NewTestEngine function has a parameter passing bug. The function takes a pointer to xorm.Engine as a parameter but reassigns it locally, which doesn't affect the caller's variable. The reassignment `x, err = getEngine()` only modifies the local copy of the pointer, not the original pointer passed by the caller. This means the caller won't receive the newly created engine. The function should either return the engine or take a pointer to a pointer (**xorm.Engine) to properly modify the caller's variable.", "file": "models/models.go", "line": 253}, {"description": "The parseMSSQLHostPort function has inefficient string operations and potential index out of bounds issues. On lines 190-191 and 193-194, strings.Split() is called multiple times on the same string, which is inefficient. More critically, the function doesn't validate that strings.Split() returns the expected number of parts before accessing indices [0] and [1], which could cause a panic if the input string has an unexpected format.", "file": "models/models.go", "line": 190}, {"description": "Command injection vulnerability in initRepoCommit function. On line 1154, user-controlled data (sig.Name and sig.Email) is directly interpolated into a shell command using fmt.Sprintf without proper escaping. An attacker could inject malicious shell commands through the signature name or email fields. For example, a name like \"test'; rm -rf /; echo '\" could execute arbitrary commands. The git command should use separate arguments instead of string interpolation, or the input should be properly sanitized.", "file": "models/repo.go", "line": 1154}, {"description": "Server-Side Request Forgery (SSRF) vulnerability in webhook delivery. The deliver() function on line 639 makes HTTP requests to user-controlled URLs (t.URL) without any validation or filtering. An attacker could create webhooks pointing to internal services (like http://localhost:22, http://169.254.169.254/, etc.) to scan internal networks, access cloud metadata services, or attack internal services. The webhook URL should be validated to prevent requests to private IP ranges, localhost, and cloud metadata endpoints.", "file": "models/webhook.go", "line": 639}, {"description": "Command injection vulnerability in pull request merge functionality. On lines 381, 420, and similar locations in the Merge() function, user-controlled data (sig.Name and sig.Email from doer.NewGitSig() and pr.Issue.Poster.NewGitSig()) is directly interpolated into shell commands using fmt.Sprintf without proper escaping. An attacker could inject malicious shell commands through their Git signature name or email. For example, a name like \"test'; rm -rf /; echo '\" could execute arbitrary commands. The git command should use separate arguments instead of string interpolation, or the input should be properly sanitized.", "file": "models/pull.go", "line": 381}, {"description": "File upload vulnerability in NewAttachment function. The function accepts any file type without validation and stores it directly to the filesystem. There is no validation of file content, file type restrictions, or size limits beyond what might be enforced elsewhere. An attacker could upload malicious files (executables, scripts, etc.) that could be served to other users or potentially executed if the web server is misconfigured. The function should validate file types, scan for malicious content, and enforce size limits.", "file": "models/attachment.go", "line": 75}, {"description": "Command injection vulnerability in SSH key handling. In the AuthorizedString() function on line 78, user-controlled data (key.Content) is directly interpolated into a command string using fmt.Sprintf without proper escaping. An attacker could inject malicious shell commands through the SSH key content. For example, a malicious key content like 'ssh-rsa AAAA... user@host; rm -rf /' could execute arbitrary commands when the authorized_keys file is processed. The key content should be properly validated and sanitized before being included in the command string.", "file": "models/ssh_key.go", "line": 78}], "updated_files": {}}
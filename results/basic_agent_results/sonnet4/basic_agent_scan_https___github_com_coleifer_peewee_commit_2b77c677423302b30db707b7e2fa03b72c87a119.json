{"repo_id": "coleifer_peewee_2b77c677423302b30db707b7e2fa03b72c87a119", "bugs": [{"description": "In the exception handling code, line 3088 has a bug where it passes `exc_value` as the first argument to the new exception constructor, followed by unpacking `*exc_args` (which is `exc_value.args`). This results in duplicate arguments being passed to the exception constructor: `new_type(exc_value, *exc_value.args)`. This could cause TypeError when the exception constructor doesn't expect the original exception as the first parameter, or when it expects a specific number of arguments.", "file": "peewee.py", "line": 3088}, {"description": "SQL injection vulnerability in _query_val_transform function. Lines 735 and 741 use string formatting to directly interpolate user values into SQL strings without proper escaping. For text_type, datetime objects, and bytes, the function uses '%s' % v which doesn't escape SQL special characters like single quotes. An attacker could inject malicious SQL by providing values containing single quotes or other SQL metacharacters. This bypasses parameterized queries when value_literals mode is enabled.", "file": "peewee.py", "line": 735}, {"description": "The pop_transaction method at line 3440 calls list.pop() without checking if the transactions list is empty. This will raise an IndexError if pop_transaction() is called when there are no active transactions. The method should check if the list is empty before popping or handle the IndexError appropriately to prevent crashes.", "file": "peewee.py", "line": 3440}, {"description": "Code injection vulnerability in pwiz.py header generation. Line 64 uses get_database_name() directly in string formatting without proper escaping. If the database name contains single quotes or other special characters, it could break out of the string literal and inject arbitrary Python code into the generated output. The database name should be properly escaped or use repr() to safely represent it as a Python string literal.", "file": "pwiz.py", "line": 64}, {"description": "Information disclosure vulnerability in print_header function. Line 152 directly prints the command line arguments without sanitization, which could expose sensitive information like passwords if they were passed as command line arguments (despite the tool using getpass()). Additionally, line 154 prints the database name without escaping, which could contain sensitive path information or special characters that might cause issues in generated comments.", "file": "pwiz.py", "line": 152}, {"description": "Race condition vulnerability in get_or_create method. Between lines 6866 and 6875, there's a classic time-of-check-time-of-use (TOCTOU) race condition. The method first tries to get an existing record (line 6866), and if it doesn't exist, creates a new one (line 6872). However, between these operations, another thread could create the same record, leading to an IntegrityError. While there's a catch block for IntegrityError (line 6873), it tries to get the record again (line 6875), but if that record was deleted by another thread in the meantime, it will raise the original IntegrityError, potentially masking the real issue.", "file": "peewee.py", "line": 6866}, {"description": "Resource leak potential in transaction handling. Line 4513 calls db.pop_transaction() in a finally block, but this could raise an IndexError if the transaction stack is empty (due to the bug in pop_transaction method at line 3440). If pop_transaction() raises an exception in the finally block, it could mask the original exception that caused the transaction to fail, leading to difficult-to-debug issues and potential resource leaks.", "file": "peewee.py", "line": 4513}, {"description": "In the exception handling code, line 3088 has a bug where it passes `exc_value` as the first argument to the new exception constructor, followed by unpacking `*exc_args` (which is `exc_value.args`). This results in duplicate arguments being passed to the exception constructor: `new_type(exc_value, *exc_value.args)`. This could cause TypeError when the exception constructor doesn't expect the original exception as the first parameter, or when it expects a specific number of arguments.", "file": "peewee.py", "line": 3088}, {"description": "SQL injection vulnerability in _query_val_transform function. Lines 735 and 741 use string formatting to directly interpolate user values into SQL strings without proper escaping. For text_type, datetime objects, and bytes, the function uses '%s' % v which doesn't escape SQL special characters like single quotes. An attacker could inject malicious SQL by providing values containing single quotes or other SQL metacharacters. This bypasses parameterized queries when value_literals mode is enabled.", "file": "peewee.py", "line": 735}, {"description": "The pop_transaction method at line 3440 calls list.pop() without checking if the transactions list is empty. This will raise an IndexError if pop_transaction() is called when there are no active transactions. The method should check if the list is empty before popping or handle the IndexError appropriately to prevent crashes.", "file": "peewee.py", "line": 3440}, {"description": "Code injection vulnerability in pwiz.py header generation. Line 64 uses get_database_name() directly in string formatting without proper escaping. If the database name contains single quotes or other special characters, it could break out of the string literal and inject arbitrary Python code into the generated output. The database name should be properly escaped or use repr() to safely represent it as a Python string literal.", "file": "pwiz.py", "line": 64}, {"description": "Information disclosure vulnerability in print_header function. Line 152 directly prints the command line arguments without sanitization, which could expose sensitive information like passwords if they were passed as command line arguments (despite the tool using getpass()). Additionally, line 154 prints the database name without escaping, which could contain sensitive path information or special characters that might cause issues in generated comments.", "file": "pwiz.py", "line": 152}, {"description": "Race condition vulnerability in get_or_create method. Between lines 6866 and 6875, there's a classic time-of-check-time-of-use (TOCTOU) race condition. The method first tries to get an existing record (line 6866), and if it doesn't exist, creates a new one (line 6872). However, between these operations, another thread could create the same record, leading to an IntegrityError. While there's a catch block for IntegrityError (line 6873), it tries to get the record again (line 6875), but if that record was deleted by another thread in the meantime, it will raise the original IntegrityError, potentially masking the real issue.", "file": "peewee.py", "line": 6866}, {"description": "Resource leak potential in transaction handling. Line 4513 calls db.pop_transaction() in a finally block, but this could raise an IndexError if the transaction stack is empty (due to the bug in pop_transaction method at line 3440). If pop_transaction() raises an exception in the finally block, it could mask the original exception that caused the transaction to fail, leading to difficult-to-debug issues and potential resource leaks.", "file": "peewee.py", "line": 4513}], "updated_files": {}}
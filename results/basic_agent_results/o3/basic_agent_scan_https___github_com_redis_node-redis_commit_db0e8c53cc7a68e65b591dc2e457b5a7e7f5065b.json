{"repo_id": "redis_node-redis_db0e8c53cc7a68e65b591dc2e457b5a7e7f5065b", "bugs": [{"description": "The constructor in index.js iterates over 'options.tls' using a for-in loop without first checking whether 'options.tls' is defined. If the user does not supply a 'tls' option (undefined), executing 'for (var tls_option in options.tls)' throws a TypeError ('Cannot convert undefined or null to object'), preventing the client from being created.", "file": "index.js", "line": 29}, {"description": "createClient() should allow being called without any arguments, but the current implementation throws a TypeError. When no parameters are passed, 'port_arg' and 'options' are both undefined, leading to 'options = utils.clone(port_arg || options);' returning undefined. The next line attempts 'options.host = options.host || host_arg;', which raises 'Cannot set property \\\"host\\\" of undefined'.", "file": "lib/createClient.js", "line": 38}, {"description": "The code iterates over 'options.rename_commands' without verifying it exists: `for (var command in options.rename_commands) { ... }` . If 'rename_commands' is not provided (undefined), this will throw a TypeError ('Cannot convert undefined or null to object').", "file": "index.js", "line": 70}, {"description": "The constructor in index.js iterates over 'options.tls' using a for-in loop without first checking whether 'options.tls' is defined. If the user does not supply a 'tls' option (undefined), executing 'for (var tls_option in options.tls)' throws a TypeError ('Cannot convert undefined or null to object'), preventing the client from being created.", "file": "index.js", "line": 29}, {"description": "createClient() should allow being called without any arguments, but the current implementation throws a TypeError. When no parameters are passed, 'port_arg' and 'options' are both undefined, leading to 'options = utils.clone(port_arg || options);' returning undefined. The next line attempts 'options.host = options.host || host_arg;', which raises 'Cannot set property \\\"host\\\" of undefined'.", "file": "lib/createClient.js", "line": 38}, {"description": "The code iterates over 'options.rename_commands' without verifying it exists: `for (var command in options.rename_commands) { ... }` . If 'rename_commands' is not provided (undefined), this will throw a TypeError ('Cannot convert undefined or null to object').", "file": "index.js", "line": 70}, {"description": "In the data event handler of stunnel.stderr, the code calls clearTimeout(this.timer). Inside that callback, 'this' refers to the stderr stream, not the StunnelProcess instance where the timer property is stored. As a result, the intended timer is never cleared, and the timeout may still fire, emitting an erroneous timeout error even after stunnel has started.", "file": "test/lib/stunnel-process.js", "line": 40}], "updated_files": {"/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpy5euxre3/test/lib/stunnel-process.js": "'use strict';\n\n// helper to start and stop the stunnel process.\nvar spawn = require('child_process').spawn;\nvar EventEmitter = require('events');\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\n\n// Newer Node.js versions > 0.10 return the EventEmitter right away and using .EventEmitter was deprecated\nif (typeof EventEmitter !== 'function') {\n    EventEmitter = EventEmitter.EventEmitter;\n}\n\nfunction once (cb) {\n    var called = false;\n    return function () {\n        if (called) return;\n        called = true;\n        cb.apply(this, arguments);\n    };\n}\n\nfunction StunnelProcess (conf_dir) {\n    EventEmitter.call(this);\n\n    // set up an stunnel to redis; edit the conf file to include required absolute paths\n    var conf_file = path.resolve(conf_dir, 'stunnel.conf');\n    var conf_text = fs.readFileSync(conf_file + '.template').toString().replace(/__dirname/g, conf_dir);\n\n    fs.writeFileSync(conf_file, conf_text);\n    var stunnel = this.stunnel = spawn('stunnel', [conf_file]);\n\n    // handle child process events, and failure to set up tunnel\n    var self = this;\n    this.timer = setTimeout(function () {\n        self.emit('error', new Error('Timeout waiting for stunnel to start'));\n    }, 8000);\n\n    stunnel.on('error', function (err) {\n        self.clear();\n        self.emit('error', err);\n    });\n\n    stunnel.on('exit', function (code) {\n        self.clear();\n        if (code === 0) {\n            self.emit('stopped');\n        } else {\n            self.emit('error', new Error('Stunnel exited unexpectedly; code = ' + code));\n        }\n    });\n\n    // wait to stunnel to start\n    stunnel.stderr.on('data', function (data) {\n        if (data.toString().match(/Service.+redis.+bound/)) {\n            // 'this' refers to the stderr stream, so use self to access the timer on the StunnelProcess instance\n            clearTimeout(self.timer);\n            self.emit('started');\n        }\n    });\n}\nutil.inherits(StunnelProcess, EventEmitter);\n\nStunnelProcess.prototype.clear = function () {\n    this.stunnel = null;\n    clearTimeout(this.timer);\n};\n\nStunnelProcess.prototype.stop = function (done) {\n    if (this.stunnel) {\n        this.stunnel.kill();\n    }\n};\n\nmodule.exports = {\n    start: function (done, conf_dir) {\n        done = once(done);\n        var stunnel = new StunnelProcess(conf_dir);\n        stunnel.once('error', done.bind(done));\n        stunnel.once('started', done.bind(done, null, stunnel));\n    },\n    stop: function (stunnel, done) {\n        stunnel.removeAllListeners();\n        stunnel.stop();\n        stunnel.once('error', done.bind(done));\n        stunnel.once('stopped', done.bind(done, null));\n    }\n};\n"}}
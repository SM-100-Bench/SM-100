{"repo_id": "py-pdf_pypdf_2505", "bugs": [{"description": "Logical precedence error in condition when determining whether to inherit page size in `insert_blank_page`. Currently: \n\n```\nif width is None or height is None and (self._get_num_pages() - 1) >= index:\n```\n\nBecause `and` has higher precedence than `or`, this is parsed as\n```\nif width is None or (height is None and ...):\n```\nIf `width is None` is True, the right part is never evaluated, so the code proceeds to use `self.pages[index]` even when `index` is out of range, leading to `IndexError`. Intended logic is likely `(width is None or height is None) and ...`.\n\nFix: add parentheses.\n\nExample to reproduce:\n```\nwriter = PdfWriter(); writer.insert_blank_page(width=None, height=100, index=5)\n```\nRaises IndexError.\n", "file": "pypdf/_writer.py", "line": 555}, {"description": "Generation numbers of indirect objects are lost when writing the PDF. \n\n`_write_pdf_structure` always writes objects using the header pattern:\n\n```python\nstream.write(f\"{idnum} 0 obj\\n\".encode())\n```\n\nregardless of the actual generation stored in `obj.indirect_reference.generation`. This becomes problematic after an object has been replaced via `_replace_object`, which explicitly preserves the previous generation number:\n\n```python\ngen = self._objects[indirect_reference - 1].indirect_reference.generation\n...\nobj.indirect_reference = IndirectObject(indirect_reference, gen, self)\n```\n\nIf `gen` is non-zero, the cross-reference table will still point to generation **0** (written later in `_write_xref_table`), but the original intent was to keep the higher generation. The discrepancy produces an invalid PDF and can confuse compliant PDF readers.\n\nFix: respect the stored generation when emitting each object and when writing the xref entries, e.g.\n\n```python\ngen = obj.indirect_reference.generation\nstream.write(f\"{idnum} {gen} obj\\n\".encode())\n...\nfor idnum, (offset, obj) in enumerate(zip(object_positions, self._objects), start=1):\n    gen = obj.indirect_reference.generation if obj else 0\n    stream.write(f\"{offset:0>10} {gen:0>5} n \\n\".encode())\n```", "file": "pypdf/_writer.py", "line": 1247}], "updated_files": {}}
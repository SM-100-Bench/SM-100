{"repo_id": "auth0_node-jsonwebtoken_2764a64908d97c043d62eba0bf6c600674f9a6d6", "bugs": [{"description": "Incorrect Chai assertion syntax: `exist` is a property, not a method. Using `expect(err).to.be.exist();` will throw a TypeError at runtime. It should be `expect(err).to.exist;` (or `expect(err).to.exist`).", "file": "test/async_sign.tests.js", "line": 90}], "updated_files": {"/var/folders/hp/rv5nbb3140l0404lfjq_pq140000gn/T/tmpver82lfe/test/async_sign.tests.js": "var jwt = require('../index');\nvar expect = require('chai').expect;\nvar jws = require('jws');\n\ndescribe('signing a token asynchronously', function() {\n\n  describe('when signing a token', function() {\n    var secret = 'shhhhhh';\n\n    it('should return the same result as singing synchronously', function(done) {\n      jwt.sign({ foo: 'bar' }, secret, { algorithm: 'HS256' }, function (err, asyncToken) {\n        if (err) return done(err);\n        var syncToken = jwt.sign({ foo: 'bar' }, secret, { algorithm: 'HS256' });\n        expect(asyncToken).to.be.a('string');\n        expect(asyncToken.split('.')).to.have.length(3);\n        expect(asyncToken).to.equal(syncToken);\n        done();\n      });\n    });\n\n    it('should work with empty options', function (done) {\n      jwt.sign({abc: 1}, \"secret\", {}, function (err, res) {\n        expect(err).to.be.null();\n        done();\n      });\n    });\n\n    it('should work without options object at all', function (done) {\n      jwt.sign({abc: 1}, \"secret\", function (err, res) {\n        expect(err).to.be.null();\n        done();\n      });\n    });\n\n    it('should work with none algorithm where secret is set', function(done) {\n      jwt.sign({ foo: 'bar' }, 'secret', { algorithm: 'none' }, function(err, token) {\n        expect(token).to.be.a('string');\n        expect(token.split('.')).to.have.length(3);\n        done();\n      });\n    });\n\n    //Known bug: https://github.com/brianloveswords/node-jws/issues/62\n    //If you need this use case, you need to go for the non-callback-ish code style.\n    it.skip('should work with none algorithm where secret is falsy', function(done) {\n      jwt.sign({ foo: 'bar' }, undefined, { algorithm: 'none' }, function(err, token) {\n        expect(token).to.be.a('string');\n        expect(token.split('.')).to.have.length(3);\n        done();\n      });\n    });\n\n    it('should return error when secret is not a cert for RS256', function(done) {\n      //this throw an error because the secret is not a cert and RS256 requires a cert.\n      jwt.sign({ foo: 'bar' }, secret, { algorithm: 'RS256' }, function (err) {\n        expect(err).to.be.ok();\n        done();\n      });\n    });\n\n    it('should return error on wrong arguments', function(done) {\n      //this throw an error because the secret is not a cert and RS256 requires a cert.\n      jwt.sign({ foo: 'bar' }, secret, { notBefore: {} }, function (err) {\n        expect(err).to.be.ok();\n        done();\n      });\n    });\n\n    it('should return error on wrong arguments (2)', function(done) {\n      jwt.sign('string', 'secret', {noTimestamp: true}, function (err) {\n        expect(err).to.be.ok();\n        expect(err).to.be.instanceof(Error);\n        done();\n      });\n    });\n\n    it('should not stringify the payload', function (done) {\n      jwt.sign('string', 'secret', {}, function (err, token) {\n        if (err) { return done(err); }\n        expect(jws.decode(token).payload).to.equal('string');\n        done();\n      });\n    });\n\n    describe('secret must have a value', function(){\n      [undefined, '', 0].forEach(function(secret){\n        it('should return an error if the secret is falsy and algorithm is not set to none: ' + (typeof secret === 'string' ? '(empty string)' : secret), function(done) {\n        // This is needed since jws will not answer for falsy secrets\n          jwt.sign('string', secret, {}, function(err, token) {\n            expect(err).to.exist;\n            expect(err.message).to.equal('secretOrPrivateKey must have a value');\n            expect(token).to.not.exist;\n            done();\n          });\n        });\n      });\n    });\n  });\n});\n"}}
{"repo_id": "tsenart_vegeta_6fbe391628eeeae1adf39522a55078797e6e7f2e", "bugs": [{"description": "Attacker.Attack uses the duration returned by Pacer.Pace directly in time.Sleep (see line 429). If a Pacer implementation mistakenly returns a negative duration \u2014 something that can happen due to numeric issues in SinePacer or LinearPacer \u2014 the call `time.Sleep(wait)` will trigger a runtime panic (\"negative time\") and crash the program. The code should guard against negative waits (e.g., by clamping them to zero) before calling time.Sleep.", "file": "lib/attack.go", "line": 429}, {"description": "DNSCaching installs a custom DialContext that uses a shared math/rand.Rand (`rng`) instance created with rand.NewSource. rand.Rand is NOT safe for concurrent use, yet DialContext can be invoked concurrently by many goroutines (multiple HTTP requests). Concurrent calls to `rng.Shuffle` will race and may crash with \"concurrent read/write\" panics or produce incorrect shuffling. Each call must use its own locked RNG or the default global (which has internal locking).", "file": "lib/attack.go", "line": 310}], "updated_files": {}}
diff --git a/server/data/file/file.go b/server/data/file/file.go
index 5586f48..6d9d235 100644
--- a/server/data/file/file.go
+++ b/server/data/file/file.go
@@ -56,59 +56,65 @@ func (b *Backend) GetFile(file *common.File) (reader io.ReadCloser, err error) {
 		return nil, fmt.Errorf("unable to open file %s : %s", path, err)
 	}
 
 	return reader, nil
 }
 
 // AddFile implementation for file data backend will creates a new file for the given upload
 // and save it on filesystem with the given file reader
 func (b *Backend) AddFile(file *common.File, fileReader io.Reader) (err error) {
 	dir, path, err := b.getPath(file)
 	if err != nil {
 		return err
 	}
 
 	// Create directory
 	err = os.MkdirAll(dir, 0777)
 	if err != nil {
 		return fmt.Errorf("unable to create upload directory")
 	}
 
 	// Create file
 	out, err := os.Create(path)
 	if err != nil {
 		return fmt.Errorf("unable to create file %s : %s", path, err)
 	}
+	defer func() {
+		cerr := out.Close()
+		if err == nil && cerr != nil {
+			err = cerr
+		}
+	}()
 
 	// Copy file data from the client request body
 	// to the file system
 	_, err = io.Copy(out, fileReader)
 	if err != nil {
 		return fmt.Errorf("unable to save file %s : %s", path, err)
 	}
 
-	return nil
+	return err
 }
 
 // RemoveFile implementation for file data backend will delete the given
 // file from filesystem
 func (b *Backend) RemoveFile(file *common.File) (err error) {
 	_, path, err := b.getPathCompat(file)
 	if err != nil {
 		if err == errNoSuchFileOrDirectory {
 			return nil
 		}
 		return err
 	}
 
 	// Remove file
 	err = os.Remove(path)
 	if err != nil {
 		return fmt.Errorf("unable to remove %s : %s", path, err)
 	}
 
 	// Remove parent directory if empty
 	go func() { _ = os.Remove(filepath.Dir(path)) }()
 
 	return nil
 }
 


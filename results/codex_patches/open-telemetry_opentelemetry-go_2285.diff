diff --git a/semconv/v1.4.0/http.go b/semconv/v1.4.0/http.go
index f7157c66..bf7693a4 100644
--- a/semconv/v1.4.0/http.go
+++ b/semconv/v1.4.0/http.go
@@ -33,93 +33,97 @@ var (
 
 // NetAttributesFromHTTPRequest generates attributes of the net
 // namespace as specified by the OpenTelemetry specification for a
 // span.  The network parameter is a string that net.Dial function
 // from standard library can understand.
 func NetAttributesFromHTTPRequest(network string, request *http.Request) []attribute.KeyValue {
 	attrs := []attribute.KeyValue{}
 
 	switch network {
 	case "tcp", "tcp4", "tcp6":
 		attrs = append(attrs, NetTransportTCP)
 	case "udp", "udp4", "udp6":
 		attrs = append(attrs, NetTransportUDP)
 	case "ip", "ip4", "ip6":
 		attrs = append(attrs, NetTransportIP)
 	case "unix", "unixgram", "unixpacket":
 		attrs = append(attrs, NetTransportUnix)
 	default:
 		attrs = append(attrs, NetTransportOther)
 	}
 
 	peerName, peerIP, peerPort := "", "", 0
 	{
 		hostPart := request.RemoteAddr
 		portPart := ""
-		if idx := strings.LastIndex(hostPart, ":"); idx >= 0 {
+		if h, p, err := net.SplitHostPort(hostPart); err == nil {
+			hostPart, portPart = h, p
+		} else if idx := strings.LastIndex(hostPart, ":"); idx >= 0 {
 			hostPart = request.RemoteAddr[:idx]
 			portPart = request.RemoteAddr[idx+1:]
 		}
 		if hostPart != "" {
 			if ip := net.ParseIP(hostPart); ip != nil {
 				peerIP = ip.String()
 			} else {
 				peerName = hostPart
 			}
 
 			if portPart != "" {
 				numPort, err := strconv.ParseUint(portPart, 10, 16)
 				if err == nil {
-					peerPort = (int)(numPort)
+					peerPort = int(numPort)
 				} else {
 					peerName, peerIP = "", ""
 				}
 			}
 		}
 	}
 	if peerName != "" {
 		attrs = append(attrs, NetPeerNameKey.String(peerName))
 	}
 	if peerIP != "" {
 		attrs = append(attrs, NetPeerIPKey.String(peerIP))
 	}
 	if peerPort != 0 {
 		attrs = append(attrs, NetPeerPortKey.Int(peerPort))
 	}
 
 	hostIP, hostName, hostPort := "", "", 0
 	for _, someHost := range []string{request.Host, request.Header.Get("Host"), request.URL.Host} {
-		hostPart := ""
-		if idx := strings.LastIndex(someHost, ":"); idx >= 0 {
-			strPort := someHost[idx+1:]
-			numPort, err := strconv.ParseUint(strPort, 10, 16)
-			if err == nil {
-				hostPort = (int)(numPort)
+		hostPart := someHost
+		strPort := ""
+		if h, p, err := net.SplitHostPort(hostPart); err == nil {
+			hostPart, strPort = h, p
+		} else if idx := strings.LastIndex(hostPart, ":"); idx >= 0 {
+			strPort = hostPart[idx+1:]
+			hostPart = hostPart[:idx]
+		}
+		if strPort != "" {
+			if numPort, err := strconv.ParseUint(strPort, 10, 16); err == nil {
+				hostPort = int(numPort)
 			}
-			hostPart = someHost[:idx]
-		} else {
-			hostPart = someHost
 		}
 		if hostPart != "" {
 			ip := net.ParseIP(hostPart)
 			if ip != nil {
 				hostIP = ip.String()
 			} else {
 				hostName = hostPart
 			}
 			break
 		} else {
 			hostPort = 0
 		}
 	}
 	if hostIP != "" {
 		attrs = append(attrs, NetHostIPKey.String(hostIP))
 	}
 	if hostName != "" {
 		attrs = append(attrs, NetHostNameKey.String(hostName))
 	}
 	if hostPort != 0 {
 		attrs = append(attrs, NetHostPortKey.Int(hostPort))
 	}
 
 	return attrs
 }

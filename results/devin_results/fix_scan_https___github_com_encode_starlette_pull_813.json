{"session_id": "devin-a85b24f7090d4e3290f37cdde9205c66", "issues": [{"file": "starlette/middleware/authentication.py", "line": 40, "description": "Using WebSocket close code 1000 (normal closure) for authentication failures instead of a more appropriate code like 1008 (Policy Violation)"}, {"file": "starlette/middleware/authentication.py", "line": 46, "description": "No type checking on auth_result before unpacking, could lead to runtime errors if backend returns non-tuple value that's not None"}, {"file": "starlette/middleware/authentication.py", "line": 51, "description": "Default error handler exposes exception message in response, potentially leaking sensitive authentication information"}, {"file": "starlette/middleware/base.py", "line": 183, "description": "Raising app_exc without verifying it's a valid exception object could lead to runtime errors"}, {"file": "starlette/middleware/base.py", "line": 222, "description": "Awaiting self.background() without checking if it's an awaitable object could cause runtime errors"}, {"file": "starlette/middleware/base.py", "line": 159, "description": "Assertion without error handling could lead to uncaught AssertionError if message type is unexpected"}, {"file": "starlette/middleware/base.py", "line": 163, "description": "Assertion without error handling could lead to uncaught AssertionError if message type is unexpected"}, {"file": "starlette/middleware/cors.py", "line": 154, "description": "Direct access to request_headers['Origin'] without checking if the header exists could cause KeyError"}, {"file": "starlette/middleware/cors.py", "line": 105, "description": "Direct access to request_headers['origin'] without checking if the header exists could cause KeyError"}, {"file": "starlette/middleware/cors.py", "line": 106, "description": "Direct access to request_headers['access-control-request-method'] without checking if the header exists could cause KeyError"}, {"file": "starlette/middleware/cors.py", "line": 128, "description": "Splitting requested_headers by comma without handling whitespace could lead to incorrect header matching"}, {"file": "starlette/middleware/errors.py", "line": 192, "description": "HTML non-breaking space entity is incorrectly written as '&nbsp' without the required semicolon, causing invalid HTML"}, {"file": "starlette/middleware/errors.py", "line": 231, "description": "No null check on exc.__traceback__ before using it with inspect.getinnerframes, could cause errors with certain exception types"}, {"file": "starlette/middleware/errors.py", "line": 252, "description": "Simple string contains check for Accept header doesn't properly handle quality factors in content negotiation"}, {"file": "starlette/middleware/gzip.py", "line": 24, "description": "Simple string contains check for Accept-Encoding doesn't handle quality values properly (e.g., 'gzip;q=0' would still enable compression)"}, {"file": "starlette/middleware/gzip.py", "line": 56, "description": "Incorrect use of startswith() with a tuple of excluded content types, which will cause TypeError as startswith() expects a string prefix"}, {"file": "starlette/middleware/gzip.py", "line": 91, "description": "Deleting Content-Length header without checking if it exists first could raise KeyError"}, {"file": "starlette/middleware/gzip.py", "line": 125, "description": "Using 'with' statement for gzip resources that are also used in apply_compression could lead to premature resource closure if exceptions occur"}, {"file": "starlette/middleware/httpsredirect.py", "line": 11, "description": "No verification that 'scheme' key exists in scope dictionary before accessing it, could lead to KeyError"}, {"file": "starlette/middleware/httpsredirect.py", "line": 14, "description": "Incorrect port handling when URL has port 443 for HTTP or port 80 for HTTPS, leading to incorrect redirects"}, {"file": "starlette/middleware/sessions.py", "line": 50, "description": "No error handling for JSON decoding, could raise json.JSONDecodeError if cookie contains invalid JSON data"}, {"file": "starlette/middleware/sessions.py", "line": 61, "description": "No error handling for JSON serialization, could raise TypeError if session contains objects that aren't JSON serializable"}, {"file": "starlette/middleware/sessions.py", "line": 59, "description": "Using truthiness check on scope['session'] could fail to persist session if it contains only falsy values"}, {"file": "starlette/middleware/sessions.py", "line": 28, "description": "Converting secret_key to string could potentially expose sensitive information if logged or printed"}, {"file": "starlette/middleware/trustedhost.py", "line": 40, "description": "Splitting host header by ':' doesn't handle IPv6 addresses correctly, which use colons as separators"}, {"file": "starlette/middleware/trustedhost.py", "line": 44, "description": "Wildcard matching with host.endswith(pattern[1:]) is insecure and could allow domains like 'malicious-example.com' to match '*.example.com'"}, {"file": "starlette/middleware/trustedhost.py", "line": 56, "description": "Adding 'www.' to url.netloc doesn't account for ports in the netloc, potentially creating invalid redirect URLs"}, {"file": "starlette/middleware/trustedhost.py", "line": 23, "description": "Using assertions for security validation is unsafe as they may be stripped in optimized Python builds"}, {"file": "starlette/middleware/wsgi.py", "line": 40, "description": "Setting wsgi.errors to sys.stdout is not thread-safe and could lead to interleaved output from different requests"}, {"file": "starlette/middleware/wsgi.py", "line": 78, "description": "Assertion without error handling could lead to uncaught AssertionError if scope type is not 'http'"}, {"file": "starlette/middleware/wsgi.py", "line": 109, "description": "No validation of exc_info structure before using it to raise an exception, could lead to runtime errors if malformed"}, {"file": "starlette/middleware/wsgi.py", "line": 126, "description": "Splitting status string assumes it contains a space, could raise ValueError if malformed"}, {"file": "starlette/middleware/wsgi.py", "line": 129, "description": "Assuming all header names and values can be encoded as ASCII could lead to UnicodeEncodeError for non-ASCII characters"}, {"file": "starlette/middleware/wsgi.py", "line": 35, "description": "Assuming query_string can be decoded as ASCII could lead to UnicodeDecodeError for non-ASCII characters"}, {"file": "starlette/middleware/wsgi.py", "line": 92, "description": "Using math.inf as max size for memory object stream could lead to memory exhaustion with large number of messages"}]}
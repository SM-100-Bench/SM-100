{"scanned_subsystems":[{"name":"Utilities and Helpers","files":["requests/_internal_utils.py","requests/certs.py","requests/compat.py","requests/exceptions.py","requests/help.py","requests/hooks.py","requests/packages.py","requests/status_codes.py","requests/utils.py"]}],"changesets":[{"title":"Fix Bugs in Utilities and Helpers Subsystem","body":"## Bug Fixes in Requests Library\n\nThis pull request addresses two critical bugs in the Utilities and Helpers subsystem:\n\n### 1. Incorrect Charset Normalizer Check in help.py\n- **Issue**: The `info()` function in `help.py` had an incorrect logic for checking charset normalizer usage.\n- **Previous Behavior**: `'using_charset_normalizer': chardet is None` was incorrect, which would always return `False`.\n- **Fix**: Changed to `'using_charset_normalizer': charset_normalizer is not None` to correctly indicate whether charset_normalizer is being used.\n\n### 2. Incorrect Module Path Replacement in packages.py\n- **Issue**: The module path replacement for chardet was using an incorrect `.replace()` method.\n- **Previous Behavior**: `target.replace(target, 'chardet')` would fail for certain module names and not create the correct module path.\n- **Fix**: Directly used `'requests.packages.chardet'` to ensure the correct module path is created.\n\nThese fixes improve the library's module detection and information reporting capabilities, preventing potential runtime issues and improving overall reliability.\n\n### Commits\n- Fixed `help.py`: Corrected charset normalizer usage check\n- Fixed `packages.py`: Improved module path handling for chardet","commits":[{"message":"Fix the bug in the info() function in help.py where 'using_charset_normalizer': chardet is None is incorrect. It should be checking if charset_normalizer is not None instead, since it's trying to indicate whether charset_normalizer is being used. The correct implementation should be 'using_charset_normalizer': charset_normalizer is not None.","diff":"diff --git a/requests/help.py b/requests/help.py\nindex 4cd6389..e4d9b40 100644\n--- a/requests/help.py\n+++ b/requests/help.py\n@@ -113,7 +113,7 @@ def info():\n         'implementation': implementation_info,\n         'system_ssl': system_ssl_info,\n         'using_pyopenssl': pyopenssl is not None,\n-        'using_charset_normalizer': chardet is None,\n+        'using_charset_normalizer': charset_normalizer is not None,\n         'pyOpenSSL': pyopenssl_info,\n         'urllib3': urllib3_info,\n         'chardet': chardet_info,"},{"message":"Fix the bug in packages.py, line 24 where it uses target.replace(target, 'chardet'). If target is already 'chardet', this would just return 'chardet', not 'requests.packages.chardet'. If target is 'charset_normalizer', it would incorrectly try to replace the entire string with 'chardet', resulting in just 'chardet' instead of replacing only the matching part. The correct implementation should use string concatenation or a different approach to ensure the proper module path is created.","diff":"diff --git a/requests/packages.py b/requests/packages.py\nindex 00196bf..c407069 100644\n--- a/requests/packages.py\n+++ b/requests/packages.py\n@@ -22,5 +22,5 @@ for package in ('urllib3', 'idna'):\n target = chardet.__name__\n for mod in list(sys.modules):\n     if mod == target or mod.startswith(target + '.'):\n-        sys.modules['requests.packages.' + target.replace(target, 'chardet')] = sys.modules[mod]\n+        sys.modules['requests.packages.chardet'] = sys.modules[mod]\n # Kinda cool, though, right?"}]}]}
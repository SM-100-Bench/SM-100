{"scanned_subsystems":[{"name":"Block Rules","files":["markdown_it/rules_block/__init__.py","markdown_it/rules_block/blockquote.py","markdown_it/rules_block/code.py","markdown_it/rules_block/fence.py","markdown_it/rules_block/heading.py","markdown_it/rules_block/hr.py","markdown_it/rules_block/html_block.py","markdown_it/rules_block/lheading.py","markdown_it/rules_block/list.py","markdown_it/rules_block/paragraph.py","markdown_it/rules_block/reference.py","markdown_it/rules_block/state_block.py","markdown_it/rules_block/table.py"]}],"changesets":[{"title":"Fix Trailing Backslash Handling in escapedSplit Function","body":"## Bug Fix: Handling of Trailing Backslash in Table Parsing\n\n### Issue\nIn the `escapedSplit` function within the Block Rules subsystem, there was a potential bug when a backslash is the last character in the string. The function was incorrectly setting `isEscaped` to true without properly handling this edge case, which could lead to unexpected parsing behavior.\n\n### Changes\n- Modified the `escapedSplit` function in `table.py` to correctly handle trailing backslashes\n- Added a check to set `isEscaped` to `False` when a backslash is the last character in the string\n- Introduced comprehensive test cases to verify the fix\n\n### Test Cases Added\nThe new test cases cover various scenarios:\n- Normal string splitting\n- Escaped pipe characters\n- Trailing backslash\n- Multiple backslashes in different positions\n\n### Impact\nThis fix ensures more robust parsing of markdown tables, preventing potential parsing errors when strings end with a backslash.\n\n### Verification\nNew test cases have been added to `test_escaped_split.py` to validate the correct behavior of the `escapedSplit` function.","commits":[{"message":"Fix the potential bug in table.py's escapedSplit function where if a backslash is the last character in the string, it sets isEscaped to true but doesn't handle this special case. This could lead to unexpected behavior as the function assumes the backslash is escaping a following character, but there isn't one. The fix should properly handle the case where a backslash is the last character in the string.","diff":"diff --git a/markdown_it/rules_block/table.py b/markdown_it/rules_block/table.py\nindex e3db858..fc047cc 100644\n--- a/markdown_it/rules_block/table.py\n+++ b/markdown_it/rules_block/table.py\n@@ -37,9 +37,15 @@ def escapedSplit(string):\n                 current += string[lastPos : pos - 1]\n                 lastPos = pos\n \n+        # Check if this is a backslash\n         isEscaped = ch == 0x5C  # /* \\ */\n         pos += 1\n \n+        # If we're at the end of the string and the last char was a backslash,\n+        # it's not actually escaping anything, so set isEscaped to False\n+        if pos >= max and isEscaped:\n+            isEscaped = False\n+            \n         ch = charCodeAt(string, pos)\n \n     result.append(current + string[lastPos:])\ndiff --git a/test_escaped_split.py b/test_escaped_split.py\nnew file mode 100644\nindex 0000000..92f95ff\n--- /dev/null\n+++ b/test_escaped_split.py\n@@ -0,0 +1,21 @@\n+from markdown_it.rules_block.table import escapedSplit\n+\n+def test_escaped_split_with_trailing_backslash():\n+    \"\"\"Test that escapedSplit correctly handles a backslash at the end of the string.\"\"\"\n+    # Test normal case\n+    assert escapedSplit('a|b|c') == ['a', 'b', 'c']\n+    \n+    # Test escaped pipe\n+    assert escapedSplit('a|b\\\\|c') == ['a', 'b|c']\n+    \n+    # Test trailing backslash - this is the case we fixed\n+    assert escapedSplit('a|b\\\\') == ['a', 'b\\\\']\n+    \n+    # Additional test cases\n+    assert escapedSplit('a\\\\|b') == ['a|b']\n+    assert escapedSplit('a\\\\\\\\|b') == ['a\\\\|b']\n+    assert escapedSplit('a|b\\\\\\\\') == ['a', 'b\\\\\\\\']\n+\n+if __name__ == \"__main__\":\n+    test_escaped_split_with_trailing_backslash()\n+    print(\"All tests passed!\")\n\\ No newline at end of file"}]}]}
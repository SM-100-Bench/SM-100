{"scanned_subsystems":[{"name":"Platform Handlers","files":["lib/fsevents-handler.js","lib/nodefs-handler.js"]}],"changesets":[{"title":"Fix Multiple Bugs in Platform Handlers Subsystem","body":"## Bug Fixes in Platform Handlers\n\nThis pull request addresses several critical bugs in the Platform Handlers subsystem:\n\n### 1. FSEvents Handler Logic Corrections\n- Fixed incorrect logic in `setFSEventsListener` and `calcDepth` functions in `fsevents-handler.js`\n- Corrected the use of `indexOf()` with negation operator, which was causing incorrect path prefix checks\n- Updated conditions to properly check if a path starts with a specific prefix\n\n### 2. Redundant Closed Check Removal\n- Removed duplicate `this.fsw.closed` check in `checkExists` method\n- Improved code clarity and eliminated potential confusion\n\n### 3. Error Handling Improvements\n- Enhanced error handling in `_watchWithFsEvents` method\n- Now properly handling and logging errors from stat operations\n- Passing errors to FSWatcher's error handler instead of silently ignoring them\n\n### 4. Symlink Path Handling\n- Fixed symlink path storage in `_handleSymlink` method\n- Now storing the actual link path instead of a boolean value\n- Added proper error handling and ready state management\n\n### 5. Minor Code Cleanup\n- Added missing semicolon in `_handleFile` method of `NodeFsHandler`\n\nThese changes improve the reliability, error handling, and overall code quality of the Platform Handlers subsystem.","commits":[{"message":"Fix the logic error in the setFSEventsListener function (line 125) and calcDepth function (line 198) in fsevents-handler.js. Both functions incorrectly use the negation operator (!) with indexOf, which returns 0 when a string is found at the beginning. This causes the condition to be true when the path does NOT start with the expected prefix, which is the opposite of what's intended. Update both functions to correctly check if a path starts with a specific prefix.","diff":"diff --git a/lib/fsevents-handler.js b/lib/fsevents-handler.js\nindex 007a7ec..87a004e 100644\n--- a/lib/fsevents-handler.js\n+++ b/lib/fsevents-handler.js\n@@ -123,7 +123,7 @@ function setFSEventsListener(path, realPath, listener, rawEmitter, fsw) {\n     if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);\n     if (\n       fullPath === resolvedPath ||\n-      !fullPath.indexOf(resolvedPath + sysPath.sep)\n+      fullPath.indexOf(resolvedPath + sysPath.sep) === 0\n     ) listener(fullPath, flags, info);\n   };\n \n@@ -196,7 +196,7 @@ const canUse = () => fsevents && FSEventsWatchers.size < 128;\n // determines subdirectory traversal levels from root to path\n const calcDepth = (path, root) => {\n   let i = 0;\n-  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;\n+  while (path.indexOf(root) === 0 && (path = sysPath.dirname(path)) !== root) i++;\n   return i;\n };\n "},{"message":"Fix the duplicate check for `this.fsw.closed` in the checkExists method of FsEventsHandler (lines 243-244). Remove the redundant second check to improve code clarity and prevent potential confusion.","diff":"diff --git a/lib/fsevents-handler.js b/lib/fsevents-handler.js\nindex 87a004e..a434514 100644\n--- a/lib/fsevents-handler.js\n+++ b/lib/fsevents-handler.js\n@@ -242,7 +242,6 @@ async checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts\n   try {\n     const stats = await stat(path)\n     if (this.fsw.closed) return;\n-    if (this.fsw.closed) return;\n     if (sameTypes(info, stats)) {\n       this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\n     } else {"},{"message":"Fix the silently ignored errors in the try-catch block in the _watchWithFsEvents method's watchCallback function (lines 326-328). Currently, errors from the stat operation are caught but not handled or logged, which could hide important errors. Modify the code to properly handle these errors by passing them to the FSWatcher's error handler.","diff":"diff --git a/lib/fsevents-handler.js b/lib/fsevents-handler.js\nindex a434514..8cf9d5b 100644\n--- a/lib/fsevents-handler.js\n+++ b/lib/fsevents-handler.js\n@@ -325,7 +325,9 @@ _watchWithFsEvents(watchPath, realPath, transform, globFilter) {\n         let stats;\n         try {\n           stats = await stat(path);\n-        } catch (error) {}\n+        } catch (error) {\n+          this.fsw._handleError(error);\n+        }\n         if (this.fsw.closed) return;\n         if (this.checkIgnored(path, stats)) return;\n         if (sameTypes(info, stats)) {\n@@ -513,7 +515,9 @@ async _addToFsEvents(path, transform, forceAdd, priorDepth) {\n       let realPath;\n       try {\n         realPath = await realpath(wh.watchPath);\n-      } catch (e) {}\n+      } catch (e) {\n+        this.fsw._handleError(e);\n+      }\n       this.initWatch(realPath, path, wh, processPath);\n     }\n   }"},{"message":"Fix the missing semicolon on line 372 in the _handleFile method of NodeFsHandler. The line 'this.fsw._closeFile(path)' is missing a semicolon at the end, which could cause issues in certain JavaScript environments that don't automatically insert semicolons.","diff":"diff --git a/lib/nodefs-handler.js b/lib/nodefs-handler.js\nindex 3d32475..d593967 100644\n--- a/lib/nodefs-handler.js\n+++ b/lib/nodefs-handler.js\n@@ -370,7 +370,7 @@ _handleFile(file, stats, initialAdd) {\n           this.fsw._emit(EV_CHANGE, file, newStats);\n         }\n         if (isLinux && prevStats.ino !== newStats.ino) {\n-          this.fsw._closeFile(path)\n+          this.fsw._closeFile(path);\n           prevStats = newStats;\n           this.fsw._addPathCloser(path, this._watchWithNodeFs(file, listener));\n         } else {"},{"message":"Fix the issue in the _handleSymlink method at line 444 where 'this.fsw._symlinkPaths.set(full, true)' stores a boolean value instead of the actual link path. This could cause issues if code elsewhere expects the value to be the link path. Update the code to store the actual link path instead of just a boolean value.","diff":"diff --git a/lib/nodefs-handler.js b/lib/nodefs-handler.js\nindex d593967..c8cf690 100644\n--- a/lib/nodefs-handler.js\n+++ b/lib/nodefs-handler.js\n@@ -442,7 +442,17 @@ async _handleSymlink(entry, directory, path, item) {\n     return true;\n   }\n \n-  this.fsw._symlinkPaths.set(full, true);\n+  this.fsw._incrReadyCount();\n+  \n+  try {\n+    const linkPath = await fsrealpath(path);\n+    if (this.fsw.closed) return;\n+    this.fsw._symlinkPaths.set(full, linkPath);\n+  } catch (error) {\n+    if (this.fsw._handleError(error)) {\n+      return this.fsw._emitReady();\n+    }\n+  }\n }\n \n _handleRead(directory, initialAdd, wh, target, dir, depth, throttler) {\n@@ -609,7 +619,7 @@ async _addToNodeFs(path, initialAdd, priorWh, depth, target) {\n       if (this.fsw.closed) return;\n       // preserve this symlink's target path\n       if (path !== targetPath && targetPath !== undefined) {\n-        this.fsw._symlinkPaths.set(targetPath, true);\n+        this.fsw._symlinkPaths.set(targetPath, path);\n       }\n     } else if (stats.isSymbolicLink()) {\n       const targetPath = follow ? await fsrealpath(path) : path;"}]}]}
{ "issues": [ { "file": "lib/attack.go", "line": 165, "description": "Potential nil pointer dereference: in the 'Attack' function, the call to 'targeter()' may return a nil *Target and nil error, but the code does not check for 'nil' before using the target." }, { "file": "lib/attack.go", "line": 174, "description": "Unchecked error: The result of 'stopTimer()' is not checked; if the timer cannot be stopped, this may lead to a race or goroutine leak." }, { "file": "lib/metrics.go", "line": 81, "description": "Potential division by zero: In the 'Metrics.Latencies.P50' and similar quantile methods, if there are no latencies recorded, a division by zero panic could occur." }, { "file": "lib/pacer.go", "line": 66, "description": "Interface contract violation: The 'Pacer' interface allows for negative 'wait' durations, which may cause downstream code to behave incorrectly if not handled defensively." }, { "file": "lib/results.go", "line": 228, "description": "Potential concurrent map access: In the 'Results.Add' method, multiple goroutines could write to the 'codes' map concurrently without synchronization, leading to a race condition." }, { "file": "lib/results.go", "line": 249, "description": "Possible nil pointer dereference: The method 'addError' assumes err is non-nil, but this assumption is not enforced, leading to a possible panic if called incorrectly." }, { "file": "lib/results.go", "line": 259, "description": "Possible data race: The 'Errors' slice is appended to from multiple goroutines in 'addError', which can cause a race condition." } ] }
{ "issues": [ { "file": "pypdf/generic/_base.py", "line": 339, "description": "NumberObject.as_numeric() incorrectly converts self to int by calling int(repr(self).encode('utf8')), which will raise TypeError. It should convert self directly to int, not the encoded bytes." }, { "file": "pypdf/generic/_base.py", "line": 339, "description": "NumberObject.as_numeric() incorrectly converts self to int by calling int(repr(self).encode('utf8')), which will raise TypeError. It should convert self directly to int, not the encoded bytes." }, { "file": "pypdf/generic/_data_structures.py", "line": 654, "description": "ContentStream.replicate() contains unreachable code after the first return statement. As a result, important fields (_data, pdf, _operations, forced_encoding) are not copied to the replicated object, potentially causing incorrect behavior." }, { "file": "pypdf/generic/_base.py", "line": 339, "description": "NumberObject.as_numeric() incorrectly converts self to int by calling int(repr(self).encode('utf8')), which will raise TypeError. It should convert self directly to int, not the encoded bytes." }, { "file": "pypdf/generic/_data_structures.py", "line": 654, "description": "ContentStream.replicate() contains unreachable code after the first return statement. As a result, important fields (_data, pdf, _operations, forced_encoding) are not copied to the replicated object, potentially causing incorrect behavior." }, { "file": "pypdf/generic/_files.py", "line": 97, "description": "EmbeddedFile._load_from_names() uses names[i-1] to get the file name when a dictionary is encountered, which will access the last element if the first element is not a string. This can result in incorrect file naming or access to unrelated data." }, { "file": "pypdf/generic/_base.py", "line": 339, "description": "NumberObject.as_numeric() incorrectly converts self to int by calling int(repr(self).encode('utf8')), which will raise TypeError. It should convert self directly to int, not the encoded bytes." }, { "file": "pypdf/generic/_data_structures.py", "line": 654, "description": "ContentStream.replicate() contains unreachable code after the first return statement. As a result, important fields (_data, pdf, _operations, forced_encoding) are not copied to the replicated object, potentially causing incorrect behavior." }, { "file": "pypdf/generic/_files.py", "line": 97, "description": "EmbeddedFile._load_from_names() uses names[i-1] to get the file name when a dictionary is encountered, which will access the last element if the first element is not a string. This can result in incorrect file naming or access to unrelated data." }, { "file": "pypdf/generic/_base.py", "line": 339, "description": "NumberObject.as_numeric() incorrectly converts self to int by calling int(repr(self).encode('utf8')), which will raise TypeError. It should convert self directly to int, not the encoded bytes." }, { "file": "pypdf/generic/_data_structures.py", "line": 654, "description": "ContentStream.replicate() contains unreachable code after the first return statement. As a result, important fields (_data, pdf, _operations, forced_encoding) are not copied to the replicated object, potentially causing incorrect behavior." }, { "file": "pypdf/generic/_files.py", "line": 97, "description": "EmbeddedFile._load_from_names() uses names[i-1] to get the file name when a dictionary is encountered, which will access the last element if the first element is not a string. This can result in incorrect file naming or access to unrelated data." }, { "file": "pypdf/generic/_base.py", "line": 339, "description": "NumberObject.as_numeric() incorrectly converts self to int by calling int(repr(self).encode('utf8')), which will raise TypeError. It should convert self directly to int, not the encoded bytes." }, { "file": "pypdf/generic/_data_structures.py", "line": 654, "description": "ContentStream.replicate() contains unreachable code after the first return statement. As a result, important fields (_data, pdf, _operations, forced_encoding) are not copied to the replicated object, potentially causing incorrect behavior." }, { "file": "pypdf/generic/_files.py", "line": 97, "description": "EmbeddedFile._load_from_names() uses names[i-1] to get the file name when a dictionary is encountered, which will access the last element if the first element is not a string. This can result in incorrect file naming or access to unrelated data." }, { "file": "pypdf/generic/_outline.py", "line": 12, "description": "In OutlineItem.write_to_stream, the 'if x in self' check uses string keys, but the dictionary uses NameObject instances as keys. This may cause all checks to fail, so required fields may not be written, leading to incomplete output." }, { "file": "pypdf/generic/_base.py", "line": 339, "description": "NumberObject.as_numeric() incorrectly converts self to int by calling int(repr(self).encode('utf8')), which will raise TypeError. It should convert self directly to int, not the encoded bytes." }, { "file": "pypdf/generic/_data_structures.py", "line": 654, "description": "ContentStream.replicate() contains unreachable code after the first return statement. As a result, important fields (_data, pdf, _operations, forced_encoding) are not copied to the replicated object, potentially causing incorrect behavior." }, { "file": "pypdf/generic/_files.py", "line": 97, "description": "EmbeddedFile._load_from_names() uses names[i-1] to get the file name when a dictionary is encountered, which will access the last element if the first element is not a string. This can result in incorrect file naming or access to unrelated data." }, { "file": "pypdf/generic/_outline.py", "line": 12, "description": "In OutlineItem.write_to_stream, the 'if x in self' check uses string keys, but the dictionary uses NameObject instances as keys. This may cause all checks to fail, so required fields may not be written, leading to incomplete output." }, { "file": "pypdf/generic/_base.py", "line": 339, "description": "NumberObject.as_numeric() incorrectly converts self to int by calling int(repr(self).encode('utf8')), which will raise TypeError. It should convert self directly to int, not the encoded bytes." }, { "file": "pypdf/generic/_data_structures.py", "line": 654, "description": "ContentStream.replicate() contains unreachable code after the first return statement. As a result, important fields (_data, pdf, _operations, forced_encoding) are not copied to the replicated object, potentially causing incorrect behavior." }, { "file": "pypdf/generic/_files.py", "line": 97, "description": "EmbeddedFile._load_from_names() uses names[i-1] to get the file name when a dictionary is encountered, which will access the last element if the first element is not a string. This can result in incorrect file naming or access to unrelated data." }, { "file": "pypdf/generic/_outline.py", "line": 12, "description": "In OutlineItem.write_to_stream, the 'if x in self' check uses string keys, but the dictionary uses NameObject instances as keys. This may cause all checks to fail, so required fields may not be written, leading to incomplete output." }, { "file": "pypdf/generic/_base.py", "line": 339, "description": "NumberObject.as_numeric() incorrectly converts self to int by calling int(repr(self).encode('utf8')), which will raise TypeError. It should convert self directly to int, not the encoded bytes." }, { "file": "pypdf/generic/_data_structures.py", "line": 654, "description": "ContentStream.replicate() contains unreachable code after the first return statement. As a result, important fields (_data, pdf, _operations, forced_encoding) are not copied to the replicated object, potentially causing incorrect behavior." }, { "file": "pypdf/generic/_files.py", "line": 97, "description": "EmbeddedFile._load_from_names() uses names[i-1] to get the file name when a dictionary is encountered, which will access the last element if the first element is not a string. This can result in incorrect file naming or access to unrelated data." }, { "file": "pypdf/generic/_outline.py", "line": 12, "description": "In OutlineItem.write_to_stream, the 'if x in self' check uses string keys, but the dictionary uses NameObject instances as keys. This may cause all checks to fail, so required fields may not be written, leading to incomplete output." }, { "file": "pypdf/generic/_viewerpref.py", "line": 45, "description": "ViewerPreferences.init calls super().init(self), but DictionaryObject expects no arguments besides self. This may raise a TypeError or result in incorrect initialization." } ] }
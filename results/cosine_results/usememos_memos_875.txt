{ "issues": [ { "file": "web/src/helpers/api.ts", "line": 158, "description": "In getAllMemos, if memoFind.offset or memoFind.limit is 0 (falsy), those parameters are skipped in the query string. This could cause unexpected pagination bugs." }, { "file": "web/src/helpers/api.ts", "line": 171, "description": "In getMemoList, similar logic: if creatorId, rowStatus, pinned, offset, or limit is 0 or false, these parameters are skipped, possibly causing incorrect queries or missing data." }, { "file": "web/src/helpers/api.ts", "line": 217, "description": "In getRepoLatestTag, assumes data[0] always exists—this may throw if the returned tags array is empty." }, { "file": "web/src/helpers/polyfill.ts", "line": 4, "description": "Prototype pollution risk: extending String.prototype (with replaceAll polyfill) is discouraged as it may cause conflicts or security issues in some environments." }, { "file": "web/src/helpers/utils.ts", "line": 20, "description": "getOSVersion uses indexOf('Mac'), which will match iOS devices as 'MacOS'. This may cause logic bugs for user agent checks." }, { "file": "web/src/helpers/utils.ts", "line": 27, "description": "getTimeStampByDate relies on a custom replaceAll polyfill and replaces '-' with '/' for Date parsing, which is locale-dependent and may fail on some browsers." }, { "file": "web/src/labs/highlighter/index.ts", "line": 7, "description": "walkthroughNodeWithKeyword recursively replaces keyword with <mark> using innerHTML assignment, but does not escape HTML entities. This allows for possible XSS if keyword or html is attacker-controlled." }, { "file": "web/src/labs/highlighter/index.ts", "line": 18, "description": "highlightWithWord escapes both html and keyword, but then calls walkthroughNodeWithKeyword, which may cause double-escaping or incorrect highlighting. Also, return value may not always be a string as expected." }, { "file": "web/src/labs/html2image/convertResourceToDataURL.ts", "line": 7, "description": "No error handling on fetch—if the resource fails to load (network error), this will throw and may break downstream logic." }, { "file": "web/src/labs/html2image/getCloneStyledElement.ts", "line": 12, "description": "When convertResourceToDataURL fails for an image, falls back to a backend endpoint, but still swallows all errors. If both fail, the cloned image src will be unset, possibly resulting in broken images." } ] }
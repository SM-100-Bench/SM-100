{ "issues": [ { "file": "index.js", "line": 1027, "description": "Unsafe use of user-provided arguments (e.g., in internal_send_command) when converting to Buffer or string without explicit type-checking could cause unexpected exceptions if non-string/non-buffer types are passed (e.g., passing a number or object with unexpected toString behavior)." }, { "file": "index.js", "line": 726, "description": "In connection_gone(), the retry_timer is not cleared before setting a new one. While the early return usually prevents multiple timers, in edge cases this may allow multiple retry timers, potentially causing race conditions or memory leaks." }, { "file": "index.js", "line": 649, "description": "In on_error(), if the 'error' event has no listeners and options.retry_strategy is set, the error is not emitted. This can cause silent failures if the user expects errors to always be emitted. Consider always emitting errors or documenting this behavior." }, { "file": "index.js", "line": 37, "description": "Assignment of options.tls is not guarded for undefined/null, which can cause a crash if options.tls is undefined. Should check if options.tls exists before iterating." }, { "file": "lib/createClient.js", "line": 30, "description": "Parsing of Redis URL does not sanitize or validate query parameters before copying to options, which could allow prototype pollution if a malicious URL is parsed (e.g., ...?proto[toString]=malicious)." }, { "file": "lib/createClient.js", "line": 62, "description": "Allows passing an object as 'port_arg' and a second argument, but only checks argument length, not types, which could lead to unexpected behavior or silent misconfiguration." }, { "file": "lib/utils.js", "line": 26, "description": "In replyToObject, accessing reply[i+1] without checking if i+1 < reply.length could result in assigning undefined values, which is likely not intended." } ] }
{ "issues": [ { "file": "packages/nuqs/src/url-encoding.ts", "line": 49, "description": "The function warnIfURLIsTooLong assumes a browser-like environment (window.location and process.env.NODE_ENV). If this code is ever run in a non-browser environment (such as Node.js without a polyfilled location), typeof location will be 'undefined' and the check will silently skip, which is safe. However, if location exists but is not a standard URL, or if NODE_ENV is not set, this could lead to inconsistent warning behavior. This is not a crash but should be documented." }, { "file": "packages/nuqs/src/url-encoding.ts", "line": 19, "description": "encodeQueryValue manually encodes characters for URL queries, but may not fully match all edge cases of encodeURIComponent or RFC 3986. For example, multi-byte Unicode is not explicitly handled, and some characters are passed through unchanged. This could potentially allow malformed queries if unexpected input is provided, though this does not immediately expose a security risk due to the additional encodeURIComponent call for control characters. Consider using encodeURIComponent for all non-whitelisted characters for maximum safety." }, { "file": "packages/nuqs/src/serializer.ts", "line": 57, "description": "In the createSerializer serialize function, the code allows for arbitrary keys and values to be set via user-provided parser objects. If a parser's serialize method is not robust, this could allow unsafe or malformed data into the query string. There is no check that the value produced by parser.serialize is a string or is properly encoded, which could result in malformed URLs or even code injection if a malicious parser is provided. This is only a risk if user-controlled code is allowed to provide custom parsers." }, { "file": "packages/nuqs/src/serializer.ts", "line": 93, "description": "In splitBase, when base is a string, the code splits on '?', but does not handle fragments (#) or malformed URLs (multiple '?'). This could result in an incorrect base or search param extraction if the input is not well-formed. Consider using the URL constructor for all string bases that look like URLs for better robustness." } ] }
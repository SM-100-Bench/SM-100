{ "issues": [ { "file": "frontend/packages/player/scripts/rmrf.js", "line": null, "description": "The script implements a recursive file/directory removal (rm -rf) using Node.js's fs and path modules. There are no checks on the input path, which makes this script dangerous if called with user-supplied or untrusted paths, as it can delete arbitrary files or directories. This could lead to data loss or a security vulnerability if the script is ever exposed to untrusted input." }, { "file": "frontend/packages/vjs-plugin-font-icons/scripts/rmrf.js", "line": null, "description": "Same as above: the script dangerously implements recursive file deletion without input validation, risking accidental or malicious deletion of arbitrary files/folders if the input is not strictly controlled." }, { "file": "frontend/packages/vjs-plugin/scripts/rmrf.js", "line": null, "description": "Same as above: the rmrf utility deletes files/directories recursively without input validation." }, { "file": "frontend/packages/scripts/scripts/rimraf.js", "line": null, "description": "Implements a recursive removal function similar to Unix rm -rf, but lacks input sanitization or safety checks, which is dangerous if the script is ever exposed to untrusted input." }, { "file": "frontend/packages/scripts/scripts/mkdir.js", "line": null, "description": "This script creates directories based on a provided path without input validation. If the path is not strictly controlled, it could lead to files being created in unintended locations." }, { "file": "frontend/packages/scripts/scripts/utils/parseCliArgs.js", "line": null, "description": "No input validation or sanitization on parsed CLI arguments. If this is used to derive file paths or commands, there is a risk of injection or unintended side effects." }, { "file": "frontend/packages/scripts/scripts/utils/validateOptions.js", "line": null, "description": "Performs basic option validation but may not sufficiently constrain input types or values (e.g., does not check for directory traversal, command injection, or type errors)." }, { "file": "frontend/packages/scripts/scripts/build.js", "line": null, "description": "Invokes shell commands using Node.js child_process.execSync with command strings built from variables. If user input reaches these commands, this could allow command injection. Input should be sanitized or, preferably, commands should be constructed using argument arrays." }, { "file": "frontend/packages/player/src/MediaPlayer.js", "line": null, "description": "Potential for XSS: If user-generated content (e.g., subtitles, media metadata) is rendered via dangerouslySetInnerHTML or set directly into the DOM, there is a risk of cross-site scripting if not properly sanitized. (Full audit would require reading all usage points, but this file is central.)" }, { "file": "frontend/src/static/js/utils/helpers/requests.js", "line": null, "description": "If this module does not centralize CSRF/XSRF protection for outbound POST/PUT/DELETE requests, then the app may be vulnerable to CSRF. Ensure that CSRF tokens are included with all unsafe requests." }, { "file": "frontend/src/static/js/utils/helpers/formatInnerLink.js", "line": null, "description": "If this helper does not adequately sanitize or validate path/URL components, there could be open redirect or path traversal risks." }, { "file": "frontend/src/static/js/components/_shared/popup/Popup.jsx", "line": null, "description": "If this component renders arbitrary HTML (e.g., via dangerouslySetInnerHTML) or injects unsanitized content, there is a risk of XSS. (Verify all content sources.)" }, { "file": "frontend/src/static/js/components/media-actions/MediaShareEmbed.jsx", "line": null, "description": "If embed codes or URLs are not properly sanitized before being rendered, there is a risk of XSS." }, { "file": "frontend/config/templates/renderBase.ejs", "line": null, "description": "EJS templates can be vulnerable to code injection or XSS if user-supplied data is inserted without proper escaping. Review all interpolations for proper use of <%= %> vs. <%- %> (escaped vs. unescaped)." }, { "file": "frontend/packages/scripts/lib/webpack-plugins/MyHtmlBeautifyWebpackPlugin.ts", "line": null, "description": "If this plugin processes or injects untrusted HTML, ensure that all content is properly escaped to prevent XSS." } ] }
{ "issues": [ { "file": "packages/vue2/src/app.ts", "line": 54, "description": "Global window event listeners (popstate, scroll, resize) are registered in mounted but only removed in beforeDestroy if this.isServer is false. If server/client conditions are misdetected or if the component is destroyed abnormally, these listeners might not be removed, potentially causing memory leaks." }, { "file": "packages/vue2/src/link.ts", "line": 62, "description": "The click event handler does not prevent default if event.metaKey, event.ctrlKey, event.shiftKey, or event.altKey is true, but still could process the navigation logic. This can result in double navigation or unexpected behavior if the user uses modifier keys." }, { "file": "packages/vue2/src/server.ts", "line": 12, "description": "The code uses require('vue') and require('@vue/server-renderer') dynamically without error handling. If either package is missing or misconfigured, the whole render will throw an uncaught exception." }, { "file": "packages/vue2/src/remember.ts", "line": 41, "description": "The remember function stores state in window.history.state, which may be overwritten by other code using the history API. There is no check for quota limits or race conditions, so state may be lost or overwritten unexpectedly." }, { "file": "packages/vue2/src/useForm.ts", "line": 76, "description": "The useForm helper mutates its reactive form object directly on submission and error. If used across multiple components or reused improperly, this could result in shared state bugs or data leakage." }, { "file": "packages/vue3/src/link.ts", "line": 54, "description": "The click event logic is very similar to the Vue 2 adapter and has the same issue: navigation logic may be triggered even when modifier keys are used, which could result in double navigation or broken browser behavior." }, { "file": "packages/vue3/src/server.ts", "line": 16, "description": "The code uses dynamic require('vue') and require('@vue/server-renderer') without error handling. If the dependencies are missing, an uncaught exception will occur." }, { "file": "packages/vue3/src/remember.ts", "line": 38, "description": "Similar to the Vue 2 adapter, state is stored inside window.history.state without namespacing or collision protection. Multiple usages or other code manipulating history state may cause state loss." }, { "file": "packages/vue3/src/useForm.ts", "line": 85, "description": "Reactive form object is mutated on submission and error. If shared between multiple consumers, this could result in shared state bugs." } ] }
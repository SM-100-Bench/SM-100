{ "issues": [ { "file": "src/lib/create/check-overflow.js", "line": 15, "description": "Potential exception: Accessing a[n] index in the array 'a' (e.g., a[MONTH], a[DATE], etc.) without first verifying that 'a' contains enough elements may result in 'undefined' comparisons. If input arrays are too short, this may not behave as intended." }, { "file": "src/lib/create/date-from-array.js", "line": 9, "description": "Creating a Date with year 0-99: The code attempts to correct JavaScript's Date constructor remapping of years 0-99, but the logic relies on adding 400 years and then resetting. For some invalid years or months, this may produce an invalid Date object or unexpected behavior." }, { "file": "src/lib/create/date-from-array.js", "line": 24, "description": "Potential exception: If non-numeric arguments are passed to Date.UTC, it may result in NaN Date objects silently. No explicit type-checking or fallback is provided." }, { "file": "src/lib/create/from-anything.js", "line": 23, "description": "When input is a string and locale.preparse modifies it, the returned value may not always be a string. If a locale implementation returns something other than a string, subsequent logic may break." }, { "file": "src/lib/create/from-anything.js", "line": 69, "description": "In 'configFromInput', if 'hooks.createFromInputFallback' returns a config with invalid '_d', the code does not check for NaN or invalid Date. This could cause subtle issues downstream if invalid dates are silently accepted." }, { "file": "src/lib/create/from-array.js", "line": 53, "description": "When setting day of year to zero or more than daysInYear, code marks overflow but still proceeds to create a Date, which may result in an invalid or unintended Date object." }, { "file": "src/lib/create/from-array.js", "line": 74, "description": "If input array is too short (e.g., missing hour, minute, etc.), the logic defaults to zeros. However, if 'config._a' has holes or non-numeric values, passing these to Date constructors may yield NaN dates." }, { "file": "src/lib/create/from-object.js", "line": 13, "description": "In mapping object units to array, the code uses 'parseInt' without a radix argument, which can be error-prone. Also, if the object provides non-string/non-number, parseInt may return NaN, causing downstream issues." }, { "file": "src/lib/create/from-string-and-format.js", "line": 98, "description": "Meridiem handling: The code sets hour based on meridiem, but if locale.meridiemHour or locale.isPM are not defined correctly or return unexpected types, this could result in an invalid hour value." }, { "file": "src/lib/create/from-string.js", "line": 132, "description": "RFC2822 offset parsing: The 'calculateOffset' function parses numerical offsets assuming a format of Â±hhmm. If the offset string is malformed, parseInt may yield NaN, propagating invalid offsets and potentially incorrect date arithmetic." }, { "file": "src/lib/create/from-string.js", "line": 180, "description": "ASP.NET date parsing: Only digits are extracted. If the input is not a valid integer, the constructed Date may be invalid (NaN), but this is not checked." }, { "file": "src/lib/create/valid.js", "line": 10, "description": "In 'isValid', the code uses 'm._d.getTime()' without first checking if 'm._d' is a valid Date object. If '_d' is null or not a Date, this will throw." }, { "file": "src/lib/parse/regex.js", "line": 61, "description": "In 'unescapeFormat', the replace for '\' is missing a global flag, so only the first occurrence is replaced. This may expose the regex to unintended characters, potentially resulting in mismatches or even ReDoS if untrusted input is parsed." }, { "file": "src/lib/parse/token.js", "line": 30, "description": "In 'addParseToken', if a token is reused, the previous callback will be overwritten. If multiple plugins or extensions register the same token, this could cause unpredictable parsing behavior." } ] }
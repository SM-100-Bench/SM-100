{ "issues": [ { "file": "buffer.go", "line": 63, "description": "In (*buffer).fill(), the error from io.ReadFull is returned directly, but the buffer might be in a partially filled state, which could cause subtle bugs if the caller expects the buffer to be in a consistent state after fill." }, { "file": "connection.go", "line": 214, "description": "In (*Conn).handleAuthResult(), if an unknown authentication plugin is requested by the server, the error returned is ambiguous and could potentially leak plugin names. Consider hardening the error message and handling." }, { "file": "connection.go", "line": 949, "description": "In (*Conn).watchCancel(), a goroutine is started for every cancel watcher, but there is no cleanup or limit, which can lead to goroutine leaks if the context is not cancelled or if watchCancel is called repeatedly." }, { "file": "connection.go", "line": 1200, "description": "In (*Conn).writeCommandPacketStr(), the function does not check for errors returned by writePacket, which could result in silent failures if the network connection is lost." }, { "file": "result.go", "line": 53, "description": "In (*mysqlResult).LastInsertId(), the returned value is not protected by a mutex, which could lead to race conditions if LastInsertId is called concurrently with write operations on the result." }, { "file": "rows.go", "line": 106, "description": "In (*Rows).Next(), there is a potential for panic if the columns slice is nil and the code attempts to assign to dest[i]. Should check for columns' presence before iterating." }, { "file": "rows.go", "line": 189, "description": "In (*Rows).close(), if the close is called more than once, it could lead to double-close on resources (e.g., channels or connections), which could panic or cause undefined behavior." }, { "file": "statement.go", "line": 88, "description": "In (*mysqlStmt).Close(), there is no check whether the statement is already closed, which could result in double free/close leading to undefined behavior or panics." }, { "file": "transaction.go", "line": 44, "description": "In (*Tx).Commit(), if Commit is called after Rollback, the code may attempt to use a closed connection, leading to a panic or undefined behavior." }, { "file": "transaction.go", "line": 62, "description": "In (*Tx).Rollback(), if Rollback is called multiple times, it may attempt to rollback an already closed or completed transaction, which could result in a silent error or resource leak." } ] }
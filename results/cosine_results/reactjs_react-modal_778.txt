{ "issues": [ { "file": "src/components/Modal.js", "line": 77, "description": "In componentDidMount, this.node is created only if !isReact16 (React <16), but is always used later. For React 16+, this.node can be undefined, leading to possible runtime errors when accessing this.node.className or appending to parent." }, { "file": "src/components/Modal.js", "line": 81, "description": "getParentElement(this.props.parentSelector) can throw if parentSelector returns null or throws, which is not caught." }, { "file": "src/components/Modal.js", "line": 99, "description": "In componentDidUpdate, prevParent.removeChild(this.node) and nextParent.appendChild(this.node) can throw if either parent is null or if this.node is already detached/attached." }, { "file": "src/components/Modal.js", "line": 112, "description": "In removePortal, parent.removeChild(this.node) can throw if this.node is already removed or parent is null." }, { "file": "src/components/Modal.js", "line": 141, "description": "In render, this.node is created if not present but not immediately attached to the DOM, which may break expectations for portals in React 16+." }, { "file": "src/components/ModalPortal.js", "line": 153, "description": "In beforeOpen(), classList.add is called on document.body and document.documentElement without checking for null, risking exceptions in unusual DOM environments." }, { "file": "src/components/ModalPortal.js", "line": 226, "description": "Function ownerHandlesClose returns a function reference, not a boolean, but is used as a boolean in requestClose and handleOverlayOnClick. This is confusing and could lead to unexpected behavior." }, { "file": "src/components/ModalPortal.js", "line": 266, "description": "In buildClassName, if additional is a string, className can end up with extra spaces or malformed class names if additional is empty or falsy." }, { "file": "src/helpers/classList.js", "line": 68, "description": "trackClass calls classListRef.add(className) for each class in the array, but does not check for empty strings, which could result from splitting an empty class string and cause errors." }, { "file": "src/helpers/classList.js", "line": 77, "description": "untrackClass calls classListRef.remove(className) for each class but does not check for empty string, which could cause errors." }, { "file": "src/helpers/focusManager.js", "line": 26, "description": "markForFocusLater pushes document.activeElement even if it is null (e.g., in some edge-case DOMs), which may cause issues in returnFocus." }, { "file": "src/helpers/focusManager.js", "line": 43, "description": "returnFocus does not check if toFocus is still attached to the DOM before calling toFocus.focus(), which can cause an exception." }, { "file": "src/helpers/scopeTab.js", "line": 12, "description": "In scopeTab, 'target' is used before declaration if node === document.activeElement and shiftKey is false." }, { "file": "src/helpers/scopeTab.js", "line": 21, "description": "Variable 'target' is used in multiple branches before being declared, risking reference errors in strict mode." } ] }
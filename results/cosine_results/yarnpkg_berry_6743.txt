{ "issues": [ { "file": "packages/yarnpkg-cli/sources/tools/getPluginConfiguration.ts", "line": 8, "description": "Potential runtime exception: packageJson['@yarnpkg/builder'] or .bundles.standard may be undefined if the package.json structure changes or is missing, which would throw at runtime. There is no defensive check." }, { "file": "packages/yarnpkg-cli/sources/tools/getPluginConfiguration.ts", "line": 11, "description": "Potential runtime exception: require(plugin).default assumes that each plugin exports a default member. If a plugin does not have a default export, this will throw. No error handling is present." }, { "file": "packages/yarnpkg-cli/sources/lib.ts", "line": 152, "description": "In runExit, if an error is thrown inside the try block and xfs.rmtempPromise() in the finally block also throws (e.g., due to disk issues), the process could exit without logging the original error or cleaning up temp files. Consider catching errors in finally to ensure cleanup and logging." }, { "file": "packages/yarnpkg-core/sources/execUtils.ts", "line": 119, "description": "In pipevp, process.on('SIGINT', ...) and process.on('SIGTERM', ...) are added every time a child process is spawned, but only removed when a child exits. This could lead to event handler leaks if many subprocesses are spawned simultaneously." }, { "file": "packages/yarnpkg-core/sources/execUtils.ts", "line": 204, "description": "In execvp, the environment variable object 'env' is mutated if env.PWD is set, which could have unintended side effects if the caller reuses the same env object elsewhere." }, { "file": "packages/yarnpkg-core/sources/Configuration.ts", "line": 682, "description": "When loading plugins dynamically from user-supplied paths in rc files or the environment, no sandboxing or validation is done. This could allow arbitrary code execution if a malicious plugin is loaded. This is a fundamental risk in plugin architectures but should be noted as a security vulnerability." }, { "file": "packages/yarnpkg-core/sources/Cache.ts", "line": 334, "description": "In Cache, concurrent fetches for the same package locator can race and potentially corrupt cache state. The mutex map attempts to prevent this, but if a fetch throws and is not awaited elsewhere, the mutex could be left in an inconsistent state. Code appears careful, but this is a complex and risky area." }, { "file": "packages/yarnpkg-core/sources/scriptUtils.ts", "line": 89, "description": "In makeScriptEnv, environment variable keys are lowercased on Windows, but this could clobber case-sensitive env vars on non-Windows platforms, leading to subtle bugs if a key with different case is present." } ] }
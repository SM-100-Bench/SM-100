{ "issues": [ { "file": "worker.go", "line": 41, "description": "Possible nil pointer dereference in worker recycling if the pool reference is nil. The code assumes w.pool is non-nil in w.pool.revertWorker(w), but if a worker is used after pool closure or improper allocation, this may panic." }, { "file": "worker.go", "line": 52, "description": "Potential leak of goroutines if the task channel is not closed or drained when the pool is released. Goroutines waiting on <-w.task may block forever." }, { "file": "worker_func.go", "line": 44, "description": "Possible nil pointer dereference in worker recycling similar to worker.go; w.poolFunc.revertWorker(w) assumes w.poolFunc is not nil." }, { "file": "worker_func.go", "line": 55, "description": "Potential goroutine leak; if w.task is never closed or drained, <-w.task may block forever and leak goroutines." }, { "file": "worker_func_generic.go", "line": 44, "description": "Same issue as above: possible nil pointer dereference in w.poolFunc.revertWorker(w)." }, { "file": "worker_func_generic.go", "line": 55, "description": "Potential goroutine leak if worker is not properly released and task channel is not closed/drained." }, { "file": "worker_loop_queue.go", "line": 36, "description": "Potential deadlock or starvation: if the queue is full, Put will spin in a loop (busy wait), which can cause CPU starvation and performance issues under high contention." }, { "file": "worker_loop_queue.go", "line": 52, "description": "Potential data race: Get does not use atomic operations for updating array elements, which could lead to race conditions if used concurrently." }, { "file": "worker_queue.go", "line": 28, "description": "Data race risk: direct assignment to the circular queue's array without atomic or lock protection. Not safe for concurrent use." }, { "file": "worker_stack.go", "line": 20, "description": "Potential nil pointer dereference: calling ws.items[len(ws.items)-1] without checking if the stack is empty can panic." }, { "file": "worker_stack.go", "line": 30, "description": "No synchronization: workerStack is not concurrency-safe, so concurrent Push/Pop may cause race conditions." } ] }
{ "issues": [ { "file": "lib/event-target.js", "line": 89, "description": "In 'addEventListener', the handler is not type-checked. If a non-function/non-object with handleEvent is passed, this could cause a TypeError later when the event fires." }, { "file": "lib/websocket-server.js", "line": 81, "description": "Mixing of 'port', 'server', and 'noServer' options is checked, but the check logic is complex and could be error-prone. A misconfiguration could lead to a server not being started as intended, or a thrown TypeError. Consider simplifying or refactoring." }, { "file": "lib/websocket-server.js", "line": 217, "description": "In 'handleUpgrade', the code does not verify that the 'upgrade' header exists before calling .toLowerCase(). If 'upgrade' is missing, this will throw a TypeError." }, { "file": "lib/websocket-server.js", "line": 243, "description": "In 'handleUpgrade', when parsing 'sec-websocket-protocol', if subprotocol.parse throws, the error is caught, but the server does not emit an error event for diagnostics, only aborts the handshake. Consider logging or emitting an error." }, { "file": "lib/websocket-server.js", "line": 349, "description": "In 'completeUpgrade', the function does not check if socket.write() fully succeeds or if it throws, which could lead to uncaught exceptions on write errors. Consider handling write errors explicitly." }, { "file": "lib/websocket-server.js", "line": 461, "description": "In 'abortHandshake', the function calls socket.end() and attaches a 'finish' listener to destroy the socket. If the socket is already closed or destroyed, this might lead to errors. There is no check for socket state." }, { "file": "lib/websocket.js", "line": 222", "description": "In 'setSocket', the function does not check if the socket is already in use or previously attached to another WebSocket, which could create issues with event leakage or double attachment." }, { "file": "lib/websocket.js", "line": 280, "description": "In 'close', there is a check for CONNECTING state, but if the connection is closed before establishment, abortHandshake is called, which may double-set the _readyState and can emit multiple error/close events if the connection is in an error state already." }, { "file": "lib/websocket.js", "line": 1256, "description": "In 'socketOnError', the function removes its own error handler and then immediately adds a NOOP handler, which may suppress legitimate errors, making debugging difficult. It also calls this.destroy() without checking if the socket is already destroyed." } ] }
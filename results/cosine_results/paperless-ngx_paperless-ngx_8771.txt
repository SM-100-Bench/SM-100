{ "issues": [ { "file": "src-ui/src/app/services/rest/document.service.ts", "line": null, "description": "The service directly concatenates user-supplied document IDs into URLs for delete and restore endpoints without explicit input validation or sanitization. If document IDs are not strictly validated as numbers elsewhere, this could lead to path traversal or injection vulnerabilities in some backend configurations." }, { "file": "src-ui/src/app/pipes/safehtml.pipe.ts", "line": null, "description": "The SafeHtmlPipe uses Angular's DomSanitizer to bypass security and mark HTML as safe. If used with untrusted user-generated content, this could enable XSS attacks. All invocations of the pipe should guarantee that the HTML is sanitized or trusted." }, { "file": "src-ui/src/app/pipes/safeurl.pipe.ts", "line": null, "description": "The SafeUrlPipe uses DomSanitizer.bypassSecurityTrustUrl. If the input is not strictly validated, this could allow malicious URLs (such as 'javascript:') to be injected, leading to security vulnerabilities." }, { "file": "src-ui/package.json", "line": null, "description": "Some dependencies (e.g., 'marked', 'dompurify') have a history of critical vulnerabilities if not kept up to date. Ensure that all frontend dependencies are regularly updated and audited for security issues." }, { "file": "src-ui/src/app/components/common/input/file/file.component.ts", "line": null, "description": "File uploads are handled on the client side. There is no evidence in the frontend code that file content type or size validation is performed before upload. While the backend should enforce validation, lack of client-side checks may allow accidental resource exhaustion or unexpected uploads." }, { "file": "src-ui/src/app/components/admin/logs/logs.component.ts", "line": null, "description": "Log entries retrieved from the backend are displayed in the UI. If logs can contain user-influenced input and are rendered as HTML without proper escaping, there could be an XSS risk. Ensure log messages are properly escaped/sanitized." }, { "file": "src-ui/src/app/services/rest/mail-account.service.ts", "line": null, "description": "Sensitive information such as mail account credentials may be handled by this service. Ensure that such data is never logged, and that sensitive input fields in the UI have 'type="password"' and appropriate autocomplete settings to avoid leaking credentials in browser autofill." }, { "file": "src-ui/src/app/services/rest/abstract-paperless-service.ts", "line": null, "description": "Error handling for failed HTTP requests is often minimal or absent. Unhandled errors can cause UI crashes or inconsistent state. Consistently implement error handling and user feedback for all HTTP calls." }, { "file": "src-ui/src/app/components/common/input/password/password.component.ts", "line": null, "description": "Ensure that password fields use input type='password' and do not echo values in logs or error messages. Also, consider disabling browser autocomplete where appropriate." }, { "file": "src-ui/src/app/guards/dirty-form.guard.ts", "line": null, "description": "The dirty-form guard relies on component state to prevent navigation. If the component is destroyed before the check, there could be a race condition leading to data loss." } ] }
{ "issues": [ { "file": "lib/aggregate.js", "line": 381, "description": "In the Aggregate.prototype.exec method, there is insufficient error handling when calling model.collection.aggregate(). If a MongoDB driver error is thrown synchronously before the callback is set up, it may be uncaught. The method assumes errors will always be in the callback, which is not always true for all driver versions." }, { "file": "lib/aggregate.js", "line": 629, "description": "In _createReadStream, the stream is not properly destroyed if an error occurs before the 'readable' event. This can lead to resource leaks." }, { "file": "lib/cursor/aggregationCursor.js", "line": 52, "description": "AggregationCursor constructor does not check if 'cursor' is a valid MongoDB cursor object. Using an invalid object could result in runtime exceptions when methods like next() are called." }, { "file": "lib/cursor/changeStream.js", "line": 33, "description": "No input validation for 'pipeline' parameter in ChangeStreamCursor constructor. Passing an invalid pipeline (e.g., not an array) could cause uncaught exceptions downstream." }, { "file": "lib/cursor/queryCursor.js", "line": 58, "description": "QueryCursor constructor does not validate that 'query' is a valid Query object. If an invalid object is passed, subsequent method calls may throw." }, { "file": "lib/query.js", "line": 3452, "description": "In Query.prototype.exec, callbacks are wrapped in promiseOrCallback, but if the underlying model method is removed or altered (e.g., by monkey-patching), there is no fallback or warning, possibly resulting in silent failures." }, { "file": "lib/query.js", "line": 3705, "description": "No check for query operation type before calling execUpdate. If the operation is not an update, this could cause undefined behavior." }, { "file": "lib/queryHelpers.js", "line": 54, "description": "The applyPaths function does not handle circular references in the schema, which could lead to stack overflows in complex schemas." }, { "file": "types/query.d.ts", "line": 60, "description": "Incorrect generics for QueryCursor<T>. The type parameter for QueryCursor should be passed down, but there are some places where 'any' is used, undermining type safety." }, { "file": "types/document.d.ts", "line": 45, "description": "Missing nullability annotation for findById methods. These methods can return null, but the typings do not reflect this, leading to possible undefined behavior in strict TypeScript settings." }, { "file": "types/populate.d.ts", "line": 104, "description": "The PopulateOption interface is missing required fields in some overloads, allowing users to create invalid population options that can cause runtime errors." }, { "file": "types/utility.d.ts", "line": 22, "description": "DeepPartial type does not handle arrays and tuples correctly, which can cause type errors or incorrect type inference in downstream code." } ] }
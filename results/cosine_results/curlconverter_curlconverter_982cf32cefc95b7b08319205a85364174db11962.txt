{ "issues": [ { "file": "index.js", "line": 18, "description": "Potentially unsafe use of eval() for parsing query parameters; could lead to code injection if untrusted input is passed." }, { "file": "util.js", "line": 45, "description": "The function 'parseCookies' splits cookie strings but does not trim whitespace after splitting, which may cause incorrect cookie parsing in some edge cases." }, { "file": "generators/node.js", "line": 60, "description": "In the generated Node.js code, headers are added without sanitizing user input, which could allow header injection if input is not controlled." }, { "file": "generators/php.js", "line": 49, "description": "PHP generator does not properly escape single quotes in generated code, potentially resulting in syntax errors or code injection issues." }, { "file": "generators/python.js", "line": 78, "description": "Generated Python code does not check for the presence of optional headers before including them, which could result in a KeyError at runtime." }, { "file": "fixtures/python_output/get_basic_auth.py", "line": 6, "description": "The requests library function is used with hardcoded authentication; if the username or password contains special characters, it may break the code." }, { "file": "fixtures/python_output/post_with_urlencoded_data.py", "line": 9, "description": "The data payload is constructed manually without using urlencode, which could lead to malformed requests if data contains special characters." }, { "file": "fixtures/python_output/put_with_file.py", "line": 8, "description": "File is opened without a context manager, which could lead to resource leaks if an exception occurs before the file is closed." }, { "file": "fixtures/python_output/post_with_data_binary.py", "line": 9, "description": "Binary data is written to the request as a string; in Python 3, this should be bytes, not str. This could cause a TypeError." } ] }
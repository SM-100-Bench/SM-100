{ "issues": [ { "file": "server/knowledge_base/utils.py", "line": 22, "description": "The validate_kb_name() check only blocks '../' and does not prevent other directory traversal or shell metacharacters. This could allow attacker to use knowledge_base_id values like '..%2F', './', absolute paths, or special characters for path manipulation." }, { "file": "server/knowledge_base/kb_cache/faiss_cache.py", "line": 22, "description": "Patching InMemoryDocstore.search at runtime changes global behavior for all instances. This is potentially dangerous if other parts of the application (or third-party code) rely on the original method, leading to unexpected bugs." }, { "file": "server/knowledge_base/kb_cache/base.py", "line": 117, "description": "EmbeddingsPool.load_embeddings() uses manual locking and calls self.atomic.release() inside a 'with item.acquire()' context. If an exception is raised before release, it may leave the lock in a locked state, causing deadlocks." }, { "file": "server/knowledge_base/kb_service/base.py", "line": 204, "description": "KBServiceFactory.get_service() contains duplicate branches for SupportedVSType.DEFAULT; the second will never execute, making this logic unreachable and possibly causing confusion or maintenance errors." }, { "file": "server/knowledge_base/kb_service/pg_kb_service.py", "line": 53, "description": "do_drop_kb() executes SQL using string interpolation, e.g., WHERE name = '{self.kb_name}'. This is vulnerable to SQL injection if kb_name is not strictly validated." }, { "file": "server/knowledge_base/kb_service/pg_kb_service.py", "line": 81, "description": "do_delete_doc() interpolates self.get_relative_source_path(kb_file.filepath) directly into a SQL query string, again risking SQL injection if not strictly sanitized." }, { "file": "server/knowledge_base/kb_service/zilliz_kb_service.py", "line": 43, "description": "del_doc_by_ids() and do_delete_doc() use string interpolation in Milvus expressions (e.g., f'pk in {ids}'), which could be exploited if ids originate from user input and are not sanitized." }, { "file": "server/knowledge_base/kb_doc_api.py", "line": 101, "description": "In upload_docs(), docs is received from a Form as JSON but is not type-checked or validated. If an attacker submits malicious objects, this could lead to code injection or denial-of-service if passed to downstream methods expecting trusted Document objects." }, { "file": "server/knowledge_base/utils.py", "line": 72, "description": "list_files_from_folder() recursively follows symlinks (entry.is_symlink()). This can lead to directory traversal outside of KB_ROOT_PATH, infinite loops, or unintentional file exposure if an attacker creates symlinks inside the knowledge base folders." }, { "file": "server/knowledge_base/kb_summary/base.py", "line": 71, "description": "drop_kb_summary() calls shutil.rmtree(self.vs_path) without checking if the directory exists, which could raise an exception if vs_path is missing or a file. There is also no try/except block around this potentially destructive operation." }, { "file": "server/knowledge_base/migrate.py", "line": 163, "description": "prune_folder_files() deletes files from disk without checking for symbolic links or ensuring the file is within an allowed directory, which could enable a malicious user to delete arbitrary files if they manage to register such a file in the database." }, { "file": "server/knowledge_base/kb_service/default_kb_service.py", "line": 8, "description": "The class is a stub with all methods as 'pass', so if instantiated or used, it will silently perform no actions. This could lead to silent data corruption, loss, or bugs if the default service is used unintentionally." }, { "file": "server/knowledge_base/kb_service/faiss_kb_service.py", "line": 54, "description": "get_doc_by_ids() uses vs.docstore._dict.get(id) where id may not exist, returning None. Downstream code may not check for None, causing AttributeError exceptions." }, { "file": "server/knowledge_base/kb_doc_api.py", "line": 358, "description": "download_doc() can return a FileResponse with user-supplied file paths. If validate_kb_name or KnowledgeFile is bypassed or not strict enough, this could allow sensitive file download (directory traversal)." } ] }
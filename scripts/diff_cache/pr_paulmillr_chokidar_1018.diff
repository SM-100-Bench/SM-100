diff --git a/lib/fsevents-handler.js b/lib/fsevents-handler.js
index 007a7ec9..9e2fb15e 100644
--- a/lib/fsevents-handler.js
+++ b/lib/fsevents-handler.js
@@ -103,7 +103,7 @@ const createFSEventsInstance = (path, callback) => {
  * @param {Function} rawEmitter - passes data to listeners of the 'raw' event
  * @returns {Function} closer
  */
-function setFSEventsListener(path, realPath, listener, rawEmitter, fsw) {
+function setFSEventsListener(path, realPath, listener, rawEmitter) {
   let watchPath = sysPath.extname(path) ? sysPath.dirname(path) : path;
   const parentPath = sysPath.dirname(watchPath);
   let cont = FSEventsWatchers.get(watchPath);
@@ -146,7 +146,7 @@ function setFSEventsListener(path, realPath, listener, rawEmitter, fsw) {
       listeners: new Set([filteredListener]),
       rawEmitter,
       watcher: createFSEventsInstance(watchPath, (fullPath, flags) => {
-        if (fsw.closed) return;
+        if (!cont.listeners.size) return;
         const info = fsevents.getInfo(fullPath, flags);
         cont.listeners.forEach(list => {
           list(fullPath, flags, info);
@@ -353,8 +353,7 @@ _watchWithFsEvents(watchPath, realPath, transform, globFilter) {
     watchPath,
     realPath,
     watchCallback,
-    this.fsw._emitRaw,
-    this.fsw
+    this.fsw._emitRaw
   );
 
   this.fsw._emitReady();
diff --git a/test.js b/test.js
index 003a6bca..100ef60d 100644
--- a/test.js
+++ b/test.js
@@ -1984,6 +1984,31 @@ const runTests = (baseopts) => {
         })();
       });
     });
+    it('should not ignore further events on close with existing watchers', async () => {
+      return new Promise((resolve) => {
+        const watcher1 = chokidar_watch(currentDir);
+        const watcher2 = chokidar_watch(currentDir);
+        // The EV_ADD event should be called on the second watcher even if the first watcher is closed
+        watcher2.on(EV_ADD, () => {
+          watcher2.on(EV_ADD, (path) => {
+            if (path.endsWith('add.txt')) {
+              resolve();
+            }
+          })
+        });
+        (async () => {
+          await waitForWatcher(watcher1);
+          await waitForWatcher(watcher2);
+          // Watcher 1 is closed to ensure events only happen on watcher 2
+          await watcher1.close();
+          // Write a new file into the fixtures to test the EV_ADD event
+          await write(getFixturePath('add.txt'), 'hello');
+          // Ensures EV_ADD is called. Immediately removing the file causes it to be skipped
+          await delay(200);
+          await fs_unlink(getFixturePath('add.txt'));
+        })()
+      })
+    });
     it('should not prevent the process from exiting', async () => {
       const scriptFile = getFixturePath('script.js');
       const scriptContent = `

diff --git a/daemon/rule/loader.go b/daemon/rule/loader.go
index 54923ff989..8c1950dd2f 100644
--- a/daemon/rule/loader.go
+++ b/daemon/rule/loader.go
@@ -247,13 +247,13 @@ func (l *Loader) loadRule(fileName string) error {
 		}
 	} else {
 		if err := r.Operator.Compile(); err != nil {
-			log.Warning("Operator.Compile() error: %s: %s", err, r.Operator.Data)
+			log.Warning("Operator.Compile() error: %s, %s (%s)", err, r.Operator.Data, r.Name)
 			return fmt.Errorf("(1) Error compiling rule: %s", err)
 		}
 		if r.Operator.Type == List {
 			for i := 0; i < len(r.Operator.List); i++ {
 				if err := r.Operator.List[i].Compile(); err != nil {
-					log.Warning("Operator.Compile() error: %s: ", err)
+					log.Warning("Operator.Compile() error: %s (%s)", err, r.Name)
 					return fmt.Errorf("(1) Error compiling list rule: %s", err)
 				}
 			}
diff --git a/daemon/rule/operator.go b/daemon/rule/operator.go
index 95b32115b1..6700d53451 100644
--- a/daemon/rule/operator.go
+++ b/daemon/rule/operator.go
@@ -166,8 +166,29 @@ func (o *Operator) Compile() error {
 	if o.isCompiled {
 		return nil
 	}
+
+	// the only operator Type that can have the Data field empty is List.
+	if o.Type != List && o.Data == "" {
+		return fmt.Errorf("Operand lists %s cannot be empty: %s", o, o.Operand)
+	}
+
 	if o.Type == Simple {
+		if o.Operand == OpUserName {
+			// TODO: allow regexps, take into account users from containers.
+			u, err := user.Lookup(o.Data)
+			if err != nil {
+				return fmt.Errorf("user.name Operand error: %s", err)
+			}
+			o.cb = o.simpleCmp
+			o.Data = u.Uid
+			return nil
+		} else if o.Operand == OpProcessHashMD5 || o.Operand == OpProcessHashSHA1 {
+			o.cb = o.hashCmp
+			return nil
+		}
+
 		o.cb = o.simpleCmp
+
 	} else if o.Type == Regexp {
 		o.cb = o.reCmp
 		if o.Sensitive == false {
@@ -187,11 +208,8 @@ func (o *Operator) Compile() error {
 				ip := value.(net.IP)
 				matchFound := false
 
-				// fmt.Printf("\nStarting IP check %s for alias '%s'\n", ip, o.Data)
-
 				for _, ipNet := range ipNets {
 					if ipNet.Contains(ip) {
-						// fmt.Printf(" -> Match found: IP %s in network %s for alias '%s'\n", ip, ipNet, o.Data)
 						matchFound = true
 						break
 					}
@@ -203,7 +221,6 @@ func (o *Operator) Compile() error {
 				*/
 				return matchFound
 			}
-			// fmt.Printf("Network alias '%s' successfully compiled for the operator.\n", o.Data)
 		} else {
 			// Parse the data as a CIDR if it's not an alias
 			_, netMask, err := net.ParseCIDR(o.Data)
@@ -213,49 +230,31 @@ func (o *Operator) Compile() error {
 			o.netMask = netMask
 			o.cb = o.cmpNetwork
 		}
-	}
-	if o.Operand == OpUserName && o.Type == Simple {
-		// TODO: allow regexps, take into account users from containers.
-		u, err := user.Lookup(o.Data)
-		if err != nil {
-			return fmt.Errorf("user.name Operand error: %s", err)
-		}
-		o.cb = o.simpleCmp
-		o.Data = u.Uid
-	}
-	if o.Operand == OpDomainsLists {
-		if o.Data == "" {
-			return fmt.Errorf("Operand lists is empty, nothing to load: %s", o)
-		}
-		o.loadLists()
-		o.cb = o.domainsListsCmp
-	} else if o.Operand == OpDomainsRegexpLists {
-		if o.Data == "" {
-			return fmt.Errorf("Operand regexp lists is empty, nothing to load: %s", o)
-		}
-		o.loadLists()
-		o.cb = o.reListCmp
-	} else if o.Operand == OpIPLists {
-		if o.Data == "" {
-			return fmt.Errorf("Operand ip lists is empty, nothing to load: %s", o)
-		}
-		o.loadLists()
-		o.cb = o.simpleListsCmp
-	} else if o.Operand == OpNetLists {
-		if o.Data == "" {
-			return fmt.Errorf("Operand net lists is empty, nothing to load: %s", o)
-		}
-		o.loadLists()
-		o.cb = o.ipNetCmp
-	} else if o.Operand == OpHashMD5Lists {
-		if o.Data == "" {
-			return fmt.Errorf("Operand lists.hash.md5 is empty, nothing to load: %s", o)
+
+	} else if o.Type == Lists {
+		if o.Operand == OpDomainsLists {
+			o.loadLists()
+			o.cb = o.domainsListsCmp
+		} else if o.Operand == OpDomainsRegexpLists {
+			o.loadLists()
+			o.cb = o.reListCmp
+		} else if o.Operand == OpIPLists {
+			o.loadLists()
+			o.cb = o.simpleListsCmp
+		} else if o.Operand == OpNetLists {
+			o.loadLists()
+			o.cb = o.ipNetCmp
+		} else if o.Operand == OpHashMD5Lists {
+			o.loadLists()
+			o.cb = o.simpleListsCmp
+		} else {
+			return fmt.Errorf("Unknown Lists operand %s", o.Operand)
 		}
-		o.loadLists()
-		o.cb = o.simpleListsCmp
-	} else if o.Operand == OpProcessHashMD5 || o.Operand == OpProcessHashSHA1 {
-		o.cb = o.hashCmp
+
+	} else {
+		return fmt.Errorf("Unknown Operator type %s", o.Type)
 	}
+
 	log.Debug("Operator compiled: %s", o)
 	o.isCompiled = true
 

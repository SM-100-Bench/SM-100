Please review the following commit for potential bugs:

```
diff --git a/packages/core/src/index.ts b/packages/core/src/index.ts
index cde35e7fa3..738aa5b952 100644
--- a/packages/core/src/index.ts
+++ b/packages/core/src/index.ts
@@ -428,7 +428,7 @@ export {
   insertLabelMeasurements as insertPending,
   mathjaxInit,
 } from "./utils/CollectLabels.js";
-export { errLocs, showError } from "./utils/Error.js";
+export { errLocs, runtimeError, showError } from "./utils/Error.js";
 export type { Result } from "./utils/Error.js";
 export {
   allWarnings,
diff --git a/packages/core/src/utils/Error.ts b/packages/core/src/utils/Error.ts
index e690a5162e..c04fe5fb36 100644
--- a/packages/core/src/utils/Error.ts
+++ b/packages/core/src/utils/Error.ts
@@ -1129,6 +1129,12 @@ export const nanError = (message: string, lastState: State): NaNError => ({
   lastState,
 });
 
+export const runtimeError = (message: string): PenroseError => ({
+  tag: "RuntimeError",
+  errorType: "RuntimeError",
+  message: message,
+});
+
 // If there are multiple errors, just return the tag of the first one
 export const toStyleErrors = (errors: StyleError[]): PenroseError => {
   if (!errors.length) {
diff --git a/packages/editor/package.json b/packages/editor/package.json
index b61172092f..f01cb9d802 100644
--- a/packages/editor/package.json
+++ b/packages/editor/package.json
@@ -71,8 +71,10 @@
     "@types/styled-components": "^5.1.25",
     "@types/uuid": "^9.0.0",
     "@vitejs/plugin-react-swc": "^3.0.1",
+    "@vitest/web-worker": "^1.5.0",
     "shx": "^0.3.3",
     "vite": "^4.0.4",
-    "vite-plugin-top-level-await": "^1.4.1"
+    "vite-plugin-top-level-await": "^1.4.1",
+    "vitest": "^1.6.0"
   }
 }
diff --git a/packages/editor/src/App.tsx b/packages/editor/src/App.tsx
index d20f14b0c9..5da6206d54 100644
--- a/packages/editor/src/App.tsx
+++ b/packages/editor/src/App.tsx
@@ -36,7 +36,6 @@ import {
   diagramState,
   fileContentsSelector,
   localFilesState,
-  optimizer,
   settingsState,
 } from "./state/atoms.js";
 import {
@@ -328,7 +327,6 @@ function App() {
   }, []);
   const isUnsaved = useIsUnsaved();
   useEffect(() => {
-    optimizer.init();
     const handleBeforeUnload = (event: BeforeUnloadEvent) => {
       if (isUnsaved()) {
         // warn user if they try to navigate to a new URL while in draft state
@@ -369,6 +367,7 @@ function App() {
   if (localFiles.state !== "hasValue") {
     return <div>Loading local files...</div>;
   }
+
   return (
     <div style={{ display: "flex", flexDirection: "column", height: "100%" }}>
       <TopBar />
diff --git a/packages/editor/src/components/DiagramPanel.tsx b/packages/editor/src/components/DiagramPanel.tsx
index b0afd18347..5c30faf137 100644
--- a/packages/editor/src/components/DiagramPanel.tsx
+++ b/packages/editor/src/components/DiagramPanel.tsx
@@ -20,7 +20,6 @@ export default function DiagramPanel() {
   const { state, error, warnings, metadata } = diagram;
   const [showEasterEgg, setShowEasterEgg] = useState(false);
   // TODO: bring back interactive mode
-  // const { interactive } = useRecoilValue(diagramMetadataSelector);
   const workspace = useRecoilValue(workspaceMetadataSelector);
   const rogerState = useRecoilValue(currentRogerState);
 
@@ -59,23 +58,22 @@ export default function DiagramPanel() {
     return () => cancelAnimationFrame(requestRef.current!);
   }, [diagram.state]);
 
-  const step = () => {
+  const step = async () => {
     if (state) {
-      optimizer.askForUpdate(
-        (state) => {
-          setDiagram({
-            ...diagram,
-            error: null,
-            state,
-          });
-        },
-        (error) => {
-          setDiagram({
-            ...diagram,
-            error,
-          });
-        },
-      );
+      try {
+        const info = await optimizer.pollForUpdate();
+        if (info === null) return;
+        setDiagram({
+          ...diagram,
+          error: null,
+          state: info.state,
+        });
+      } catch (error: any) {
+        setDiagram({
+          ...diagram,
+          error,
+        });
+      }
     }
   };
 
diff --git a/packages/editor/src/components/LayoutTimelineSlider.tsx b/packages/editor/src/components/LayoutTimelineSlider.tsx
index c12dc3e271..328477ffa4 100644
--- a/packages/editor/src/components/LayoutTimelineSlider.tsx
+++ b/packages/editor/src/components/LayoutTimelineSlider.tsx
@@ -1,39 +1,24 @@
 // a slider that shows the history of the diagram layout optimization, requesting shapes from the worker and rendering them on demand
 
 import { penroseBlue } from "@penrose/components";
-import { useEffect, useState } from "react";
 import { useRecoilState, useRecoilValue } from "recoil";
-import { diagramState, diagramWorkerState, optimizer } from "../state/atoms";
-import SegmentedSlider from "./SegmentedSlider";
+import { diagramState, diagramWorkerState, optimizer } from "../state/atoms.js";
+import SegmentedSlider from "./SegmentedSlider.js";
 
 export const LayoutTimelineSlider: React.FC<{}> = (props) => {
   const [diagram, setDiagram] = useRecoilState(diagramState);
-  const min = 0;
-  const [max, setMax] = useState(0);
-  const stats = optimizer.getStats();
-  const [index, setIndex] = useState(0);
-  const { running } = useRecoilValue(diagramWorkerState);
-
-  useEffect(() => {
-    setMax(stats.reduce((acc, stat) => acc + stat.steps, 0));
-  }, [diagram]);
-
-  // useEffect(() => {
-  //   setIndex(max);
-  // }, [max]);
+  const { optimizing } = useRecoilValue(diagramWorkerState);
 
   const onChange = (i: number) => {
     // request shapes from worker
     async function requestShapes() {
-      const state = await optimizer.computeShapes(i);
+      const state = await optimizer.computeShapesAtIndex(i);
       setDiagram((diagram) => ({
         ...diagram,
         state: state,
       }));
     }
     requestShapes();
-    // update current index
-    setIndex(i);
   };
   return (
     <div
@@ -44,7 +29,7 @@ export const LayoutTimelineSlider: React.FC<{}> = (props) => {
       }}
     >
       <SegmentedSlider
-        disabled={running}
+        disabled={optimizing}
         segments={
           optimizer.getStats().map((stat, i) => ({
             label: stat.name,
diff --git a/packages/editor/src/components/SegmentedSlider.tsx b/packages/editor/src/components/SegmentedSlider.tsx
index 5502977db7..5d162ac4a5 100644
--- a/packages/editor/src/components/SegmentedSlider.tsx
+++ b/packages/editor/src/components/SegmentedSlider.tsx
@@ -61,13 +61,17 @@ const SegmentedSlider: React.FC<SegmentedSliderProps> = ({
   );
 
   const totalSteps = stageRanges[stageRanges.length - 1].end;
+  const [dragged, setDragged] = useState<boolean>(false);
   const [value, setValue] = useState<number>(totalSteps - 1);
   const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
+    setDragged(true);
     const newValue = parseInt(e.target.value, 10);
     setValue(newValue);
     onChange(newValue);
   };
 
+  const currValue = dragged ? value : totalSteps;
+
   return (
     <SliderContainer>
       <Slider
@@ -75,15 +79,15 @@ const SegmentedSlider: React.FC<SegmentedSliderProps> = ({
         type="range"
         min="0"
         max={totalSteps - 1}
-        value={value}
+        value={currValue}
         onChange={handleChange}
       />
       <div>
         {stages.map((stage, index) => (
           <StageLabel
             key={index}
-            enabled={stageRanges[index].start <= value}
-            width={(stage.steps / totalSteps) * 100}
+            enabled={stageRanges[index].start <= currValue}
+            width={(stage.steps / (!!totalSteps ? totalSteps : 1)) * 100}
             color={stage.color}
           >
             {stage.label}
diff --git a/packages/editor/src/components/TopBar.tsx b/packages/editor/src/components/TopBar.tsx
index c95e6c139c..f0b490d07c 100644
--- a/packages/editor/src/components/TopBar.tsx
+++ b/packages/editor/src/components/TopBar.tsx
@@ -117,7 +117,7 @@ export default function TopBar() {
   const settings = useRecoilValue(settingsState);
   const saveLocally = useSaveLocally();
   const publishGist = usePublishGist();
-  const { running } = useRecoilValue(diagramWorkerState);
+  const { optimizing } = useRecoilValue(diagramWorkerState);
   const isUnsaved = useIsUnsaved();
   const newWorkspace = useNewWorkspace();
 
@@ -179,16 +179,12 @@ export default function TopBar() {
         </div>
       )}
       <HeaderButtonContainer>
-        <BlueButton disabled={running} onClick={useDownloadSvg()}>
+        <BlueButton disabled={optimizing} onClick={useDownloadSvg()}>
           save Penrose SVG
         </BlueButton>
         <ExportButton />
-        <BlueButton disabled={running} onClick={compileDiagram}>
-          compile ▶
-        </BlueButton>
-        <BlueButton disabled={running} onClick={resampleDiagram}>
-          resample
-        </BlueButton>
+        <BlueButton onClick={compileDiagram}>compile ▶</BlueButton>
+        <BlueButton onClick={resampleDiagram}>resample</BlueButton>
       </HeaderButtonContainer>
     </nav>
   );
diff --git a/packages/editor/src/state/atoms.ts b/packages/editor/src/state/atoms.ts
index d65bec491a..74e8361342 100644
--- a/packages/editor/src/state/atoms.ts
+++ b/packages/editor/src/state/atoms.ts
@@ -20,7 +20,7 @@ import {
 } from "recoil";
 import { v4 as uuid } from "uuid";
 import { layoutModel } from "../App.js";
-import { RenderState } from "../worker/message.js";
+import { RenderState } from "../worker/common.js";
 import OptimizerWorker from "../worker/OptimizerWorker.js";
 import { generateVariation } from "./variation.js";
 
@@ -349,12 +349,14 @@ export const layoutTimelineState = atom<LayoutTimeline>({
 
 export const diagramWorkerState = atom<{
   id: string;
-  running: boolean;
+  init: boolean;
+  optimizing: boolean;
 }>({
   key: "diagramWorkerState",
   default: {
     id: "",
-    running: false,
+    init: false,
+    optimizing: false,
   },
 });
 
diff --git a/packages/editor/src/state/callbacks.ts b/packages/editor/src/state/callbacks.ts
index 43547f310b..5522375c03 100644
--- a/packages/editor/src/state/callbacks.ts
+++ b/packages/editor/src/state/callbacks.ts
@@ -13,7 +13,7 @@ import {
   zipTrio,
 } from "../utils/downloadUtils.js";
 import { stateToSVG } from "../utils/renderUtils.js";
-import { LayoutStats, RenderState } from "../worker/message.js";
+import { UpdateInfo } from "../worker/OptimizerWorker";
 import {
   Canvas,
   Diagram,
@@ -53,8 +53,10 @@ const _compileDiagram = async (
   excludeWarnings: string[],
   set: any,
 ) => {
+  await optimizer.waitForInit();
+
   const compiling = toast.loading("Compiling...");
-  const onUpdate = (updatedState: RenderState, stats: LayoutStats) => {
+  const onUpdate = ({ state: updatedState, stats }: UpdateInfo) => {
     set(diagramState, (state: Diagram): Diagram => {
       return {
         ...state,
@@ -84,34 +86,46 @@ const _compileDiagram = async (
     }));
   };
 
-  const id = optimizer.run({
-    domain,
-    style,
-    substance,
-    variation,
-    onUpdate,
-    onError: (error) => {
-      toast.dismiss(compiling);
-      set(diagramState, (state: Diagram) => ({ ...state, error }));
-      set(diagramWorkerState, {
-        ...diagramWorkerState,
-        running: false,
-      });
-    },
-    onComplete: () => {
-      toast.dismiss(compiling);
-      set(diagramWorkerState, {
-        ...diagramWorkerState,
-        running: false,
-      });
-    },
-  });
+  const onError = (error: any) => {
+    toast.dismiss(compiling);
+    toast.error(error.message);
+    set(diagramWorkerState, {
+      ...diagramWorkerState,
+      optimizing: false,
+    });
+  };
 
-  set(diagramWorkerState, {
-    ...diagramWorkerState,
-    id,
-    running: true,
-  });
+  // ugly `then` chain allows for one catch at the end
+  try {
+    const id = await optimizer.compile(domain, style, substance, variation);
+    set(diagramWorkerState, {
+      ...diagramWorkerState,
+      id,
+      optimizing: false,
+    });
+
+    const { onStart, onFinish } = await optimizer.startOptimizing();
+    onFinish
+      .then(() => {
+        toast.dismiss(compiling);
+        set(diagramWorkerState, {
+          ...diagramWorkerState,
+          optimizing: false,
+        });
+      })
+      .catch(onError);
+
+    await onStart;
+    set(diagramWorkerState, {
+      ...diagramWorkerState,
+      optimizing: true,
+    });
+
+    const info = await optimizer.pollForUpdate();
+    if (info !== null) onUpdate(info);
+  } catch (error: any) {
+    onError(error);
+  }
 
   // TODO: update grid state too
   // set(diagramGridState, ({ gridSize }: DiagramGrid) => ({
@@ -160,27 +174,50 @@ export const useResampleDiagram = () =>
     }
     const variation = generateVariation();
     const resamplingLoading = toast.loading("Resampling...");
-    optimizer.resample(
-      id,
-      variation,
-      (resampled) => {
-        set(diagramState, (state) => ({
-          ...state,
-          metadata: { ...state.metadata, variation },
-          state: resampled,
-        }));
-        // update grid state too
-        set(diagramGridState, ({ gridSize }) => ({
-          variations: range(gridSize).map((i) =>
-            i === 0 ? variation : generateVariation(),
-          ),
-          gridSize,
-        }));
-      },
-      () => {
-        toast.dismiss(resamplingLoading);
-      },
-    );
+    const onError = (error: any) => {
+      toast.dismiss(resamplingLoading);
+      toast.error(error.message);
+      set(diagramWorkerState, (state) => ({
+        ...state,
+        optimizing: false,
+      }));
+    };
+
+    try {
+      const { onStart, onFinish } = await optimizer.resample(id, variation);
+      onFinish
+        .then(() => {
+          toast.dismiss(resamplingLoading);
+          set(diagramWorkerState, (state) => ({
+            ...state,
+            optimizing: false,
+          }));
+        })
+        .catch(onError);
+
+      await onStart;
+      set(diagramWorkerState, (state) => ({
+        ...state,
+        optimizing: true,
+      }));
+
+      const info = await optimizer.pollForUpdate();
+      if (info === null) return;
+      set(diagramState, (state) => ({
+        ...state,
+        metadata: { ...state.metadata, variation },
+        state: info.state,
+      }));
+      // update grid state too
+      set(diagramGridState, ({ gridSize }) => ({
+        variations: range(gridSize).map((i) =>
+          i === 0 ? variation : generateVariation(),
+        ),
+        gridSize,
+      }));
+    } catch (error: any) {
+      onError(error);
+    }
   });
 
 const _saveLocally = (set: any) => {
diff --git a/packages/editor/src/utils/renderUtils.ts b/packages/editor/src/utils/renderUtils.ts
index 5fab53e6fd..f26225f191 100644
--- a/packages/editor/src/utils/renderUtils.ts
+++ b/packages/editor/src/utils/renderUtils.ts
@@ -1,5 +1,5 @@
 import { PathResolver, RenderShapes } from "@penrose/core";
-import { RenderState } from "../worker/message";
+import { RenderState } from "../worker/common";
 
 export const stateToSVG = async (
   state: RenderState,
diff --git a/packages/editor/src/worker/OptimizerWorker.test.ts b/packages/editor/src/worker/OptimizerWorker.test.ts
new file mode 100644
index 0000000000..e1256296de
--- /dev/null
+++ b/packages/editor/src/worker/OptimizerWorker.test.ts
@@ -0,0 +1,191 @@
+// @vitest-environment jsdom
+
+import { defineWebWorkers } from "@vitest/web-worker/pure";
+import { v4 as uuid } from "uuid";
+import { describe, it } from "vitest";
+import OptimizerWorker, { UpdateInfo } from "./OptimizerWorker";
+import { LayoutStats } from "./common";
+
+// copied from `packages/examples/src/set-theory-domain/setTheory.domain`
+const domain = `type Set
+
+predicate Disjoint(Set s1, Set s2)
+predicate Intersecting(Set s1, Set s2)
+predicate Subset(Set s1, Set s2)
+`;
+
+// copied from `packages/examples/src/set-theory-domain/venn.style`
+const style = `canvas {
+  width = 800
+  height = 700
+}
+
+forall Set x {
+  x.icon = Circle {
+    strokeWidth : 0
+  }
+
+  x.text = Equation {
+    string : x.label
+    fontSize : "25px"
+  }
+
+  ensure contains(x.icon, x.text)
+  encourage sameCenter(x.text, x.icon)
+  x.textLayering = x.text above x.icon
+}
+
+forall Set x; Set y
+where Subset(x, y) {
+  ensure disjoint(y.text, x.icon, 10)
+  ensure contains(y.icon, x.icon, 5)
+  x.icon above y.icon
+}
+
+forall Set x; Set y
+where Disjoint(x, y) {
+  ensure disjoint(x.icon, y.icon)
+}
+
+forall Set x; Set y
+where Intersecting(x, y) {
+  ensure overlapping(x.icon, y.icon)
+  ensure disjoint(y.text, x.icon)
+  ensure disjoint(x.text, y.icon)
+}
+`;
+
+const substance = `Set A, B, C, D, E, F, G
+
+Subset(B, A)
+Subset(C, A)
+Subset(D, B)
+Subset(E, B)
+Subset(F, C)
+Subset(G, C)
+
+Disjoint(E, D)
+Disjoint(F, G)
+Disjoint(B, C)
+
+AutoLabel All
+`;
+
+const fuzz = async (ops: number, expect: any) => {
+  defineWebWorkers({ clone: "none" });
+
+  let state: string | undefined;
+  let id: string | undefined;
+  let receivedFinish = false;
+  let variation = uuid();
+  let layoutStats: LayoutStats = [];
+
+  const totalSteps = () => {
+    return layoutStats.reduce((acc, { steps }) => acc + steps, 0);
+  };
+
+  const optimizer = new OptimizerWorker();
+
+  const onOptimizerFinish = (info: UpdateInfo) => {
+    layoutStats = info.stats;
+    state = optimizer.getState();
+    receivedFinish = true;
+    expect(state === "Compiled");
+  };
+
+  const compile = async () => {
+    id = await optimizer.compile(domain, style, substance, variation);
+    expect(state === "Compiled");
+  };
+
+  const startOptimizing = async () => {
+    const { onStart, onFinish } = await optimizer.startOptimizing();
+    onFinish.then(onOptimizerFinish);
+    await onStart;
+
+    state = optimizer.getState();
+    if (!receivedFinish) {
+      expect(state === "Optimizing");
+    } else {
+      expect(state === "Compiled");
+    }
+  };
+
+  const interruptOptimizing = async () => {
+    await optimizer.interruptOptimizing();
+
+    state = optimizer.getState();
+    expect(state === "Compiled");
+  };
+
+  // broken by jsdom, but should be called on compiled and optimizing
+  const resample = async () => {
+    variation = uuid();
+    if (id === undefined) {
+      expect(false && "id was undefined");
+      return;
+    }
+
+    const { onStart, onFinish } = await optimizer.resample(id, variation);
+    onFinish.then(onOptimizerFinish);
+    await onStart;
+
+    state = optimizer.getState();
+    if (!receivedFinish) {
+      expect(state === "Optimizing");
+    } else {
+      expect(state === "Compiled");
+    }
+  };
+
+  const pollForUpdate = async () => {
+    const info = await optimizer.pollForUpdate();
+    if (info !== null) {
+      layoutStats = info.stats;
+    }
+
+    const origState = state;
+    state = optimizer.getState();
+    expect(state === "Compiled" || state === "Optimizing");
+    expect(!(origState === "Compiled" && state === "Optimizing"));
+  };
+
+  const computeShapes = async () => {
+    const max = totalSteps();
+    if (max === 0) return;
+
+    const step = Math.floor(Math.random() * max);
+    await optimizer.computeShapesAtIndex(step);
+
+    const origState = state;
+    state = optimizer.getState();
+    expect(state === "Compiled" || state === "Optimizing");
+    expect(!(origState === "Compiled" && state === "Optimizing"));
+  };
+
+  const legalMethods = new Map<string, (() => Promise<void>)[]>([
+    ["Init", [compile]],
+    ["Compiled", [startOptimizing, pollForUpdate, computeShapes]],
+    ["Optimizing", [interruptOptimizing, pollForUpdate, computeShapes]],
+  ]);
+
+  await optimizer.waitForInit();
+
+  for (let i = 0; i < ops; i++) {
+    state = optimizer.getState();
+    console.log(`${state} ${i}`);
+    const choices = legalMethods.get(state);
+    expect(state !== "undefined");
+    if (choices === undefined) return;
+    const index = Math.floor(Math.random() * choices.length);
+    await choices[index]();
+  }
+
+  optimizer.terminate();
+};
+
+describe.concurrent("OptimizerWorker", () => {
+  it("fuzz 100", async ({ expect }) => {
+    await fuzz(100, expect);
+  });
+});
diff --git a/packages/editor/src/worker/OptimizerWorker.ts b/packages/editor/src/worker/OptimizerWorker.ts
index 903bde0bee..372da8fd92 100644
--- a/packages/editor/src/worker/OptimizerWorker.ts
+++ b/packages/editor/src/worker/OptimizerWorker.ts
@@ -1,308 +1,802 @@
-import { PenroseError, collectLabels, mathjaxInit } from "@penrose/core";
+import {
+  collectLabels,
+  LabelMeasurements,
+  mathjaxInit,
+  PenroseError,
+  runtimeError,
+} from "@penrose/core";
 import consola from "consola";
 import { v4 as uuid } from "uuid";
 import {
+  CompiledReq,
+  layoutStateToRenderState,
   LayoutStats,
+  OptimizingReq,
   RenderState,
   Req,
+  ResampleReq,
   Resp,
-  layoutStateToRenderState,
   separateRenderedLabels,
-} from "./message.js";
+} from "./common.js";
+
+/* State types */
+
+export type Init = {
+  tag: "Init";
+};
+
+export type Compiled = {
+  tag: "Compiled";
+  svgCache: Map<string, HTMLElement>;
+  layoutStats: LayoutStats;
+  labelCache: LabelMeasurements;
+  polled: boolean;
+};
+
+export type Optimizing = {
+  tag: "Optimizing";
+  svgCache: Map<string, HTMLElement>;
+  labelCache: LabelMeasurements;
+  layoutStats: LayoutStats;
+  finishReject: (error: PenroseError) => void;
+  finishResolve: (info: UpdateInfo) => void;
+};
+
+// unrecoverable error state
+export type Error = {
+  tag: "Error";
+  error: PenroseError;
+};
+
+export type StableState = Init | Compiled | Optimizing | Error;
+
+export type WaitingForInit = {
+  tag: "WaitingForInit";
+  waiting: true;
+  resolve: () => void;
+  reject: (e: PenroseError) => void;
+};
+
+export type InitToCompiled = {
+  tag: "InitToCompiled";
+  waiting: true;
+  previous: Init | Compiled;
+  resolve: (jobId: string) => void;
+  reject: (e: PenroseError) => void;
+};
+
+export type CompiledToOptimizing = {
+  tag: "CompiledToOptimizing";
+  waiting: true;
+  previous: Compiled;
+  finishReject: (error: PenroseError) => void;
+  finishResolve: (info: UpdateInfo) => void;
+  resolve: () => void;
+  reject: (e: PenroseError) => void;
+};
+
+export type OptimizingToCompiled = {
+  tag: "OptimizingToCompiled";
+  waiting: true;
+  previous: Optimizing;
+  resolve: () => void;
+  reject: (e: PenroseError) => void;
+};
+
+export type WaitingForUpdate = {
+  tag: "WaitingForUpdate";
+  waiting: true;
+  previous: Optimizing | Compiled;
+  resolve: (info: UpdateInfo) => void;
+  reject: (e: PenroseError) => void;
+};
+
+export type WaitingForShapes = {
+  tag: "WaitingForShapes";
+  waiting: true;
+  previous: Optimizing | Compiled;
+  resolve: (state: RenderState) => void;
+  reject: (e: PenroseError) => void;
+};
+
+export type WaitingState =
+  | WaitingForInit
+  | InitToCompiled
+  | CompiledToOptimizing
+  | OptimizingToCompiled
+  | WaitingForUpdate
+  | WaitingForShapes;
+
+export type OWState = StableState | WaitingState;
+
+/* Module helpers */
 
 const log = (consola as any)
   .create({ level: (consola as any).LogLevel.Warn })
   .withScope("worker:client");
 
-export type onComplete = () => void;
-export type OnUpdate = (state: RenderState, stats: LayoutStats) => void;
-export type OnError = (error: PenroseError) => void;
-export type Pending = {
-  onUpdate: OnUpdate;
-  onError: OnError;
-  onComplete: onComplete;
-  request: Req;
+const isWaiting = (state: OWState): state is WaitingState => {
+  return "waiting" in state;
 };
 
-const worker = new Worker(new URL("./worker.ts", import.meta.url), {
-  type: "module",
-});
+/* Exported Members */
+
+export interface UpdateInfo {
+  state: RenderState;
+  stats: LayoutStats;
+}
+
+export interface OptimizerPromises {
+  onStart: Promise<void>;
+  onFinish: Promise<UpdateInfo>;
+}
+
+const generateOptimizerPromises = async (
+  helper: (
+    finishResolve: (info: UpdateInfo) => void,
+    finishReject: (e: PenroseError) => void,
+  ) => Promise<void>,
+): Promise<OptimizerPromises> => {
+  let finishResolve: ((info: UpdateInfo) => void) | undefined;
+  let finishReject: ((e: PenroseError) => void) | undefined;
+  let onFinish: Promise<UpdateInfo> | undefined;
+
+  await new Promise<void>((resolve) => {
+    onFinish = new Promise<UpdateInfo>((finishResolve_, finishReject_) => {
+      finishResolve = finishResolve_;
+      finishReject = finishReject_;
+      resolve();
+    });
+  });
+
+  if (
+    finishResolve === undefined ||
+    finishReject === undefined ||
+    onFinish === undefined
+  ) {
+    throw runtimeError("Could not generate optimizer promise pair");
+  }
+
+  const onStart = helper(finishResolve, finishReject);
+  return { onStart, onFinish };
+};
 
 /**
- * Wrapper class for the worker thread. Handles sending and receiving messages to and from the worker.
+ * Wrapper for parallel diagram optimization.
  */
 export default class OptimizerWorker {
-  private svgCache: Map<string, HTMLElement> = new Map();
-  private workerInitialized: boolean = false;
-  private sharedMemory: Int8Array = new Int8Array();
-  private running: boolean = false;
-  private onUpdate: OnUpdate = () => {};
-  private onError: OnError = () => {};
-  private onComplete: onComplete = () => {};
-  private pending: Pending[] = [];
-  private stats: LayoutStats = [];
+  private state: OWState;
+  private worker: Worker;
+  private nextStatePromise: Promise<void>;
+  private nextStatePromiseResolve: () => void;
 
-  getStats() {
-    return this.stats;
-  }
+  constructor() {
+    this.state = {
+      tag: "WaitingForInit",
+      waiting: true,
+      resolve: () => {},
+      reject: () => {},
+    };
 
-  async computeShapes(index: number): Promise<RenderState> {
-    return new Promise((resolve, reject) => {
-      log.debug("Worker computing shapes...");
-      this.request({
-        tag: "ComputeShapes",
-        index,
-      });
-      const messageHandler = async ({ data }: MessageEvent<Resp>) => {
-        if (data.tag === "Update") {
-          worker.removeEventListener("message", messageHandler);
-          resolve(layoutStateToRenderState(data.state, this.svgCache));
-        } else {
-          worker.removeEventListener("message", messageHandler);
-          // Shouldn't happen, but ignore other messages
-          console.error(`Unknown Response: ${data.tag}`);
-        }
-      };
+    this.worker = new Worker(new URL("./worker.ts", import.meta.url), {
+      type: "module",
+    });
+    this.worker.onmessage = this.onMessage.bind(this);
 
-      worker.addEventListener("message", messageHandler);
+    // can't call set state because fields need to be definitively assigned
+    this.nextStatePromiseResolve = () => {};
+    this.nextStatePromise = new Promise((resolve) => {
+      this.nextStatePromiseResolve = resolve;
     });
   }
 
-  /* Initialize the worker by declaring a shared array buffer and passing it to the worker. Then wait for confirmation from the worker before setting up anything. */
-  async init() {
-    return new Promise<void>((resolve, reject) => {
-      log.debug("Worker initializing...", worker);
-      // `sharedMemory` has two bytes, the first is a flag to tell the worker to give an update, and the second is a flag to tell the worker to stop the current task.
-      const sab = new SharedArrayBuffer(2);
-      this.sharedMemory = new Int8Array(sab);
-      this.request({
-        tag: "Init",
-        sharedMemory: sab,
-      });
-
-      // add a timeout to reject the promise if the worker takes too long
-      const timeout = setTimeout(() => {
-        reject(new Error("Worker initialization timed out"));
-      }, 10000);
-      worker.onmessage = async ({ data }: MessageEvent<Resp>) => {
-        if (data.tag === "Ready") {
-          this.workerInitialized = true;
-          log.info("Worker Initialized");
-          this.setup();
-          // if there is a pending request, send it after setup
-          this.resolvePending();
-          clearTimeout(timeout);
-          resolve();
-        } else {
-          // Shouldn't happen, but ignore other messages
-          console.error(`Unknown Response: ${data}`);
-        }
-      };
+  private setState(state: OWState) {
+    log.info(`New worker client state ${state.tag}`);
+    this.state = state;
+
+    // signal to await-ers that we have switched states, and reset promise for
+    // the next state
+    this.nextStatePromiseResolve();
+    this.nextStatePromise = new Promise((resolve) => {
+      this.nextStatePromiseResolve = resolve;
     });
   }
 
-  // check if there is a pending request and send it to the worker
-  resolvePending() {
-    if (this.pending.length > 0) {
-      log.info("Worker has pending request, sending...");
-      // get the most recent request and call `onComplete` on everyone
-      const lastest = this.pending[this.pending.length - 1];
-      this.request(lastest.request);
-      this.onComplete = () => {
-        for (const pendingTask of this.pending) {
-          pendingTask.onComplete();
+  private async waitForNextState() {
+    await this.nextStatePromise;
+  }
+
+  /**
+   * Handles messages from the worker thread.
+   * @param data Message from worker thread
+   * @private
+   */
+  private async onMessage({ data }: MessageEvent<Resp>) {
+    // Handle errors first: simplifies switch statement some
+    // we can either drop down a state if the error is recoverable,
+    // or move into a latching "Error" state
+    if (data.tag === "ErrorResp") {
+      switch (this.state.tag) {
+        case "InitToCompiled":
+          this.state.reject(data.error);
+          this.setState({
+            tag: "Init",
+          });
+          break;
+
+        case "CompiledToOptimizing":
+          this.state.reject(data.error);
+          this.setState({
+            ...this.state.previous,
+            tag: "Compiled",
+          });
+          break;
+
+        case "Optimizing":
+          this.state.finishReject(data.error);
+          this.setState({
+            ...this.state,
+            tag: "Compiled",
+            polled: false,
+          });
+          break;
+
+        default:
+          if ("waiting" in this.state) {
+            this.state.reject(data.error);
+          }
+          this.setState({
+            tag: "Error",
+            error: data.error,
+          });
+          break;
+      }
+      return;
+    }
+
+    switch (this.state.tag) {
+      case "Compiled":
+        switch (data.tag) {
+          case "UpdateResp":
+            // a leftover that occurs if optimization stops before an update request is processed
+            // but tough to catch on the worker side. So we just ignore it.
+            log.info("Received UpdateResp in state compiled. Ignoring...");
+            break;
+
+          default:
+            throw runtimeError(`Worker received ${data.tag} in state compiled`);
         }
-      };
-      this.onError = (e) => {
-        for (let i = 0; i < this.pending.length - 1; i++) {
-          this.pending[i].onError(e);
+        break;
+
+      case "Optimizing":
+        switch (data.tag) {
+          case "FinishedResp":
+            log.info("Received FinishedResp in state Optimizing");
+            this.state.finishResolve({
+              state: layoutStateToRenderState(data.state, this.state.svgCache),
+              stats: data.stats,
+            });
+            this.setState({
+              ...this.state,
+              tag: "Compiled",
+              layoutStats: data.stats,
+              polled: false,
+            });
+            break;
+
+          default:
+            throw runtimeError(`Worker responded ${data.tag} while optimizing`);
+        }
+        break;
+
+      case "WaitingForInit":
+        switch (data.tag) {
+          case "InitResp":
+            log.info("Received InitResp in state WaitingForInit");
+            this.state.resolve();
+            this.setState({
+              tag: "Init",
+            });
+            break;
+
+          default:
+            this.state.reject(
+              runtimeError(`Worker responded ${data.tag} while Off => Init`),
+            );
+            break;
+        }
+        break;
+
+      case "InitToCompiled":
+        switch (data.tag) {
+          case "CompiledResp":
+            log.info("Received CompiledResp in state InitToCompiled");
+            const convert = mathjaxInit();
+            const labelCache = await collectLabels(data.shapes, convert);
+
+            if (labelCache.isErr()) {
+              this.state.reject(labelCache.error);
+              return;
+            } else {
+              this.state.resolve(data.jobId);
+            }
+
+            const { optLabelCache, svgCache } = separateRenderedLabels(
+              labelCache.value,
+            );
+            this.setState({
+              ...this.state.previous,
+              tag: "Compiled",
+              svgCache,
+              labelCache: optLabelCache,
+              layoutStats: [],
+              polled: false,
+            });
+            break;
+
+          default:
+            this.state.reject(
+              runtimeError(
+                `Worker responded ${data.tag} while Init => Compiled`,
+              ),
+            );
+            break;
+        }
+        break;
+
+      case "CompiledToOptimizing":
+        switch (data.tag) {
+          case "OptimizingResp":
+            log.info("Received OptimizingResp in state CompiledToOptimizing");
+            this.state.resolve();
+            this.setState({
+              ...this.state.previous,
+              tag: "Optimizing",
+              finishResolve: this.state.finishResolve,
+              finishReject: this.state.finishReject,
+            });
+            break;
+
+          default:
+            this.state.reject(
+              runtimeError(
+                `Worker responded ${data.tag} while Compiled => Optimizing`,
+              ),
+            );
+            break;
+        }
+        break;
+
+      case "OptimizingToCompiled":
+        switch (data.tag) {
+          case "FinishedResp":
+            log.info("Received FinishedResp in state OptimizingToCompiled");
+            this.state.previous.finishResolve({
+              state: layoutStateToRenderState(
+                data.state,
+                this.state.previous.svgCache,
+              ),
+              stats: data.stats,
+            });
+            this.state.resolve();
+            this.setState({
+              ...this.state.previous,
+              tag: "Compiled",
+              layoutStats: data.stats,
+              polled: false,
+            });
+            break;
+        }
+        break;
+
+      case "WaitingForUpdate":
+      case "WaitingForShapes":
+        switch (data.tag) {
+          case "UpdateResp":
+          case "FinishedResp":
+            log.info(`Received ${data.tag} in state WaitingForUpdate`);
+            const updateInfo = {
+              state: layoutStateToRenderState(
+                data.state,
+                this.state.previous.svgCache,
+              ),
+              stats: data.stats,
+            };
+
+            if (this.state.tag === "WaitingForUpdate") {
+              this.state.resolve(updateInfo);
+            } else {
+              this.state.resolve(updateInfo.state);
+            }
+
+            if (data.tag === "FinishedResp") {
+              if (this.state.previous.tag === "Optimizing") {
+                this.state.previous.finishResolve(updateInfo);
+              }
+              this.setState({
+                ...this.state.previous,
+                tag: "Compiled",
+                layoutStats: data.stats,
+                polled: false,
+              });
+            } else {
+              this.setState({
+                ...this.state.previous,
+                layoutStats: data.stats,
+              });
+            }
+            break;
+
+          default:
+            this.state.reject(
+              runtimeError(
+                `Worker responded ${data.tag} while waiting for update`,
+              ),
+            );
         }
-        lastest.onError(e);
-      };
-      this.onUpdate = lastest.onUpdate;
+        break;
+
+      default:
+        throw runtimeError(
+          `Cannot receive message ${data.tag} in state ${this.state.tag}`,
+        );
     }
   }
 
-  setup() {
-    log.info("Registering worker listeners");
-    worker.onerror = (e) => {
-      log.error("Worker error: ", e.message);
-    };
+  private request(req: Req) {
+    this.worker.postMessage(req);
+  }
 
-    worker.onmessageerror = (e) => {
-      log.error("Worker message error: ", e);
+  /**
+   * Return whether the worker thread is ready to accept messages.
+   */
+  isInit() {
+    return this.state.tag !== "WaitingForInit";
+  }
+
+  /**
+   * Get the current state of the worker
+   */
+  getState() {
+    return this.state.tag;
+  }
+
+  /**
+   * If the optimizer is in an error state, return the error
+   * @returns PenroseError if in error state, null otherwise
+   */
+  getError(): PenroseError | null {
+    if (this.state.tag === "Error") {
+      return this.state.error;
+    } else {
+      return null;
+    }
+  }
+
+  /**
+   * Terminate the optimizer. Places optimizer in error state, and a new
+   * one must be constructed if optimization is needed.
+   */
+  terminate() {
+    this.state = {
+      tag: "Error",
+      error: runtimeError("Worker terminated"),
     };
+    this.worker.terminate();
+  }
 
-    worker.onmessage = async ({ data }: MessageEvent<Resp>) => {
-      log.debug("Received message: ", data);
-      if (data.tag === "Update") {
-        this.stats = data.stats;
-        this.onUpdate(
-          layoutStateToRenderState(data.state, this.svgCache),
-          data.stats,
-        );
-      } else if (data.tag === "Error") {
-        this.running = false;
-        this.onError(data.error);
-        return;
-      } else if (data.tag === "Ready") {
-        log.info("Worker ready for new input");
-        this.onComplete();
-        this.resolvePending();
-      } else if (data.tag === "Finished") {
-        this.running = false;
-        this.stats = data.stats;
-        this.onUpdate(
-          layoutStateToRenderState(data.state, this.svgCache),
-          data.stats,
-        );
-        this.onComplete();
-        log.info(`Finished optimization for ${data.id}`);
-      } else if (data.tag === "ReqLabels") {
-        const convert = mathjaxInit();
-        const labelCache = await collectLabels(data.shapes, convert);
-        if (labelCache.isErr()) {
-          this.onError(labelCache.error);
-          return;
-        }
-        const { optLabelCache, svgCache } = separateRenderedLabels(
-          labelCache.value,
-        );
-        this.svgCache = svgCache;
-        log.info(
-          `Compilation completed for ${data.id}, Sending label cache to worker`,
-        );
-        this.onComplete();
-        this.request({
-          tag: "RespLabels",
-          labelCache: optLabelCache,
-          id: data.id,
-        });
+  /**
+   * Wait for the optimizer to be ready to compile
+   */
+  async waitForInit() {
+    return new Promise<void>((resolve, reject) => {
+      if (this.state.tag !== "WaitingForInit") {
+        resolve();
       } else {
-        // Shouldn't Happen
-        console.error(`Unknown Response: ${data}`);
+        this.state.resolve = resolve;
+        this.state.reject = reject;
       }
-    };
+    });
   }
 
-  private request(req: Req) {
-    log.debug("Sending request: ", req);
-    worker.postMessage(req);
-  }
-  askForUpdate(onUpdate: OnUpdate, onError: OnError) {
-    this.onUpdate = onUpdate;
-    this.onError = onError;
-    Atomics.store(this.sharedMemory, 0, 1);
+  /**
+   * Compile a diagram. Places optimizer into 'Compiled' state.
+   * @param domain
+   * @param style
+   * @param substance
+   * @param variation
+   */
+  async compile(
+    domain: string,
+    style: string,
+    substance: string,
+    variation: string,
+  ): Promise<string> {
+    log.info(`compile called from state ${this.state.tag}`);
+    return new Promise(async (resolve, reject) => {
+      while (isWaiting(this.state)) await this.waitForNextState();
+
+      log.info(`compile running from state ${this.state.tag}`);
+      switch (this.state.tag) {
+        case "Init":
+        case "Compiled": {
+          const jobId: string = uuid();
+          const req: CompiledReq = {
+            tag: "CompiledReq",
+            substance,
+            style,
+            domain,
+            variation,
+            jobId,
+          };
+          this.setState({
+            tag: "InitToCompiled",
+            waiting: true,
+            previous: this.state,
+            resolve,
+            reject,
+          });
+          this.request(req);
+          break;
+        }
+
+        case "Optimizing": {
+          await this.interruptOptimizing();
+          const jobId = await this.compile(domain, style, substance, variation);
+          resolve(jobId);
+          break;
+        }
+
+        // exhaustive
+      }
+    });
   }
 
-  private _queue(
-    req: Req,
-    onUpdate: OnUpdate,
-    onError: OnError,
-    onComplete: onComplete,
+  private async startOptimizingHelper(
+    finishResolve: (info: UpdateInfo) => void,
+    finishReject: (e: PenroseError) => void,
   ) {
-    this.pending.push({
-      request: req,
-      onUpdate: (s, stats) => {
-        onUpdate(s, stats);
-        this.pending = [];
-      },
-      onError: (e) => {
-        onError(e);
-        this.pending = [];
-      },
-      onComplete: () => {
-        onComplete();
-        this.pending = [];
-      },
+    return new Promise<void>(async (startResolve, startReject) => {
+      while (isWaiting(this.state)) await this.waitForNextState();
+
+      log.info(`startOptimize running from state ${this.state.tag}`);
+      switch (this.state.tag) {
+        case "Compiled":
+          const req: OptimizingReq = {
+            tag: "OptimizingReq",
+            labelCache: this.state.labelCache,
+          };
+          this.setState({
+            tag: "CompiledToOptimizing",
+            waiting: true,
+            previous: this.state,
+            finishResolve,
+            finishReject,
+            resolve: startResolve,
+            reject: startReject,
+          });
+          this.request(req);
+          break;
+
+        default:
+          startReject(
+            runtimeError(`Cannot start optimizing in state ${this.state.tag}`),
+          );
+      }
     });
   }
 
-  run({
-    domain,
-    style,
-    substance,
-    variation,
-    onUpdate,
-    onComplete,
-    onError,
-  }: {
-    domain: string;
-    style: string;
-    substance: string;
-    variation: string;
-    onUpdate: OnUpdate;
-    onError: OnError;
-    onComplete: onComplete;
-  }): string {
-    // clear out stats
-    this.stats = [];
-    const id = uuid();
-    const request: Req = {
-      tag: "Compile",
-      domain,
-      style,
-      substance,
-      variation,
-      id,
-    };
-    log.info(`Start compilation for ${id}`);
-    if (this.running) {
-      // Let worker know we want them to stop optimizing and get
-      // ready to receive a new trio
-      Atomics.store(this.sharedMemory, 1, 1);
-      log.info("Worker running and asked to stop");
-      this.pending.push({
-        request,
-        onUpdate,
-        onComplete,
-        onError,
-      });
-    } else if (!this.workerInitialized) {
-      log.info("Worker not initialized yet, waiting...");
-      setTimeout(() => {
-        this.request({
-          tag: "Init",
-          sharedMemory: this.sharedMemory.buffer as SharedArrayBuffer,
-        });
-      }, 1000);
-      this._queue(request, onUpdate, onError, onComplete);
-    } else {
-      this.running = true;
-      this.onUpdate = onUpdate;
-      this.onError = onError;
-      this.onComplete = onComplete;
-      this.request(request);
-    }
-    return id;
+  /**
+   * Start optimizing a previously compiled diagram. Must be in 'Compiled' state, and
+   * an error is thrown if requested before compilation or after optimization starts.
+   *
+   * @returns Promises `{ onStart, onFinish }` such that `onStart` resolves once optimization begins
+   *  and `onFinish` resolves once optimization finishes. If `onStart` rejects,
+   * `onFinish` will remain pending.
+   */
+  async startOptimizing(): Promise<OptimizerPromises> {
+    return generateOptimizerPromises(this.startOptimizingHelper.bind(this));
+  }
+
+  /**
+   * Stop optimizing. An error is thrown if an interrupt is requested when optimization
+   * is not occurring.
+   */
+  async interruptOptimizing(): Promise<void> {
+    log.info(`interruptOptimizing called from state ${this.state.tag}`);
+    return new Promise<void>(async (resolve, reject) => {
+      while (isWaiting(this.state)) await this.waitForNextState();
+      log.info(`interruptOptimizing running from state ${this.state.tag}`);
+      switch (this.state.tag) {
+        case "Optimizing":
+          this.setState({
+            tag: "OptimizingToCompiled",
+            waiting: true,
+            previous: this.state,
+            resolve,
+            reject,
+          });
+          this.request({
+            tag: "InterruptReq",
+          });
+          break;
+
+        default:
+          reject(
+            runtimeError(`Cannot receive message in state ${this.state.tag}`),
+          );
+          break;
+      }
+    });
   }
 
-  resample = (
-    id: string,
+  private async resampleHelper(
+    jobId: string,
     variation: string,
-    onUpdate: OnUpdate,
-    onComplete: onComplete,
-  ) => {
-    const request: Req = {
-      tag: "Resample",
-      variation,
-      id,
-    };
-    if (this.running) {
-      // Let worker know we want them to stop optimizing and get
-      // ready to receive a new trio
-      Atomics.store(this.sharedMemory, 1, 1);
-      log.info("Worker asked to stop");
-      this._queue(request, onUpdate, onComplete, () => {});
+    finishResolve: (info: UpdateInfo) => void,
+    finishReject: (err: PenroseError) => void,
+  ) {
+    return new Promise<void>(async (startResolve, startReject) => {
+      while (isWaiting(this.state)) await this.waitForNextState();
+
+      log.info(`resample running from state ${this.state.tag}`);
+      switch (this.state.tag) {
+        case "Optimizing":
+          try {
+            await this.interruptOptimizing();
+            const { onStart, onFinish } = await this.resample(jobId, variation);
+            onFinish.then(finishResolve, finishReject);
+            await onStart;
+            startResolve();
+          } catch (error: any) {
+            startReject(error);
+          }
+          break;
+
+        case "Compiled":
+          const req: ResampleReq = {
+            tag: "ResampleReq",
+            variation,
+            jobId,
+          };
+          this.setState({
+            tag: "CompiledToOptimizing",
+            waiting: true,
+            previous: this.state,
+            finishResolve,
+            finishReject,
+            resolve: startResolve,
+            reject: startReject,
+          });
+          this.request(req);
+          break;
+
+        default:
+          startReject(
+            runtimeError(`Cannot resample from state ${this.state.tag}`),
+          );
+          break;
+      }
+    });
+  }
+
+  /**
+   * Resample a diagram. Must be previously compiled, but resampling in progress
+   * optimization is valid and will simply interrupt the current optimization.
+   * @param jobId Id returned by `compile`
+   * @param variation
+   */
+  async resample(jobId: string, variation: string): Promise<OptimizerPromises> {
+    return generateOptimizerPromises((finishResolve, finishReject) => {
+      return this.resampleHelper(jobId, variation, finishResolve, finishReject);
+    });
+  }
+
+  /**
+   * Poll the worker for diagram updates. Must only be called after compilation.
+   * @returns UpdateInfo if the diagram has changed, otherwise null
+   */
+  async pollForUpdate(): Promise<UpdateInfo | null> {
+    log.info(`pollForUpdate called from state ${this.state.tag}`);
+    return new Promise<UpdateInfo | null>(async (resolve, reject) => {
+      while (isWaiting(this.state)) await this.waitForNextState();
+
+      log.info(`pollForUpdate running from state ${this.state.tag}`);
+      switch (this.state.tag) {
+        case "Optimizing":
+        case "Compiled":
+          if (this.state.tag === "Compiled") {
+            if (this.state.polled) {
+              log.info("Already polled. Continuing...");
+              resolve(null);
+              break;
+            } else {
+              this.state.polled = true;
+            }
+          }
+
+          this.setState({
+            tag: "WaitingForUpdate",
+            waiting: true,
+            previous: this.state,
+            resolve,
+            reject,
+          });
+          this.request({
+            tag: "UpdateReq",
+          });
+          break;
+
+        default:
+          reject(
+            runtimeError(`Cannot pollForUpdate from state ${this.state.tag}`),
+          );
+          break;
+      }
+    });
+  }
+
+  /**
+   * Ask for the diagram at optimization state `i`. Must only be called after
+   * compilation.
+   * @param i Optimization step from which to compute shapes
+   */
+  async computeShapesAtIndex(i: number): Promise<RenderState> {
+    log.info(`computeShapesAtIndex called from state ${this.state.tag}`);
+    return new Promise<RenderState>(async (resolve, reject) => {
+      while (isWaiting(this.state)) await this.waitForNextState();
+
+      log.info(`computeShapesAtIndex running from state ${this.state.tag}`);
+      switch (this.state.tag) {
+        case "Optimizing":
+          this.setState({
+            tag: "WaitingForShapes",
+            waiting: true,
+            previous: this.state,
+            resolve,
+            reject,
+          });
+          this.request({
+            tag: "ComputeShapesReq",
+            index: i,
+          });
+          break;
+
+        case "Compiled":
+          this.setState({
+            tag: "WaitingForShapes",
+            waiting: true,
+            previous: this.state,
+            resolve,
+            reject,
+          });
+          this.request({
+            tag: "ComputeShapesReq",
+            index: i,
+          });
+          break;
+
+        default:
+          reject(
+            runtimeError(`Cannot compute shapes from state ${this.state.tag}`),
+          );
+      }
+    });
+  }
+
+  /**
+   * Get layout stats
+   */
+  getStats() {
+    if ("layoutStats" in this.state) {
+      return this.state.layoutStats;
+    } else if (
+      "previous" in this.state &&
+      "layoutStats" in this.state.previous
+    ) {
+      return this.state.previous.layoutStats;
+    } else {
+      return [];
     }
-    log.info(`Start resampling for ${id}, ${variation}`);
-    this.request(request);
-    // call `onComplete` before swapping out the update function
-    this.onComplete();
-    this.onComplete = onComplete;
-    this.onUpdate = onUpdate;
-  };
-  terminate() {
-    worker.terminate();
   }
 }
diff --git a/packages/editor/src/worker/message.ts b/packages/editor/src/worker/common.ts
similarity index 77%
rename from packages/editor/src/worker/message.ts
rename to packages/editor/src/worker/common.ts
index 4c04099f41..79ff8ac6eb 100644
--- a/packages/editor/src/worker/message.ts
+++ b/packages/editor/src/worker/common.ts
@@ -9,72 +9,92 @@ import {
   State,
 } from "@penrose/core";
 
-/** request */
-
-type ID = { id: string };
+export enum WorkerState {
+  Init = "Init",
+  Compiled = "Compiled",
+  Optimizing = "Optimizing",
+}
 
-export type Req =
-  | Init
-  | ComputeShapes
-  | ((Compile | RespLabels | Resample) & ID);
+export type InitResp = {
+  tag: "InitResp";
+};
 
-export type Resample = {
-  tag: "Resample";
-  variation: string;
+export type CompiledResp = {
+  tag: "CompiledResp";
+  jobId: string;
+  shapes: Shape<Num>[];
 };
 
-export type ComputeShapes = {
-  tag: "ComputeShapes";
-  index: number;
+export type OptimizingResp = {
+  tag: "OptimizingResp";
 };
 
-export type Init = {
-  tag: "Init";
-  sharedMemory: SharedArrayBuffer;
+export type FinishedResp = {
+  tag: "FinishedResp";
+  state: LayoutState;
+  stats: LayoutStats;
 };
 
-export type RespLabels = {
-  tag: "RespLabels";
-  labelCache: LabelMeasurements;
+export type UpdateResp = {
+  tag: "UpdateResp";
+  state: LayoutState;
+  stats: LayoutStats;
 };
 
-export type ReqLabels = {
-  tag: "ReqLabels";
-  shapes: Shape<Num>[];
+export type ErrorResp = {
+  tag: "ErrorResp";
+  error: PenroseError;
 };
 
-export type Compile = {
-  tag: "Compile";
+export type Resp =
+  | InitResp
+  | CompiledResp
+  | OptimizingResp
+  | FinishedResp
+  | UpdateResp
+  | ErrorResp;
+
+export type CompiledReq = {
+  tag: "CompiledReq";
   domain: string;
   style: string;
   substance: string;
   variation: string;
+  jobId: string;
 };
 
-/** response */
-export type Resp = Ready | ((Update | Error | Finished | ReqLabels) & ID);
+export type OptimizingReq = {
+  tag: "OptimizingReq";
+  labelCache: LabelMeasurements;
+};
 
-export type Update = {
-  tag: "Update";
-  state: LayoutState;
-  stats: LayoutStats;
+export type UpdateReq = {
+  tag: "UpdateReq";
 };
 
-export type Finished = {
-  tag: "Finished";
-  state: LayoutState;
-  stats: LayoutStats;
+export type ResampleReq = {
+  tag: "ResampleReq";
+  variation: string;
+  jobId: string;
 };
 
-export type Error = {
-  tag: "Error";
-  error: PenroseError;
+export type ComputeShapesReq = {
+  tag: "ComputeShapesReq";
+  index: number;
 };
 
-export type Ready = {
-  tag: "Ready";
+export type InterruptReq = {
+  tag: "InterruptReq";
 };
 
+export type Req =
+  | CompiledReq
+  | OptimizingReq
+  | UpdateReq
+  | ResampleReq
+  | ComputeShapesReq
+  | InterruptReq;
+
 // state passed from the worker to the main thread.
 // NOTE: there is no DOM element or functions in this state because they cannot be transferred between threads.
 export interface LayoutState {
diff --git a/packages/editor/src/worker/testworker.ts b/packages/editor/src/worker/testworker.ts
deleted file mode 100644
index 83581878fb..0000000000
--- a/packages/editor/src/worker/testworker.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-onmessage = ({ data }: MessageEvent<any>) => {
-  console.log("Received message: ", data);
-};
diff --git a/packages/editor/src/worker/worker.ts b/packages/editor/src/worker/worker.ts
index 95c291800c..84340d741e 100644
--- a/packages/editor/src/worker/worker.ts
+++ b/packages/editor/src/worker/worker.ts
@@ -1,138 +1,252 @@
+// one "frame" of optimization is a list of varying numbers
 import {
-  LabelMeasurements,
-  PenroseError,
-  PenroseState,
-  State,
   compileTrio,
   finalStage,
   insertPending,
   isOptimized,
+  LabelMeasurements,
   nextStage,
+  PenroseError,
+  PenroseState,
   resample,
+  runtimeError,
+  State,
   step,
 } from "@penrose/core";
-import { LayoutStats, Req, Resp, stateToLayoutState } from "./message.js";
+import consola from "consola";
+import {
+  CompiledReq,
+  LayoutState,
+  LayoutStats,
+  Req,
+  Resp,
+  stateToLayoutState,
+  WorkerState,
+} from "./common.js";
 
-// one "frame" of optimization is a list of varying numbers
 type Frame = number[];
 
 type PartialState = Pick<State, "varyingValues" | "inputs" | "shapes"> & {
   labelCache: LabelMeasurements;
 };
 
-// Array of size two. First index is set if main thread wants an update,
-// second is set if user wants to send a new trio.
-let sharedMemory: Int8Array;
-let currentState: PenroseState;
+// state returned by compileTrio
+let unoptState: PenroseState;
+
+// most recent state computed through optimization
+let optState: PenroseState | null = null;
+
 // the UUID of the current task
 let currentTask: string;
+
 let history: Frame[] = [];
 let stats: LayoutStats = [];
+let workerState: WorkerState = WorkerState.Init;
 
-onmessage = async ({ data }: MessageEvent<Req>) => {
-  console.debug("Received message: ", data);
-  switch (data.tag) {
-    case "Init": {
-      sharedMemory = new Int8Array(data.sharedMemory);
-      respond({ tag: "Ready" });
-      return;
-    }
-    case "Compile": {
-      const { domain, substance, style, variation, id } = data;
-      // save the id for the current task
-      currentTask = id;
-      const compileResult = await compileTrio({
-        domain,
-        substance,
-        style,
-        variation,
-      });
-      if (compileResult.isErr()) {
-        respondError(compileResult.error);
-      } else {
-        currentState = compileResult.value;
-        respondReqLabels(compileResult.value);
+// set to true to cause optimizer to finish before the next step
+let shouldFinish = false;
+
+const log = (consola as any)
+  .create({ level: (consola as any).LogLevel.Warn })
+  .withScope("worker:server");
+
+// Wrapper function for postMessage to ensure type safety
+const respond = (response: Resp) => {
+  postMessage(response);
+};
+
+const respondError = (error: PenroseError) => {
+  respond({
+    tag: "ErrorResp",
+    error,
+  });
+};
+
+self.onmessage = async ({ data }: MessageEvent<Req>) => {
+  const badStateError = () => {
+    respondError(
+      runtimeError(`Cannot receive ${data.tag} in worker state ${workerState}`),
+    );
+  };
+  switch (workerState) {
+    case WorkerState.Init:
+      switch (data.tag) {
+        case "CompiledReq":
+          log.info("Received CompiledReq in state Init");
+          await compileAndRespond(data);
+          break;
+
+        default:
+          badStateError();
+          break;
       }
       break;
-    }
-    case "RespLabels": {
-      const stateWithoutLabels: PartialState = currentState;
-      currentState = {
-        ...stateWithoutLabels,
-        labelCache: data.labelCache,
-      } as PenroseState;
-      optimize(insertPending(currentState));
-      break;
-    }
-    case "Resample": {
-      const { variation } = data;
-      const resampled = resample({ ...currentState, variation });
-      optimize(insertPending(resampled));
+
+    case WorkerState.Compiled:
+      switch (data.tag) {
+        case "OptimizingReq":
+          log.info("Received OptimizingReq in state Compiled");
+          const stateWithoutLabels: PartialState = unoptState;
+          unoptState = {
+            ...stateWithoutLabels,
+            labelCache: data.labelCache,
+          } as PenroseState;
+          workerState = WorkerState.Optimizing;
+          respondOptimizing();
+          // launch optimization worker asynchronously
+          // we don't await so that we can accept new messages
+          optimize(insertPending(unoptState));
+          break;
+
+        case "UpdateReq":
+          log.info("Received UpdateReq in state Compiled");
+          respondUpdate(stateToLayoutState(optState ?? unoptState), stats);
+          break;
+
+        case "ComputeShapesReq":
+          log.info("Received ComputeShapesReq in state Compiled");
+          if (data.index >= history.length) {
+            respondError(
+              runtimeError(`Index ${data.index} too large for history`),
+            );
+            break;
+          }
+          {
+            const state = optState ?? unoptState;
+            const newShapes: LayoutState = stateToLayoutState({
+              ...state,
+              varyingValues: history[data.index],
+            });
+            respondUpdate(newShapes, stats);
+          }
+          break;
+
+        case "CompiledReq":
+          log.info("Received CompiledReq in state Compiled");
+          await compileAndRespond(data);
+          break;
+
+        case "ResampleReq":
+          log.info("Received ResampleReq in state Compiled");
+          const { variation } = data;
+          // resample can fail, but doesn't return a result. Hence, try/catch
+          try {
+            const resampled = resample({ ...unoptState, variation });
+            respondOptimizing();
+            optimize(insertPending(resampled));
+          } catch (err: any) {
+            respondError(err);
+          }
+          break;
+
+        case "InterruptReq":
+          // rare edge case, but can happen if interrupt is requested _just_
+          // after optimization finishes
+          break;
+
+        default:
+          badStateError();
+          break;
+      }
       break;
-    }
-    case "ComputeShapes": {
-      const index = data.index;
-      const newShapes = {
-        ...currentState,
-        varyingValues: history[index],
-      };
-      respond({
-        tag: "Update",
-        state: stateToLayoutState(newShapes),
-        id: currentTask,
-        stats: stats,
-      });
+
+    case WorkerState.Optimizing:
+      log.info("Received request during optimization");
+
+      if (optState === null) {
+        respondError(
+          runtimeError(`OptState was null on request during optimizing`),
+        );
+        return;
+      }
+
+      switch (data.tag) {
+        case "UpdateReq":
+          log.info("Received UpdateReq in state Optimizing");
+          respondUpdate(stateToLayoutState(optState), stats);
+          break;
+
+        case "ComputeShapesReq":
+          log.info("Received ComputeShapesReq in state Optimizing");
+          const newShapes: LayoutState = stateToLayoutState({
+            ...unoptState,
+            varyingValues: history[data.index],
+          });
+          respondUpdate(newShapes, stats);
+          break;
+
+        case "InterruptReq":
+          log.info("Received InterruptReq in state Optimizing");
+          shouldFinish = true;
+          break;
+
+        default:
+          badStateError();
+          break;
+      }
       break;
-    }
-    default: {
-      // Shouldn't ever happen
-      console.error(`Unknown request: `, data);
-    }
   }
 };
 
-const respondReqLabels = (state: PenroseState) => {
-  respond({
-    tag: "ReqLabels",
-    shapes: state.shapes,
-    id: currentTask,
+const compileAndRespond = async (data: CompiledReq) => {
+  const { domain, substance, style, variation, jobId } = data;
+
+  // save the id for the current task
+  currentTask = jobId;
+  const compileResult = await compileTrio({
+    domain,
+    substance,
+    style,
+    variation,
   });
+
+  if (compileResult.isErr()) {
+    respondError(compileResult.error);
+  } else {
+    unoptState = compileResult.value;
+    workerState = WorkerState.Compiled;
+    respondCompiled(jobId, unoptState);
+  }
 };
 
-const respondUpdate = async (state: PenroseState) => {
+const respondInit = () => {
   respond({
-    tag: "Update",
-    state: stateToLayoutState(state),
-    id: currentTask,
-    stats,
+    tag: "InitResp",
   });
 };
 
-const respondError = (error: PenroseError) => {
-  const resp: Resp = { tag: "Error", error, id: currentTask };
-  respond(resp);
+const respondCompiled = (id: string, state: PenroseState) => {
+  respond({
+    tag: "CompiledResp",
+    jobId: id,
+    shapes: state.shapes,
+  });
 };
 
-const respondReady = () => {
-  respond({ tag: "Ready" });
+const respondOptimizing = () => {
+  respond({
+    tag: "OptimizingResp",
+  });
 };
 
-const respondFinished = (state: PenroseState) => {
+const respondUpdate = (state: LayoutState, stats: LayoutStats) => {
   respond({
-    tag: "Finished",
-    state: stateToLayoutState(state),
+    tag: "UpdateResp",
+    state,
     stats,
-    id: currentTask,
   });
 };
 
-// Wrapper function for postMessage to ensure type safety
-const respond = (response: Resp) => {
-  postMessage(response);
+const respondFinished = (state: PenroseState, stats: LayoutStats) => {
+  respond({
+    tag: "FinishedResp",
+    state: stateToLayoutState(state),
+    stats,
+  });
 };
 
-// the main optimization loop
-const optimize = (state: PenroseState) => {
+const optimize = async (state: PenroseState) => {
+  optState = state;
   // reset history and stats per optimization run
   // TODO: actually return them?
   history = [];
@@ -144,13 +258,15 @@ const optimize = (state: PenroseState) => {
   ];
   const numSteps = 1;
   let i = 0;
-  while (!isOptimized(state)) {
+
+  // take one optimization step
+  const optStep = async () => {
+    log.info(i);
     let j = 0;
     history.push(state.varyingValues);
     const steppedState = step(state, { until: (): boolean => j++ >= numSteps });
     if (steppedState.isErr()) {
-      respondError(steppedState.error);
-      return;
+      throw steppedState.error;
     } else {
       const stepped = steppedState.value;
       if (isOptimized(stepped) && !finalStage(stepped)) {
@@ -169,16 +285,44 @@ const optimize = (state: PenroseState) => {
         stats[stats.length - 1].steps = i;
       }
     }
-    // Main thread wants an update
-    if (Atomics.exchange(sharedMemory, 0, 0)) {
-      respondUpdate(state);
+
+    optState = state;
+    i++;
+  };
+
+  while (!isOptimized(state)) {
+    /* Javascript has two execution queues: low-priority 'tasks', and
+     high priority 'microtasks'. The microtask queue is emptied after the
+     completion of each task. Promises are queued as microtasks, while events
+     (such as `setTimeout` and `onmessage`) are queued as tasks. So await-ing the
+     next `optStep` would not actually yield to incoming messages. Instead, we
+     place the next call to `optStep` on the task queue as follows. */
+    await new Promise<void>((resolve) => {
+      setTimeout(resolve, 0);
+    });
+
+    if (shouldFinish) {
+      // set by onmessage if we need to stop
+      log.info("Optimization finishing early");
+      shouldFinish = false;
+      break;
     }
-    // Main thread wants to compile something else
-    if (Atomics.exchange(sharedMemory, 1, 0)) {
-      respondReady();
+
+    try {
+      await optStep();
+    } catch (err: any) {
+      log.info("Optimization failed. Quitting without finishing...");
+      workerState = WorkerState.Compiled;
+      optState = null;
+      respondError(err);
       return;
     }
-    i++;
   }
-  respondFinished(state);
+
+  log.info("Optimization finished");
+  workerState = WorkerState.Compiled;
+  respondFinished(state, stats);
 };
+
+// tell OptimizerWorker that we're ready to go
+respondInit();
diff --git a/yarn.lock b/yarn.lock
index d7390e0c30..d8e67889b6 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1589,6 +1589,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/aix-ppc64/-/aix-ppc64-0.19.11.tgz#2acd20be6d4f0458bc8c784103495ff24f13b1d3"
   integrity sha512-FnzU0LyE3ySQk7UntJO4+qIiQgI7KoODnZg5xzXIrFJlKd2P2gwHsHY4927xj9y5PJmJSzULiUCWmv7iWnNa7g==
 
+"@esbuild/aix-ppc64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/aix-ppc64/-/aix-ppc64-0.20.2.tgz#a70f4ac11c6a1dfc18b8bbb13284155d933b9537"
+  integrity sha512-D+EBOJHXdNZcLJRBkhENNG8Wji2kgc9AZ9KiPr1JuZjsNtyHzrsfLRrY0tk2H2aoFu6RANO1y1iPPUCDYWkb5g==
+
 "@esbuild/android-arm64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/android-arm64/-/android-arm64-0.18.20.tgz#984b4f9c8d0377443cc2dfcef266d02244593622"
@@ -1599,6 +1604,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/android-arm64/-/android-arm64-0.19.11.tgz#b45d000017385c9051a4f03e17078abb935be220"
   integrity sha512-aiu7K/5JnLj//KOnOfEZ0D90obUkRzDMyqd/wNAUQ34m4YUPVhRZpnqKV9uqDGxT7cToSDnIHsGooyIczu9T+Q==
 
+"@esbuild/android-arm64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/android-arm64/-/android-arm64-0.20.2.tgz#db1c9202a5bc92ea04c7b6840f1bbe09ebf9e6b9"
+  integrity sha512-mRzjLacRtl/tWU0SvD8lUEwb61yP9cqQo6noDZP/O8VkwafSYwZ4yWy24kan8jE/IMERpYncRt2dw438LP3Xmg==
+
 "@esbuild/android-arm@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/android-arm/-/android-arm-0.18.20.tgz#fedb265bc3a589c84cc11f810804f234947c3682"
@@ -1609,6 +1619,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/android-arm/-/android-arm-0.19.11.tgz#f46f55414e1c3614ac682b29977792131238164c"
   integrity sha512-5OVapq0ClabvKvQ58Bws8+wkLCV+Rxg7tUVbo9xu034Nm536QTII4YzhaFriQ7rMrorfnFKUsArD2lqKbFY4vw==
 
+"@esbuild/android-arm@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/android-arm/-/android-arm-0.20.2.tgz#3b488c49aee9d491c2c8f98a909b785870d6e995"
+  integrity sha512-t98Ra6pw2VaDhqNWO2Oph2LXbz/EJcnLmKLGBJwEwXX/JAN83Fym1rU8l0JUWK6HkIbWONCSSatf4sf2NBRx/w==
+
 "@esbuild/android-x64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/android-x64/-/android-x64-0.18.20.tgz#35cf419c4cfc8babe8893d296cd990e9e9f756f2"
@@ -1619,6 +1634,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/android-x64/-/android-x64-0.19.11.tgz#bfc01e91740b82011ef503c48f548950824922b2"
   integrity sha512-eccxjlfGw43WYoY9QgB82SgGgDbibcqyDTlk3l3C0jOVHKxrjdc9CTwDUQd0vkvYg5um0OH+GpxYvp39r+IPOg==
 
+"@esbuild/android-x64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/android-x64/-/android-x64-0.20.2.tgz#3b1628029e5576249d2b2d766696e50768449f98"
+  integrity sha512-btzExgV+/lMGDDa194CcUQm53ncxzeBrWJcncOBxuC6ndBkKxnHdFJn86mCIgTELsooUmwUm9FkhSp5HYu00Rg==
+
 "@esbuild/darwin-arm64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/darwin-arm64/-/darwin-arm64-0.18.20.tgz#08172cbeccf95fbc383399a7f39cfbddaeb0d7c1"
@@ -1629,6 +1649,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/darwin-arm64/-/darwin-arm64-0.19.11.tgz#533fb7f5a08c37121d82c66198263dcc1bed29bf"
   integrity sha512-ETp87DRWuSt9KdDVkqSoKoLFHYTrkyz2+65fj9nfXsaV3bMhTCjtQfw3y+um88vGRKRiF7erPrh/ZuIdLUIVxQ==
 
+"@esbuild/darwin-arm64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/darwin-arm64/-/darwin-arm64-0.20.2.tgz#6e8517a045ddd86ae30c6608c8475ebc0c4000bb"
+  integrity sha512-4J6IRT+10J3aJH3l1yzEg9y3wkTDgDk7TSDFX+wKFiWjqWp/iCfLIYzGyasx9l0SAFPT1HwSCR+0w/h1ES/MjA==
+
 "@esbuild/darwin-x64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/darwin-x64/-/darwin-x64-0.18.20.tgz#d70d5790d8bf475556b67d0f8b7c5bdff053d85d"
@@ -1639,6 +1664,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/darwin-x64/-/darwin-x64-0.19.11.tgz#62f3819eff7e4ddc656b7c6815a31cf9a1e7d98e"
   integrity sha512-fkFUiS6IUK9WYUO/+22omwetaSNl5/A8giXvQlcinLIjVkxwTLSktbF5f/kJMftM2MJp9+fXqZ5ezS7+SALp4g==
 
+"@esbuild/darwin-x64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/darwin-x64/-/darwin-x64-0.20.2.tgz#90ed098e1f9dd8a9381695b207e1cff45540a0d0"
+  integrity sha512-tBcXp9KNphnNH0dfhv8KYkZhjc+H3XBkF5DKtswJblV7KlT9EI2+jeA8DgBjp908WEuYll6pF+UStUCfEpdysA==
+
 "@esbuild/freebsd-arm64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/freebsd-arm64/-/freebsd-arm64-0.18.20.tgz#98755cd12707f93f210e2494d6a4b51b96977f54"
@@ -1649,6 +1679,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/freebsd-arm64/-/freebsd-arm64-0.19.11.tgz#d478b4195aa3ca44160272dab85ef8baf4175b4a"
   integrity sha512-lhoSp5K6bxKRNdXUtHoNc5HhbXVCS8V0iZmDvyWvYq9S5WSfTIHU2UGjcGt7UeS6iEYp9eeymIl5mJBn0yiuxA==
 
+"@esbuild/freebsd-arm64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/freebsd-arm64/-/freebsd-arm64-0.20.2.tgz#d71502d1ee89a1130327e890364666c760a2a911"
+  integrity sha512-d3qI41G4SuLiCGCFGUrKsSeTXyWG6yem1KcGZVS+3FYlYhtNoNgYrWcvkOoaqMhwXSMrZRl69ArHsGJ9mYdbbw==
+
 "@esbuild/freebsd-x64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/freebsd-x64/-/freebsd-x64-0.18.20.tgz#c1eb2bff03915f87c29cece4c1a7fa1f423b066e"
@@ -1659,6 +1694,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/freebsd-x64/-/freebsd-x64-0.19.11.tgz#7bdcc1917409178257ca6a1a27fe06e797ec18a2"
   integrity sha512-JkUqn44AffGXitVI6/AbQdoYAq0TEullFdqcMY/PCUZ36xJ9ZJRtQabzMA+Vi7r78+25ZIBosLTOKnUXBSi1Kw==
 
+"@esbuild/freebsd-x64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/freebsd-x64/-/freebsd-x64-0.20.2.tgz#aa5ea58d9c1dd9af688b8b6f63ef0d3d60cea53c"
+  integrity sha512-d+DipyvHRuqEeM5zDivKV1KuXn9WeRX6vqSqIDgwIfPQtwMP4jaDsQsDncjTDDsExT4lR/91OLjRo8bmC1e+Cw==
+
 "@esbuild/linux-arm64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/linux-arm64/-/linux-arm64-0.18.20.tgz#bad4238bd8f4fc25b5a021280c770ab5fc3a02a0"
@@ -1669,6 +1709,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/linux-arm64/-/linux-arm64-0.19.11.tgz#58ad4ff11685fcc735d7ff4ca759ab18fcfe4545"
   integrity sha512-LneLg3ypEeveBSMuoa0kwMpCGmpu8XQUh+mL8XXwoYZ6Be2qBnVtcDI5azSvh7vioMDhoJFZzp9GWp9IWpYoUg==
 
+"@esbuild/linux-arm64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/linux-arm64/-/linux-arm64-0.20.2.tgz#055b63725df678379b0f6db9d0fa85463755b2e5"
+  integrity sha512-9pb6rBjGvTFNira2FLIWqDk/uaf42sSyLE8j1rnUpuzsODBq7FvpwHYZxQ/It/8b+QOS1RYfqgGFNLRI+qlq2A==
+
 "@esbuild/linux-arm@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/linux-arm/-/linux-arm-0.18.20.tgz#3e617c61f33508a27150ee417543c8ab5acc73b0"
@@ -1679,6 +1724,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/linux-arm/-/linux-arm-0.19.11.tgz#ce82246d873b5534d34de1e5c1b33026f35e60e3"
   integrity sha512-3CRkr9+vCV2XJbjwgzjPtO8T0SZUmRZla+UL1jw+XqHZPkPgZiyWvbDvl9rqAN8Zl7qJF0O/9ycMtjU67HN9/Q==
 
+"@esbuild/linux-arm@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/linux-arm/-/linux-arm-0.20.2.tgz#76b3b98cb1f87936fbc37f073efabad49dcd889c"
+  integrity sha512-VhLPeR8HTMPccbuWWcEUD1Az68TqaTYyj6nfE4QByZIQEQVWBB8vup8PpR7y1QHL3CpcF6xd5WVBU/+SBEvGTg==
+
 "@esbuild/linux-ia32@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/linux-ia32/-/linux-ia32-0.18.20.tgz#699391cccba9aee6019b7f9892eb99219f1570a7"
@@ -1689,6 +1739,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/linux-ia32/-/linux-ia32-0.19.11.tgz#cbae1f313209affc74b80f4390c4c35c6ab83fa4"
   integrity sha512-caHy++CsD8Bgq2V5CodbJjFPEiDPq8JJmBdeyZ8GWVQMjRD0sU548nNdwPNvKjVpamYYVL40AORekgfIubwHoA==
 
+"@esbuild/linux-ia32@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/linux-ia32/-/linux-ia32-0.20.2.tgz#c0e5e787c285264e5dfc7a79f04b8b4eefdad7fa"
+  integrity sha512-o10utieEkNPFDZFQm9CoP7Tvb33UutoJqg3qKf1PWVeeJhJw0Q347PxMvBgVVFgouYLGIhFYG0UGdBumROyiig==
+
 "@esbuild/linux-loong64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/linux-loong64/-/linux-loong64-0.18.20.tgz#e6fccb7aac178dd2ffb9860465ac89d7f23b977d"
@@ -1699,6 +1754,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/linux-loong64/-/linux-loong64-0.19.11.tgz#5f32aead1c3ec8f4cccdb7ed08b166224d4e9121"
   integrity sha512-ppZSSLVpPrwHccvC6nQVZaSHlFsvCQyjnvirnVjbKSHuE5N24Yl8F3UwYUUR1UEPaFObGD2tSvVKbvR+uT1Nrg==
 
+"@esbuild/linux-loong64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/linux-loong64/-/linux-loong64-0.20.2.tgz#a6184e62bd7cdc63e0c0448b83801001653219c5"
+  integrity sha512-PR7sp6R/UC4CFVomVINKJ80pMFlfDfMQMYynX7t1tNTeivQ6XdX5r2XovMmha/VjR1YN/HgHWsVcTRIMkymrgQ==
+
 "@esbuild/linux-mips64el@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/linux-mips64el/-/linux-mips64el-0.18.20.tgz#eeff3a937de9c2310de30622a957ad1bd9183231"
@@ -1709,6 +1769,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/linux-mips64el/-/linux-mips64el-0.19.11.tgz#38eecf1cbb8c36a616261de858b3c10d03419af9"
   integrity sha512-B5x9j0OgjG+v1dF2DkH34lr+7Gmv0kzX6/V0afF41FkPMMqaQ77pH7CrhWeR22aEeHKaeZVtZ6yFwlxOKPVFyg==
 
+"@esbuild/linux-mips64el@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/linux-mips64el/-/linux-mips64el-0.20.2.tgz#d08e39ce86f45ef8fc88549d29c62b8acf5649aa"
+  integrity sha512-4BlTqeutE/KnOiTG5Y6Sb/Hw6hsBOZapOVF6njAESHInhlQAghVVZL1ZpIctBOoTFbQyGW+LsVYZ8lSSB3wkjA==
+
 "@esbuild/linux-ppc64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/linux-ppc64/-/linux-ppc64-0.18.20.tgz#2f7156bde20b01527993e6881435ad79ba9599fb"
@@ -1719,6 +1784,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/linux-ppc64/-/linux-ppc64-0.19.11.tgz#9c5725a94e6ec15b93195e5a6afb821628afd912"
   integrity sha512-MHrZYLeCG8vXblMetWyttkdVRjQlQUb/oMgBNurVEnhj4YWOr4G5lmBfZjHYQHHN0g6yDmCAQRR8MUHldvvRDA==
 
+"@esbuild/linux-ppc64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/linux-ppc64/-/linux-ppc64-0.20.2.tgz#8d252f0b7756ffd6d1cbde5ea67ff8fd20437f20"
+  integrity sha512-rD3KsaDprDcfajSKdn25ooz5J5/fWBylaaXkuotBDGnMnDP1Uv5DLAN/45qfnf3JDYyJv/ytGHQaziHUdyzaAg==
+
 "@esbuild/linux-riscv64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/linux-riscv64/-/linux-riscv64-0.18.20.tgz#6628389f210123d8b4743045af8caa7d4ddfc7a6"
@@ -1729,6 +1799,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/linux-riscv64/-/linux-riscv64-0.19.11.tgz#2dc4486d474a2a62bbe5870522a9a600e2acb916"
   integrity sha512-f3DY++t94uVg141dozDu4CCUkYW+09rWtaWfnb3bqe4w5NqmZd6nPVBm+qbz7WaHZCoqXqHz5p6CM6qv3qnSSQ==
 
+"@esbuild/linux-riscv64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/linux-riscv64/-/linux-riscv64-0.20.2.tgz#19f6dcdb14409dae607f66ca1181dd4e9db81300"
+  integrity sha512-snwmBKacKmwTMmhLlz/3aH1Q9T8v45bKYGE3j26TsaOVtjIag4wLfWSiZykXzXuE1kbCE+zJRmwp+ZbIHinnVg==
+
 "@esbuild/linux-s390x@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/linux-s390x/-/linux-s390x-0.18.20.tgz#255e81fb289b101026131858ab99fba63dcf0071"
@@ -1739,6 +1814,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/linux-s390x/-/linux-s390x-0.19.11.tgz#4ad8567df48f7dd4c71ec5b1753b6f37561a65a8"
   integrity sha512-A5xdUoyWJHMMlcSMcPGVLzYzpcY8QP1RtYzX5/bS4dvjBGVxdhuiYyFwp7z74ocV7WDc0n1harxmpq2ePOjI0Q==
 
+"@esbuild/linux-s390x@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/linux-s390x/-/linux-s390x-0.20.2.tgz#3c830c90f1a5d7dd1473d5595ea4ebb920988685"
+  integrity sha512-wcWISOobRWNm3cezm5HOZcYz1sKoHLd8VL1dl309DiixxVFoFe/o8HnwuIwn6sXre88Nwj+VwZUvJf4AFxkyrQ==
+
 "@esbuild/linux-x64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/linux-x64/-/linux-x64-0.18.20.tgz#c7690b3417af318a9b6f96df3031a8865176d338"
@@ -1749,6 +1829,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/linux-x64/-/linux-x64-0.19.11.tgz#b7390c4d5184f203ebe7ddaedf073df82a658766"
   integrity sha512-grbyMlVCvJSfxFQUndw5mCtWs5LO1gUlwP4CDi4iJBbVpZcqLVT29FxgGuBJGSzyOxotFG4LoO5X+M1350zmPA==
 
+"@esbuild/linux-x64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/linux-x64/-/linux-x64-0.20.2.tgz#86eca35203afc0d9de0694c64ec0ab0a378f6fff"
+  integrity sha512-1MdwI6OOTsfQfek8sLwgyjOXAu+wKhLEoaOLTjbijk6E2WONYpH9ZU2mNtR+lZ2B4uwr+usqGuVfFT9tMtGvGw==
+
 "@esbuild/netbsd-x64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/netbsd-x64/-/netbsd-x64-0.18.20.tgz#30e8cd8a3dded63975e2df2438ca109601ebe0d1"
@@ -1759,6 +1844,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/netbsd-x64/-/netbsd-x64-0.19.11.tgz#d633c09492a1721377f3bccedb2d821b911e813d"
   integrity sha512-13jvrQZJc3P230OhU8xgwUnDeuC/9egsjTkXN49b3GcS5BKvJqZn86aGM8W9pd14Kd+u7HuFBMVtrNGhh6fHEQ==
 
+"@esbuild/netbsd-x64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/netbsd-x64/-/netbsd-x64-0.20.2.tgz#e771c8eb0e0f6e1877ffd4220036b98aed5915e6"
+  integrity sha512-K8/DhBxcVQkzYc43yJXDSyjlFeHQJBiowJ0uVL6Tor3jGQfSGHNNJcWxNbOI8v5k82prYqzPuwkzHt3J1T1iZQ==
+
 "@esbuild/openbsd-x64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/openbsd-x64/-/openbsd-x64-0.18.20.tgz#7812af31b205055874c8082ea9cf9ab0da6217ae"
@@ -1769,6 +1859,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/openbsd-x64/-/openbsd-x64-0.19.11.tgz#17388c76e2f01125bf831a68c03a7ffccb65d1a2"
   integrity sha512-ysyOGZuTp6SNKPE11INDUeFVVQFrhcNDVUgSQVDzqsqX38DjhPEPATpid04LCoUr2WXhQTEZ8ct/EgJCUDpyNw==
 
+"@esbuild/openbsd-x64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/openbsd-x64/-/openbsd-x64-0.20.2.tgz#9a795ae4b4e37e674f0f4d716f3e226dd7c39baf"
+  integrity sha512-eMpKlV0SThJmmJgiVyN9jTPJ2VBPquf6Kt/nAoo6DgHAoN57K15ZghiHaMvqjCye/uU4X5u3YSMgVBI1h3vKrQ==
+
 "@esbuild/sunos-x64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/sunos-x64/-/sunos-x64-0.18.20.tgz#d5c275c3b4e73c9b0ecd38d1ca62c020f887ab9d"
@@ -1779,6 +1874,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/sunos-x64/-/sunos-x64-0.19.11.tgz#e320636f00bb9f4fdf3a80e548cb743370d41767"
   integrity sha512-Hf+Sad9nVwvtxy4DXCZQqLpgmRTQqyFyhT3bZ4F2XlJCjxGmRFF0Shwn9rzhOYRB61w9VMXUkxlBy56dk9JJiQ==
 
+"@esbuild/sunos-x64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/sunos-x64/-/sunos-x64-0.20.2.tgz#7df23b61a497b8ac189def6e25a95673caedb03f"
+  integrity sha512-2UyFtRC6cXLyejf/YEld4Hajo7UHILetzE1vsRcGL3earZEW77JxrFjH4Ez2qaTiEfMgAXxfAZCm1fvM/G/o8w==
+
 "@esbuild/win32-arm64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/win32-arm64/-/win32-arm64-0.18.20.tgz#73bc7f5a9f8a77805f357fab97f290d0e4820ac9"
@@ -1789,6 +1889,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/win32-arm64/-/win32-arm64-0.19.11.tgz#c778b45a496e90b6fc373e2a2bb072f1441fe0ee"
   integrity sha512-0P58Sbi0LctOMOQbpEOvOL44Ne0sqbS0XWHMvvrg6NE5jQ1xguCSSw9jQeUk2lfrXYsKDdOe6K+oZiwKPilYPQ==
 
+"@esbuild/win32-arm64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/win32-arm64/-/win32-arm64-0.20.2.tgz#f1ae5abf9ca052ae11c1bc806fb4c0f519bacf90"
+  integrity sha512-GRibxoawM9ZCnDxnP3usoUDO9vUkpAxIIZ6GQI+IlVmr5kP3zUq+l17xELTHMWTWzjxa2guPNyrpq1GWmPvcGQ==
+
 "@esbuild/win32-ia32@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/win32-ia32/-/win32-ia32-0.18.20.tgz#ec93cbf0ef1085cc12e71e0d661d20569ff42102"
@@ -1799,6 +1904,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/win32-ia32/-/win32-ia32-0.19.11.tgz#481a65fee2e5cce74ec44823e6b09ecedcc5194c"
   integrity sha512-6YOrWS+sDJDmshdBIQU+Uoyh7pQKrdykdefC1avn76ss5c+RN6gut3LZA4E2cH5xUEp5/cA0+YxRaVtRAb0xBg==
 
+"@esbuild/win32-ia32@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/win32-ia32/-/win32-ia32-0.20.2.tgz#241fe62c34d8e8461cd708277813e1d0ba55ce23"
+  integrity sha512-HfLOfn9YWmkSKRQqovpnITazdtquEW8/SoHW7pWpuEeguaZI4QnCRW6b+oZTztdBnZOS2hqJ6im/D5cPzBTTlQ==
+
 "@esbuild/win32-x64@0.18.20":
   version "0.18.20"
   resolved "https://registry.yarnpkg.com/@esbuild/win32-x64/-/win32-x64-0.18.20.tgz#786c5f41f043b07afb1af37683d7c33668858f6d"
@@ -1809,6 +1919,11 @@
   resolved "https://registry.yarnpkg.com/@esbuild/win32-x64/-/win32-x64-0.19.11.tgz#a5d300008960bb39677c46bf16f53ec70d8dee04"
   integrity sha512-vfkhltrjCAb603XaFhqhAF4LGDi2M4OrCRrFusyQ+iTLQ/o60QQXxc9cZC/FFpihBI9N1Grn6SMKVJ4KP7Fuiw==
 
+"@esbuild/win32-x64@0.20.2":
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/@esbuild/win32-x64/-/win32-x64-0.20.2.tgz#9c907b21e30a52db959ba4f80bb01a0cc403d5cc"
+  integrity sha512-N49X4lJX27+l9jbLKSqZ6bKNjzQvHaT8IIFUy+YIqmXQdjYCToGWwOItDrfby14c78aDd5NHQl29xingXfCdLQ==
+
 "@eslint-community/eslint-utils@^4.2.0", "@eslint-community/eslint-utils@^4.4.0":
   version "4.4.0"
   resolved "https://registry.yarnpkg.com/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz#a23514e8fb9af1269d5f7788aa556798d61c6b59"
@@ -1991,6 +2106,13 @@
   resolved "https://registry.yarnpkg.com/@istanbuljs/schema/-/schema-0.1.3.tgz#e45e384e4b8ec16bce2fd903af78450f6bf7ec98"
   integrity sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==
 
+"@jest/schemas@^29.6.3":
+  version "29.6.3"
+  resolved "https://registry.yarnpkg.com/@jest/schemas/-/schemas-29.6.3.tgz#430b5ce8a4e0044a7e3819663305a7b3091c8e03"
+  integrity sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==
+  dependencies:
+    "@sinclair/typebox" "^0.27.8"
+
 "@jest/transform@^26.6.2":
   version "26.6.2"
   resolved "https://registry.yarnpkg.com/@jest/transform/-/transform-26.6.2.tgz#5ac57c5fa1ad17b2aae83e73e45813894dcf2e4b"
@@ -3166,66 +3288,146 @@
   resolved "https://registry.yarnpkg.com/@rollup/plugin-virtual/-/plugin-virtual-3.0.2.tgz#17e17eeecb4c9fa1c0a6e72c9e5f66382fddbb82"
   integrity sha512-10monEYsBp3scM4/ND4LNH5Rxvh3e/cVeL3jWTgZ2SrQ+BmUoQcopVQvnaMcOnykb1VkxUFuDAN+0FnpTFRy2A==
 
+"@rollup/rollup-android-arm-eabi@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.18.0.tgz#bbd0e616b2078cd2d68afc9824d1fadb2f2ffd27"
+  integrity sha512-Tya6xypR10giZV1XzxmH5wr25VcZSncG0pZIjfePT0OVBvqNEurzValetGNarVrGiq66EBVAFn15iYX4w6FKgQ==
+
 "@rollup/rollup-android-arm-eabi@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.9.5.tgz#b752b6c88a14ccfcbdf3f48c577ccc3a7f0e66b9"
   integrity sha512-idWaG8xeSRCfRq9KpRysDHJ/rEHBEXcHuJ82XY0yYFIWnLMjZv9vF/7DOq8djQ2n3Lk6+3qfSH8AqlmHlmi1MA==
 
+"@rollup/rollup-android-arm64@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.18.0.tgz#97255ef6384c5f73f4800c0de91f5f6518e21203"
+  integrity sha512-avCea0RAP03lTsDhEyfy+hpfr85KfyTctMADqHVhLAF3MlIkq83CP8UfAHUssgXTYd+6er6PaAhx/QGv4L1EiA==
+
 "@rollup/rollup-android-arm64@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.9.5.tgz#33757c3a448b9ef77b6f6292d8b0ec45c87e9c1a"
   integrity sha512-f14d7uhAMtsCGjAYwZGv6TwuS3IFaM4ZnGMUn3aCBgkcHAYErhV1Ad97WzBvS2o0aaDv4mVz+syiN0ElMyfBPg==
 
+"@rollup/rollup-darwin-arm64@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.18.0.tgz#b6dd74e117510dfe94541646067b0545b42ff096"
+  integrity sha512-IWfdwU7KDSm07Ty0PuA/W2JYoZ4iTj3TUQjkVsO/6U+4I1jN5lcR71ZEvRh52sDOERdnNhhHU57UITXz5jC1/w==
+
 "@rollup/rollup-darwin-arm64@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.9.5.tgz#5234ba62665a3f443143bc8bcea9df2cc58f55fb"
   integrity sha512-ndoXeLx455FffL68OIUrVr89Xu1WLzAG4n65R8roDlCoYiQcGGg6MALvs2Ap9zs7AHg8mpHtMpwC8jBBjZrT/w==
 
+"@rollup/rollup-darwin-x64@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.18.0.tgz#e07d76de1cec987673e7f3d48ccb8e106d42c05c"
+  integrity sha512-n2LMsUz7Ynu7DoQrSQkBf8iNrjOGyPLrdSg802vk6XT3FtsgX6JbE8IHRvposskFm9SNxzkLYGSq9QdpLYpRNA==
+
 "@rollup/rollup-darwin-x64@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.9.5.tgz#981256c054d3247b83313724938d606798a919d1"
   integrity sha512-UmElV1OY2m/1KEEqTlIjieKfVwRg0Zwg4PLgNf0s3glAHXBN99KLpw5A5lrSYCa1Kp63czTpVll2MAqbZYIHoA==
 
+"@rollup/rollup-linux-arm-gnueabihf@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.18.0.tgz#9f1a6d218b560c9d75185af4b8bb42f9f24736b8"
+  integrity sha512-C/zbRYRXFjWvz9Z4haRxcTdnkPt1BtCkz+7RtBSuNmKzMzp3ZxdM28Mpccn6pt28/UWUCTXa+b0Mx1k3g6NOMA==
+
 "@rollup/rollup-linux-arm-gnueabihf@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.9.5.tgz#120678a5a2b3a283a548dbb4d337f9187a793560"
   integrity sha512-Q0LcU61v92tQB6ae+udZvOyZ0wfpGojtAKrrpAaIqmJ7+psq4cMIhT/9lfV6UQIpeItnq/2QDROhNLo00lOD1g==
 
+"@rollup/rollup-linux-arm-musleabihf@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.18.0.tgz#53618b92e6ffb642c7b620e6e528446511330549"
+  integrity sha512-l3m9ewPgjQSXrUMHg93vt0hYCGnrMOcUpTz6FLtbwljo2HluS4zTXFy2571YQbisTnfTKPZ01u/ukJdQTLGh9A==
+
+"@rollup/rollup-linux-arm64-gnu@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.18.0.tgz#99a7ba5e719d4f053761a698f7b52291cefba577"
+  integrity sha512-rJ5D47d8WD7J+7STKdCUAgmQk49xuFrRi9pZkWoRD1UeSMakbcepWXPF8ycChBoAqs1pb2wzvbY6Q33WmN2ftw==
+
 "@rollup/rollup-linux-arm64-gnu@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.9.5.tgz#c99d857e2372ece544b6f60b85058ad259f64114"
   integrity sha512-dkRscpM+RrR2Ee3eOQmRWFjmV/payHEOrjyq1VZegRUa5OrZJ2MAxBNs05bZuY0YCtpqETDy1Ix4i/hRqX98cA==
 
+"@rollup/rollup-linux-arm64-musl@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.18.0.tgz#f53db99a45d9bc00ce94db8a35efa7c3c144a58c"
+  integrity sha512-be6Yx37b24ZwxQ+wOQXXLZqpq4jTckJhtGlWGZs68TgdKXJgw54lUUoFYrg6Zs/kjzAQwEwYbp8JxZVzZLRepQ==
+
 "@rollup/rollup-linux-arm64-musl@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.9.5.tgz#3064060f568a5718c2a06858cd6e6d24f2ff8632"
   integrity sha512-QaKFVOzzST2xzY4MAmiDmURagWLFh+zZtttuEnuNn19AiZ0T3fhPyjPPGwLNdiDT82ZE91hnfJsUiDwF9DClIQ==
 
+"@rollup/rollup-linux-powerpc64le-gnu@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.18.0.tgz#cbb0837408fe081ce3435cf3730e090febafc9bf"
+  integrity sha512-hNVMQK+qrA9Todu9+wqrXOHxFiD5YmdEi3paj6vP02Kx1hjd2LLYR2eaN7DsEshg09+9uzWi2W18MJDlG0cxJA==
+
+"@rollup/rollup-linux-riscv64-gnu@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.18.0.tgz#8ed09c1d1262ada4c38d791a28ae0fea28b80cc9"
+  integrity sha512-ROCM7i+m1NfdrsmvwSzoxp9HFtmKGHEqu5NNDiZWQtXLA8S5HBCkVvKAxJ8U+CVctHwV2Gb5VUaK7UAkzhDjlg==
+
 "@rollup/rollup-linux-riscv64-gnu@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.9.5.tgz#987d30b5d2b992fff07d055015991a57ff55fbad"
   integrity sha512-HeGqmRJuyVg6/X6MpE2ur7GbymBPS8Np0S/vQFHDmocfORT+Zt76qu+69NUoxXzGqVP1pzaY6QIi0FJWLC3OPA==
 
+"@rollup/rollup-linux-s390x-gnu@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.18.0.tgz#938138d3c8e0c96f022252a28441dcfb17afd7ec"
+  integrity sha512-0UyyRHyDN42QL+NbqevXIIUnKA47A+45WyasO+y2bGJ1mhQrfrtXUpTxCOrfxCR4esV3/RLYyucGVPiUsO8xjg==
+
+"@rollup/rollup-linux-x64-gnu@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.18.0.tgz#1a7481137a54740bee1ded4ae5752450f155d942"
+  integrity sha512-xuglR2rBVHA5UsI8h8UbX4VJ470PtGCf5Vpswh7p2ukaqBGFTnsfzxUBetoWBWymHMxbIG0Cmx7Y9qDZzr648w==
+
 "@rollup/rollup-linux-x64-gnu@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.9.5.tgz#85946ee4d068bd12197aeeec2c6f679c94978a49"
   integrity sha512-Dq1bqBdLaZ1Gb/l2e5/+o3B18+8TI9ANlA1SkejZqDgdU/jK/ThYaMPMJpVMMXy2uRHvGKbkz9vheVGdq3cJfA==
 
+"@rollup/rollup-linux-x64-musl@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.18.0.tgz#f1186afc601ac4f4fc25fac4ca15ecbee3a1874d"
+  integrity sha512-LKaqQL9osY/ir2geuLVvRRs+utWUNilzdE90TpyoX0eNqPzWjRm14oMEE+YLve4k/NAqCdPkGYDaDF5Sw+xBfg==
+
 "@rollup/rollup-linux-x64-musl@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.9.5.tgz#fe0b20f9749a60eb1df43d20effa96c756ddcbd4"
   integrity sha512-ezyFUOwldYpj7AbkwyW9AJ203peub81CaAIVvckdkyH8EvhEIoKzaMFJj0G4qYJ5sw3BpqhFrsCc30t54HV8vg==
 
+"@rollup/rollup-win32-arm64-msvc@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.18.0.tgz#ed6603e93636a96203c6915be4117245c1bd2daf"
+  integrity sha512-7J6TkZQFGo9qBKH0pk2cEVSRhJbL6MtfWxth7Y5YmZs57Pi+4x6c2dStAUvaQkHQLnEQv1jzBUW43GvZW8OFqA==
+
 "@rollup/rollup-win32-arm64-msvc@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.9.5.tgz#422661ef0e16699a234465d15b2c1089ef963b2a"
   integrity sha512-aHSsMnUw+0UETB0Hlv7B/ZHOGY5bQdwMKJSzGfDfvyhnpmVxLMGnQPGNE9wgqkLUs3+gbG1Qx02S2LLfJ5GaRQ==
 
+"@rollup/rollup-win32-ia32-msvc@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.18.0.tgz#14e0b404b1c25ebe6157a15edb9c46959ba74c54"
+  integrity sha512-Txjh+IxBPbkUB9+SXZMpv+b/vnTEtFyfWZgJ6iyCmt2tdx0OF5WhFowLmnh8ENGNpfUlUZkdI//4IEmhwPieNg==
+
 "@rollup/rollup-win32-ia32-msvc@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.9.5.tgz#7b73a145891c202fbcc08759248983667a035d85"
   integrity sha512-AiqiLkb9KSf7Lj/o1U3SEP9Zn+5NuVKgFdRIZkvd4N0+bYrTOovVd0+LmYCPQGbocT4kvFyK+LXCDiXPBF3fyA==
 
+"@rollup/rollup-win32-x64-msvc@4.18.0":
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.18.0.tgz#5d694d345ce36b6ecf657349e03eb87297e68da4"
+  integrity sha512-UOo5FdvOL0+eIVTgS4tIdbW+TtnBLWg1YBCcU2KWM7nuNwRz9bksDX1bekJJCpu25N1DVWaCwnT39dVQxzqS8g==
+
 "@rollup/rollup-win32-x64-msvc@4.9.5":
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.9.5.tgz#10491ccf4f63c814d4149e0316541476ea603602"
@@ -3236,6 +3438,11 @@
   resolved "https://registry.yarnpkg.com/@rose-lang/wasm/-/wasm-0.4.9.tgz#c95f25bd4fac9a8e4e80c43469751eb12c58dd0b"
   integrity sha512-2Qnoy7Ti7NqMh9OVwzIJTa1VHqEsR0CtOeDjXkFRONmKyaSqinHhWY8ornyGL6EPlMATK3ezDvNArzY1FJu3Kg==
 
+"@sinclair/typebox@^0.27.8":
+  version "0.27.8"
+  resolved "https://registry.yarnpkg.com/@sinclair/typebox/-/typebox-0.27.8.tgz#6667fac16c436b5434a387a34dedb013198f6e6e"
+  integrity sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==
+
 "@spyke/conventional-changelog-preset@^1.0.5":
   version "1.0.5"
   resolved "https://registry.yarnpkg.com/@spyke/conventional-changelog-preset/-/conventional-changelog-preset-1.0.5.tgz#5863160c21e249db0f6d69feb7d6d4aa806ecf42"
@@ -4407,7 +4614,7 @@
   resolved "https://registry.yarnpkg.com/@types/estree/-/estree-0.0.51.tgz#cfd70924a25a3fd32b218e5e420e6897e1ac4f40"
   integrity sha512-CuPgU6f3eT/XgKKPqKd/gLZV1Xmvf1a2R5POBOGQa6uv82xpls89HU5zKeVoyR8XzHd1RGNOlQlvUe3CFkjWNQ==
 
-"@types/estree@1.0.5":
+"@types/estree@1.0.5", "@types/estree@^1.0.0":
   version "1.0.5"
   resolved "https://registry.yarnpkg.com/@types/estree/-/estree-1.0.5.tgz#a6ce3e556e00fd9895dd872dd172ad0d4bd687f4"
   integrity sha512-/kYRxGDLWzHOB7q+wtSUQlFrtcdUccpfy+X+9iMBpHK8QLLhx2wIPYuS5DYtR9Wa/YlZAbIovy7qVdB1Aq6Lyw==
@@ -4900,6 +5107,15 @@
     "@vitest/utils" "0.31.1"
     chai "^4.3.7"
 
+"@vitest/expect@1.6.0":
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/@vitest/expect/-/expect-1.6.0.tgz#0b3ba0914f738508464983f4d811bc122b51fb30"
+  integrity sha512-ixEvFVQjycy/oNgHjqsL6AZCDduC+tflRluaHIzKIsdbzkLn2U/iBnVeJwB6HsIjQBdfMR8Z0tRxKUsvFJEeWQ==
+  dependencies:
+    "@vitest/spy" "1.6.0"
+    "@vitest/utils" "1.6.0"
+    chai "^4.3.10"
+
 "@vitest/runner@0.31.1":
   version "0.31.1"
   resolved "https://registry.yarnpkg.com/@vitest/runner/-/runner-0.31.1.tgz#fc06260d4824dde624abaeea1825d6a75bad4583"
@@ -4910,6 +5126,15 @@
     p-limit "^4.0.0"
     pathe "^1.1.0"
 
+"@vitest/runner@1.6.0":
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/@vitest/runner/-/runner-1.6.0.tgz#a6de49a96cb33b0e3ba0d9064a3e8d6ce2f08825"
+  integrity sha512-P4xgwPjwesuBiHisAVz/LSSZtDjOTPYZVmNAnpHHSR6ONrf8eCJOFRvUwdHn30F5M1fxhqtl7QZQUk2dprIXAg==
+  dependencies:
+    "@vitest/utils" "1.6.0"
+    p-limit "^5.0.0"
+    pathe "^1.1.1"
+
 "@vitest/snapshot@0.31.1":
   version "0.31.1"
   resolved "https://registry.yarnpkg.com/@vitest/snapshot/-/snapshot-0.31.1.tgz#7fc3f1e48f0c4313e6cb795c17a2c1aa909a7d64"
@@ -4919,6 +5144,15 @@
     pathe "^1.1.0"
     pretty-format "^27.5.1"
 
+"@vitest/snapshot@1.6.0":
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/@vitest/snapshot/-/snapshot-1.6.0.tgz#deb7e4498a5299c1198136f56e6e0f692e6af470"
+  integrity sha512-+Hx43f8Chus+DCmygqqfetcAZrDJwvTj0ymqjQq4CvmpKFSTVteEOBzCusu1x2tt4OJcvBflyHUE0DZSLgEMtQ==
+  dependencies:
+    magic-string "^0.30.5"
+    pathe "^1.1.1"
+    pretty-format "^29.7.0"
+
 "@vitest/spy@0.31.1":
   version "0.31.1"
   resolved "https://registry.yarnpkg.com/@vitest/spy/-/spy-0.31.1.tgz#1c3b6a3eec4ce81b8889e19c7fac6a603b600b14"
@@ -4926,6 +5160,13 @@
   dependencies:
     tinyspy "^2.1.0"
 
+"@vitest/spy@1.6.0":
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/@vitest/spy/-/spy-1.6.0.tgz#362cbd42ccdb03f1613798fde99799649516906d"
+  integrity sha512-leUTap6B/cqi/bQkXUu6bQV5TZPx7pmMBKBQiI0rJA8c3pB56ZsaTbREnF7CJfmvAS4V2cXIBAh/3rVwrrCYgw==
+  dependencies:
+    tinyspy "^2.2.0"
+
 "@vitest/ui@^0.31.1":
   version "0.31.1"
   resolved "https://registry.yarnpkg.com/@vitest/ui/-/ui-0.31.1.tgz#5c4245aa94f5d16f5c8831dd66ee8eedb79414cc"
@@ -4948,6 +5189,23 @@
     loupe "^2.3.6"
     pretty-format "^27.5.1"
 
+"@vitest/utils@1.6.0":
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/@vitest/utils/-/utils-1.6.0.tgz#5c5675ca7d6f546a7b4337de9ae882e6c57896a1"
+  integrity sha512-21cPiuGMoMZwiOHa2i4LXkMkMkCGzA+MVFV70jRwHo95dL4x/ts5GZhML1QWuy7yfp3WzK3lRvZi3JnXTYqrBw==
+  dependencies:
+    diff-sequences "^29.6.3"
+    estree-walker "^3.0.3"
+    loupe "^2.3.7"
+    pretty-format "^29.7.0"
+
+"@vitest/web-worker@^1.5.0":
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/@vitest/web-worker/-/web-worker-1.6.0.tgz#7c5ce3f0ca92e10bbc61eefa73de0a0679ecd049"
+  integrity sha512-VVKzjk6PVKfaXfhRwTxXaQ0NCp2BoUPhiR2OYd3InZb60jbZVmKquvngFXgvgOf1aDT8ztloMi8yu3wj9eRcuQ==
+  dependencies:
+    debug "^4.3.4"
+
 "@vscode/vsce@^2":
   version "2.17.0"
   resolved "https://registry.yarnpkg.com/@vscode/vsce/-/vsce-2.17.0.tgz#64093e1e083673081ea8bd7e69745ff2f632003e"
@@ -5449,6 +5707,11 @@ acorn-walk@^8.2.0:
   resolved "https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-8.2.0.tgz#741210f2e2426454508853a2f44d0ab83b7f69c1"
   integrity sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==
 
+acorn-walk@^8.3.2:
+  version "8.3.2"
+  resolved "https://registry.yarnpkg.com/acorn-walk/-/acorn-walk-8.3.2.tgz#7703af9415f1b6db9315d6895503862e231d34aa"
+  integrity sha512-cjkyv4OtNCIeqhHrfS81QWXoCBPExR/J62oyEqepVw8WaQeSqpW2uhuLPh1m9eWhDuOo/jUXVTlifvesOWp/4A==
+
 acorn@^6.4.1:
   version "6.4.2"
   resolved "https://registry.yarnpkg.com/acorn/-/acorn-6.4.2.tgz#35866fd710528e92de10cf06016498e47e39e1e6"
@@ -5459,6 +5722,11 @@ acorn@^7.4.1:
   resolved "https://registry.yarnpkg.com/acorn/-/acorn-7.4.1.tgz#feaed255973d2e77555b83dbc08851a6c63520fa"
   integrity sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==
 
+acorn@^8.11.3:
+  version "8.11.3"
+  resolved "https://registry.yarnpkg.com/acorn/-/acorn-8.11.3.tgz#71e0b14e13a4ec160724b38fb7b0f233b1b81d7a"
+  integrity sha512-Y9rRfJG5jcKOE0CLisYbojUjIrIEE7AGMzA/Sm4BslANhbS+cDMpgBdcPT91oJ7OuJ9hYJBx59RjbhxVnrF8Xg==
+
 acorn@^8.4.1, acorn@^8.6.0, acorn@^8.8.0, acorn@^8.8.2:
   version "8.8.2"
   resolved "https://registry.yarnpkg.com/acorn/-/acorn-8.8.2.tgz#1b2f25db02af965399b9776b0c2c391276d37c4a"
@@ -6747,6 +7015,19 @@ ccount@^1.0.0:
   resolved "https://registry.yarnpkg.com/ccount/-/ccount-1.1.0.tgz#246687debb6014735131be8abab2d93898f8d043"
   integrity sha512-vlNK021QdI7PNeiUh/lKkC/mNHHfV0m/Ad5JoI0TYtlBnJAslM/JIkm/tGC88bkLIwO6OQ5uV6ztS6kVAtCDlg==
 
+chai@^4.3.10:
+  version "4.4.1"
+  resolved "https://registry.yarnpkg.com/chai/-/chai-4.4.1.tgz#3603fa6eba35425b0f2ac91a009fe924106e50d1"
+  integrity sha512-13sOfMv2+DWduEU+/xbun3LScLoqN17nBeTLUsmDfKdoiC1fr0n9PU4guu4AhRcOVFk/sW8LyZWHuhWtQZiF+g==
+  dependencies:
+    assertion-error "^1.1.0"
+    check-error "^1.0.3"
+    deep-eql "^4.1.3"
+    get-func-name "^2.0.2"
+    loupe "^2.3.6"
+    pathval "^1.1.1"
+    type-detect "^4.0.8"
+
 chai@^4.3.7:
   version "4.3.7"
   resolved "https://registry.yarnpkg.com/chai/-/chai-4.3.7.tgz#ec63f6df01829088e8bf55fca839bcd464a8ec51"
@@ -6810,6 +7091,13 @@ check-error@^1.0.2:
   resolved "https://registry.yarnpkg.com/check-error/-/check-error-1.0.2.tgz#574d312edd88bb5dd8912e9286dd6c0aed4aac82"
   integrity sha512-BrgHpW9NURQgzoNyjfq0Wu6VFO6D7IZEmJNdtgNqpzGG8RuNFHt2jQxWlAs4HMe119chBnv+34syEZtc6IhLtA==
 
+check-error@^1.0.3:
+  version "1.0.3"
+  resolved "https://registry.yarnpkg.com/check-error/-/check-error-1.0.3.tgz#a6502e4312a7ee969f646e83bb3ddd56281bd694"
+  integrity sha512-iKEoDYaRmd1mxM90a2OEfWhjsjPpYPuQ+lMYsoxB126+t8fw7ySEO48nmDg5COTjxDI65/Y2OWpeEHk3ZOe8zg==
+  dependencies:
+    get-func-name "^2.0.2"
+
 cheerio-select@^1.5.0:
   version "1.6.0"
   resolved "https://registry.yarnpkg.com/cheerio-select/-/cheerio-select-1.6.0.tgz#489f36604112c722afa147dedd0d4609c09e1696"
@@ -7243,6 +7531,11 @@ concordance@^5.0.4:
     semver "^7.3.2"
     well-known-symbols "^2.0.0"
 
+confbox@^0.1.7:
+  version "0.1.7"
+  resolved "https://registry.yarnpkg.com/confbox/-/confbox-0.1.7.tgz#ccfc0a2bcae36a84838e83a3b7f770fb17d6c579"
+  integrity sha512-uJcB/FKZtBMCJpK8MQji6bJHgu1tixKPxRLeGkNzBoOZzpnZUJm0jm2/sBDWcuBx1dYgxV4JU+g5hmNxCyAmdA==
+
 config-chain@^1.1.11:
   version "1.1.13"
   resolved "https://registry.yarnpkg.com/config-chain/-/config-chain-1.1.13.tgz#fad0795aa6a6cdaff9ed1b68e9dff94372c232f4"
@@ -7817,7 +8110,7 @@ dedent@^0.7.0:
   resolved "https://registry.yarnpkg.com/dedent/-/dedent-0.7.0.tgz#2495ddbaf6eb874abb0e1be9df22d2e5a544326c"
   integrity sha1-JJXduvbrh0q7Dhvp3yLS5aVEMmw=
 
-deep-eql@^4.1.2:
+deep-eql@^4.1.2, deep-eql@^4.1.3:
   version "4.1.3"
   resolved "https://registry.yarnpkg.com/deep-eql/-/deep-eql-4.1.3.tgz#7c7775513092f7df98d8df9996dd085eb668cc6d"
   integrity sha512-WaEtAOpRA1MQ0eohqZjpGD8zdI0Ovsm8mmFhaDN8dvDZzyoUMcYDnf5Y6iu7HTXxf8JDS23qWa4a+hKCDyOPzw==
@@ -7980,6 +8273,11 @@ didyoumean@^1.2.2:
   resolved "https://registry.yarnpkg.com/didyoumean/-/didyoumean-1.2.2.tgz#989346ffe9e839b4555ecf5666edea0d3e8ad037"
   integrity sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==
 
+diff-sequences@^29.6.3:
+  version "29.6.3"
+  resolved "https://registry.yarnpkg.com/diff-sequences/-/diff-sequences-29.6.3.tgz#4deaf894d11407c51efc8418012f9e70b84ea921"
+  integrity sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==
+
 diffie-hellman@^5.0.0:
   version "5.0.3"
   resolved "https://registry.yarnpkg.com/diffie-hellman/-/diffie-hellman-5.0.3.tgz#40e8ee98f55a2149607146921c63e1ae5f3d2875"
@@ -8536,6 +8834,35 @@ esbuild@^0.19.3:
     "@esbuild/win32-ia32" "0.19.11"
     "@esbuild/win32-x64" "0.19.11"
 
+esbuild@^0.20.1:
+  version "0.20.2"
+  resolved "https://registry.yarnpkg.com/esbuild/-/esbuild-0.20.2.tgz#9d6b2386561766ee6b5a55196c6d766d28c87ea1"
+  integrity sha512-WdOOppmUNU+IbZ0PaDiTst80zjnrOkyJNHoKupIcVyU8Lvla3Ugx94VzkQ32Ijqd7UhHJy75gNWDMUekcrSJ6g==
+  optionalDependencies:
+    "@esbuild/aix-ppc64" "0.20.2"
+    "@esbuild/android-arm" "0.20.2"
+    "@esbuild/android-arm64" "0.20.2"
+    "@esbuild/android-x64" "0.20.2"
+    "@esbuild/darwin-arm64" "0.20.2"
+    "@esbuild/darwin-x64" "0.20.2"
+    "@esbuild/freebsd-arm64" "0.20.2"
+    "@esbuild/freebsd-x64" "0.20.2"
+    "@esbuild/linux-arm" "0.20.2"
+    "@esbuild/linux-arm64" "0.20.2"
+    "@esbuild/linux-ia32" "0.20.2"
+    "@esbuild/linux-loong64" "0.20.2"
+    "@esbuild/linux-mips64el" "0.20.2"
+    "@esbuild/linux-ppc64" "0.20.2"
+    "@esbuild/linux-riscv64" "0.20.2"
+    "@esbuild/linux-s390x" "0.20.2"
+    "@esbuild/linux-x64" "0.20.2"
+    "@esbuild/netbsd-x64" "0.20.2"
+    "@esbuild/openbsd-x64" "0.20.2"
+    "@esbuild/sunos-x64" "0.20.2"
+    "@esbuild/win32-arm64" "0.20.2"
+    "@esbuild/win32-ia32" "0.20.2"
+    "@esbuild/win32-x64" "0.20.2"
+
 escalade@^3.1.1:
   version "3.1.1"
   resolved "https://registry.yarnpkg.com/escalade/-/escalade-3.1.1.tgz#d8cfdc7000965c5a0174b4a82eaa5c0552742e40"
@@ -8861,6 +9188,13 @@ estree-walker@^2.0.2:
   resolved "https://registry.yarnpkg.com/estree-walker/-/estree-walker-2.0.2.tgz#52f010178c2a4c117a7757cfe942adb7d2da4cac"
   integrity sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==
 
+estree-walker@^3.0.3:
+  version "3.0.3"
+  resolved "https://registry.yarnpkg.com/estree-walker/-/estree-walker-3.0.3.tgz#67c3e549ec402a487b4fc193d1953a524752340d"
+  integrity sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==
+  dependencies:
+    "@types/estree" "^1.0.0"
+
 esutils@^2.0.2, esutils@^2.0.3:
   version "2.0.3"
   resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.3.tgz#74d2eb4de0b8da1293711910d50775b9b710ef64"
@@ -8937,6 +9271,21 @@ execa@^5.1.1:
     signal-exit "^3.0.3"
     strip-final-newline "^2.0.0"
 
+execa@^8.0.1:
+  version "8.0.1"
+  resolved "https://registry.yarnpkg.com/execa/-/execa-8.0.1.tgz#51f6a5943b580f963c3ca9c6321796db8cc39b8c"
+  integrity sha512-VyhnebXciFV2DESc+p6B+y0LjSm0krU4OgJN44qFAhBY0TJ+1V61tYD2+wHusZ6F9n5K+vl8k0sTy7PEfV4qpg==
+  dependencies:
+    cross-spawn "^7.0.3"
+    get-stream "^8.0.1"
+    human-signals "^5.0.0"
+    is-stream "^3.0.0"
+    merge-stream "^2.0.0"
+    npm-run-path "^5.1.0"
+    onetime "^6.0.0"
+    signal-exit "^4.1.0"
+    strip-final-newline "^3.0.0"
+
 expand-brackets@^2.1.4:
   version "2.1.4"
   resolved "https://registry.yarnpkg.com/expand-brackets/-/expand-brackets-2.1.4.tgz#b77735e315ce30f6b6eff0f83b04151a22449622"
@@ -9653,7 +10002,7 @@ get-caller-file@^2.0.1, get-caller-file@^2.0.5:
   resolved "https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-2.0.5.tgz#4f94412a82db32f36e3b0b9741f8a97feb031f7e"
   integrity sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==
 
-get-func-name@^2.0.0:
+get-func-name@^2.0.0, get-func-name@^2.0.1, get-func-name@^2.0.2:
   version "2.0.2"
   resolved "https://registry.yarnpkg.com/get-func-name/-/get-func-name-2.0.2.tgz#0d7cf20cd13fda808669ffa88f4ffc7a3943fc41"
   integrity sha512-8vXOvuE167CtIc3OyItco7N/dpRtBbYOsPsXCz7X/PMnlGjYjSGuZJgM1Y7mmew7BKf9BqvLX2tnOVy1BBUsxQ==
@@ -9722,6 +10071,11 @@ get-stream@^6.0.0:
   resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-6.0.1.tgz#a262d8eef67aced57c2852ad6167526a43cbf7b7"
   integrity sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==
 
+get-stream@^8.0.1:
+  version "8.0.1"
+  resolved "https://registry.yarnpkg.com/get-stream/-/get-stream-8.0.1.tgz#def9dfd71742cd7754a7761ed43749a27d02eca2"
+  integrity sha512-VaUJspBffn/LMCJVoMvSAdmscJyS1auj5Zulnn5UoYcY531UWmdwhRWkcGKnGU93m5HSXP9LP2usOryrBtQowA==
+
 get-symbol-description@^1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/get-symbol-description/-/get-symbol-description-1.0.0.tgz#7fdb81c900101fbd564dd5f1a30af5aadc1e58d6"
@@ -10405,6 +10759,11 @@ human-signals@^2.1.0:
   resolved "https://registry.yarnpkg.com/human-signals/-/human-signals-2.1.0.tgz#dc91fcba42e4d06e4abaed33b3e7a3c02f514ea0"
   integrity sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==
 
+human-signals@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/human-signals/-/human-signals-5.0.0.tgz#42665a284f9ae0dade3ba41ebc37eb4b852f3a28"
+  integrity sha512-AXcZb6vzzrFAUE61HnN4mpLqd/cSIwNQjtNWR0euPm6y0iqx3G4gOXaIDdtdDwZmhwe82LA6+zinmW4UBWVePQ==
+
 humanize-ms@^1.2.1:
   version "1.2.1"
   resolved "https://registry.yarnpkg.com/humanize-ms/-/humanize-ms-1.2.1.tgz#c46e3159a293f6b896da29316d8b6fe8bb79bbed"
@@ -11036,6 +11395,11 @@ is-stream@^2.0.0:
   resolved "https://registry.yarnpkg.com/is-stream/-/is-stream-2.0.1.tgz#fac1e3d53b97ad5a9d0ae9cef2389f5810a5c077"
   integrity sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==
 
+is-stream@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/is-stream/-/is-stream-3.0.0.tgz#e6bfd7aa6bef69f4f472ce9bb681e3e57b4319ac"
+  integrity sha512-LnQR4bZ9IADDRSkvpqMGvt/tEJWclzklNgSw48V5EAaAeDd6qGvN8ei6k5p0tvxSR171VmGyHuTiAOfxAbr8kA==
+
 is-string@^1.0.5, is-string@^1.0.7:
   version "1.0.7"
   resolved "https://registry.yarnpkg.com/is-string/-/is-string-1.0.7.tgz#0dd12bf2006f255bb58f695110eff7491eebc0fd"
@@ -11296,6 +11660,11 @@ js-string-escape@^1.0.1:
   resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-4.0.0.tgz#19203fb59991df98e3a287050d4647cdeaf32499"
   integrity sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==
 
+js-tokens@^9.0.0:
+  version "9.0.0"
+  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-9.0.0.tgz#0f893996d6f3ed46df7f0a3b12a03f5fd84223c1"
+  integrity sha512-WriZw1luRMlmV3LGJaR6QOJjWwgLUTf89OwT2lUOyjX2dJGBwgmIkbcz+7WFZjrZM635JOIR517++e/67CP9dQ==
+
 js-yaml@4.1.0, js-yaml@^4.1.0:
   version "4.1.0"
   resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-4.1.0.tgz#c1fb65f8f5017901cdd2c951864ba18458a10602"
@@ -11785,6 +12154,14 @@ local-pkg@^0.4.3:
   resolved "https://registry.yarnpkg.com/local-pkg/-/local-pkg-0.4.3.tgz#0ff361ab3ae7f1c19113d9bb97b98b905dbc4963"
   integrity sha512-SFppqq5p42fe2qcZQqqEOiVRXl+WCP1MdT6k7BDEW1j++sp5fIY+/fdRQitvKgB5BrBcmrs5m/L0v2FrU5MY1g==
 
+local-pkg@^0.5.0:
+  version "0.5.0"
+  resolved "https://registry.yarnpkg.com/local-pkg/-/local-pkg-0.5.0.tgz#093d25a346bae59a99f80e75f6e9d36d7e8c925c"
+  integrity sha512-ok6z3qlYyCDS4ZEU27HaU6x/xZa9Whf8jD4ptH5UZTQYZVYeb9bnZ3ojVhiJNLiXK1Hfc0GNbLXcmZ5plLDDBg==
+  dependencies:
+    mlly "^1.4.2"
+    pkg-types "^1.0.3"
+
 localforage@^1.10.0:
   version "1.10.0"
   resolved "https://registry.yarnpkg.com/localforage/-/localforage-1.10.0.tgz#5c465dc5f62b2807c3a84c0c6a1b1b3212781dd4"
@@ -11924,6 +12301,13 @@ loupe@^2.3.1, loupe@^2.3.6:
   dependencies:
     get-func-name "^2.0.0"
 
+loupe@^2.3.7:
+  version "2.3.7"
+  resolved "https://registry.yarnpkg.com/loupe/-/loupe-2.3.7.tgz#6e69b7d4db7d3ab436328013d37d1c8c3540c697"
+  integrity sha512-zSMINGVYkdpYSOBmLi0D1Uo7JU9nVdQKrHxC8eYlV+9YKK9WePqAlL7lSlorG/U2Fw1w0hTBmaa/jrQ3UbPHtA==
+  dependencies:
+    get-func-name "^2.0.1"
+
 lower-case@^2.0.2:
   version "2.0.2"
   resolved "https://registry.yarnpkg.com/lower-case/-/lower-case-2.0.2.tgz#6fa237c63dbdc4a82ca0fd882e4722dc5e634e28"
@@ -12449,6 +12833,11 @@ mimic-fn@^2.1.0:
   resolved "https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-2.1.0.tgz#7ed2c2ccccaf84d3ffcb7a69b57711fc2083401b"
   integrity sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==
 
+mimic-fn@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/mimic-fn/-/mimic-fn-4.0.0.tgz#60a90550d5cb0b239cca65d893b1a53b29871ecc"
+  integrity sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==
+
 mimic-response@^2.0.0:
   version "2.1.0"
   resolved "https://registry.yarnpkg.com/mimic-response/-/mimic-response-2.1.0.tgz#d13763d35f613d09ec37ebb30bac0469c0ee8f43"
@@ -12679,6 +13068,16 @@ mlly@^1.2.0:
     pkg-types "^1.0.3"
     ufo "^1.1.2"
 
+mlly@^1.4.2, mlly@^1.7.0:
+  version "1.7.0"
+  resolved "https://registry.yarnpkg.com/mlly/-/mlly-1.7.0.tgz#587383ae40dda23cadb11c3c3cc972b277724271"
+  integrity sha512-U9SDaXGEREBYQgfejV97coK0UL1r+qnF2SyO9A3qcI8MzKnsIFKHNVEkrDyNncQTKQQumsasmeq84eNMdBfsNQ==
+  dependencies:
+    acorn "^8.11.3"
+    pathe "^1.1.2"
+    pkg-types "^1.1.0"
+    ufo "^1.5.3"
+
 mnemonist@^0.39.0:
   version "0.39.0"
   resolved "https://registry.yarnpkg.com/mnemonist/-/mnemonist-0.39.0.tgz#4c83dd22e8d9d05dfb721ff66a905fec4c460041"
@@ -13118,6 +13517,13 @@ npm-run-path@^4.0.0, npm-run-path@^4.0.1:
   dependencies:
     path-key "^3.0.0"
 
+npm-run-path@^5.1.0:
+  version "5.3.0"
+  resolved "https://registry.yarnpkg.com/npm-run-path/-/npm-run-path-5.3.0.tgz#e23353d0ebb9317f174e93417e4a4d82d0249e9f"
+  integrity sha512-ppwTtiJZq0O/ai0z7yfudtBpWIoxM8yE6nHi1X47eFR2EWORqfbu6CnPlNsjeN683eT0qG6H/Pyf9fCcvjnnnQ==
+  dependencies:
+    path-key "^4.0.0"
+
 npmlog@^4.1.2:
   version "4.1.2"
   resolved "https://registry.yarnpkg.com/npmlog/-/npmlog-4.1.2.tgz#08a7f2a8bf734604779a9efa4ad5cc717abb954b"
@@ -13377,6 +13783,13 @@ onetime@^5.1.0, onetime@^5.1.2:
   dependencies:
     mimic-fn "^2.1.0"
 
+onetime@^6.0.0:
+  version "6.0.0"
+  resolved "https://registry.yarnpkg.com/onetime/-/onetime-6.0.0.tgz#7c24c18ed1fd2e9bca4bd26806a33613c77d34b4"
+  integrity sha512-1FlR+gjXK7X+AsAHso35MnyN5KqGwJRi/31ft6x0M194ht7S+rWAvd7PHss9xSKMzE0asv1pyIHaJYq+BbacAQ==
+  dependencies:
+    mimic-fn "^4.0.0"
+
 open@^7.0.3:
   version "7.4.2"
   resolved "https://registry.yarnpkg.com/open/-/open-7.4.2.tgz#b8147e26dcf3e426316c730089fd71edd29c2321"
@@ -13515,6 +13928,13 @@ p-limit@^4.0.0:
   dependencies:
     yocto-queue "^1.0.0"
 
+p-limit@^5.0.0:
+  version "5.0.0"
+  resolved "https://registry.yarnpkg.com/p-limit/-/p-limit-5.0.0.tgz#6946d5b7140b649b7a33a027d89b4c625b3a5985"
+  integrity sha512-/Eaoq+QyLSiXQ4lyYV23f14mZRQcXnxfHrN0vCai+ak9G0pp9iEQukIIZq5NccEvwRB8PUnZT0KsOoDCINS1qQ==
+  dependencies:
+    yocto-queue "^1.0.0"
+
 p-locate@^2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/p-locate/-/p-locate-2.0.0.tgz#20a0103b222a70c8fd39cc2e580680f3dde5ec43"
@@ -13813,6 +14233,11 @@ path-key@^3.0.0, path-key@^3.1.0:
   resolved "https://registry.yarnpkg.com/path-key/-/path-key-3.1.1.tgz#581f6ade658cbba65a0d3380de7753295054f375"
   integrity sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==
 
+path-key@^4.0.0:
+  version "4.0.0"
+  resolved "https://registry.yarnpkg.com/path-key/-/path-key-4.0.0.tgz#295588dc3aee64154f877adb9d780b81c554bf18"
+  integrity sha512-haREypq7xkM7ErfgIyA0z+Bj4AGKlMSdlQE2jvJo6huWD1EdkKYV+G/T4nq0YEF2vgTT8kqMFKo1uHn950r4SQ==
+
 path-parse@^1.0.7:
   version "1.0.7"
   resolved "https://registry.yarnpkg.com/path-parse/-/path-parse-1.0.7.tgz#fbc114b60ca42b30d9daf5858e4bd68bbedb6735"
@@ -13849,6 +14274,11 @@ pathe@^1.1.0:
   resolved "https://registry.yarnpkg.com/pathe/-/pathe-1.1.0.tgz#e2e13f6c62b31a3289af4ba19886c230f295ec03"
   integrity sha512-ODbEPR0KKHqECXW1GoxdDb+AZvULmXjVPy4rt+pGo2+TnjJTIPJQSVS6N63n8T2Ip+syHhbn52OewKicV0373w==
 
+pathe@^1.1.1, pathe@^1.1.2:
+  version "1.1.2"
+  resolved "https://registry.yarnpkg.com/pathe/-/pathe-1.1.2.tgz#6c4cb47a945692e48a1ddd6e4094d170516437ec"
+  integrity sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==
+
 pathval@^1.1.1:
   version "1.1.1"
   resolved "https://registry.yarnpkg.com/pathval/-/pathval-1.1.1.tgz#8534e77a77ce7ac5a2512ea21e0fdb8fcf6c3d8d"
@@ -13952,6 +14382,15 @@ pkg-types@^1.0.3:
     mlly "^1.2.0"
     pathe "^1.1.0"
 
+pkg-types@^1.1.0:
+  version "1.1.1"
+  resolved "https://registry.yarnpkg.com/pkg-types/-/pkg-types-1.1.1.tgz#07b626880749beb607b0c817af63aac1845a73f2"
+  integrity sha512-ko14TjmDuQJ14zsotODv7dBlwxKhUKQEhuhmbqo1uCi9BB0Z2alo/wAXg6q1dTR5TyuqYyWhjtfe/Tsh+X28jQ==
+  dependencies:
+    confbox "^0.1.7"
+    mlly "^1.7.0"
+    pathe "^1.1.2"
+
 pnp-webpack-plugin@1.6.4:
   version "1.6.4"
   resolved "https://registry.yarnpkg.com/pnp-webpack-plugin/-/pnp-webpack-plugin-1.6.4.tgz#c9711ac4dc48a685dabafc86f8b6dd9f8df84149"
@@ -14109,6 +14548,15 @@ postcss@^8.4.23, postcss@^8.4.27, postcss@^8.4.32, postcss@^8.4.33:
     picocolors "^1.0.0"
     source-map-js "^1.0.2"
 
+postcss@^8.4.38:
+  version "8.4.38"
+  resolved "https://registry.yarnpkg.com/postcss/-/postcss-8.4.38.tgz#b387d533baf2054288e337066d81c6bee9db9e0e"
+  integrity sha512-Wglpdk03BSfXkHoQa3b/oulrotAkwrlLDRSOb9D0bN86FdRyE9lppSp33aHNPgBa0JKCoB+drFLZkQoRRYae5A==
+  dependencies:
+    nanoid "^3.3.7"
+    picocolors "^1.0.0"
+    source-map-js "^1.2.0"
+
 preact@^10.0.0:
   version "10.11.3"
   resolved "https://registry.yarnpkg.com/preact/-/preact-10.11.3.tgz#8a7e4ba19d3992c488b0785afcc0f8aa13c78d19"
@@ -14174,6 +14622,15 @@ pretty-format@^27.0.2, pretty-format@^27.5.1:
     ansi-styles "^5.0.0"
     react-is "^17.0.1"
 
+pretty-format@^29.7.0:
+  version "29.7.0"
+  resolved "https://registry.yarnpkg.com/pretty-format/-/pretty-format-29.7.0.tgz#ca42c758310f365bfa71a0bda0a807160b776812"
+  integrity sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==
+  dependencies:
+    "@jest/schemas" "^29.6.3"
+    ansi-styles "^5.0.0"
+    react-is "^18.0.0"
+
 pretty-hrtime@^1.0.3:
   version "1.0.3"
   resolved "https://registry.yarnpkg.com/pretty-hrtime/-/pretty-hrtime-1.0.3.tgz#b7e3ea42435a4c9b2759d99e0f201eb195802ee1"
@@ -14632,6 +15089,11 @@ react-is@^16.13.1, react-is@^16.7.0:
   resolved "https://registry.yarnpkg.com/react-is/-/react-is-16.13.1.tgz#789729a4dc36de2999dc156dd6c1d9c18cea56a4"
   integrity sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==
 
+react-is@^18.0.0:
+  version "18.3.1"
+  resolved "https://registry.yarnpkg.com/react-is/-/react-is-18.3.1.tgz#e83557dc12eae63a99e003a46388b1dcbb44db7e"
+  integrity sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==
+
 react-latex-next@^2.2.0:
   version "2.2.0"
   resolved "https://registry.yarnpkg.com/react-latex-next/-/react-latex-next-2.2.0.tgz#8f4839adfebe3ba70c05ef66f2b94112e564a4fa"
@@ -15249,6 +15711,31 @@ rollup@^3.27.1:
   optionalDependencies:
     fsevents "~2.3.2"
 
+rollup@^4.13.0:
+  version "4.18.0"
+  resolved "https://registry.yarnpkg.com/rollup/-/rollup-4.18.0.tgz#497f60f0c5308e4602cf41136339fbf87d5f5dda"
+  integrity sha512-QmJz14PX3rzbJCN1SG4Xe/bAAX2a6NpCP8ab2vfu2GiUr8AQcr2nCV/oEO3yneFarB67zk8ShlIyWb2LGTb3Sg==
+  dependencies:
+    "@types/estree" "1.0.5"
+  optionalDependencies:
+    "@rollup/rollup-android-arm-eabi" "4.18.0"
+    "@rollup/rollup-android-arm64" "4.18.0"
+    "@rollup/rollup-darwin-arm64" "4.18.0"
+    "@rollup/rollup-darwin-x64" "4.18.0"
+    "@rollup/rollup-linux-arm-gnueabihf" "4.18.0"
+    "@rollup/rollup-linux-arm-musleabihf" "4.18.0"
+    "@rollup/rollup-linux-arm64-gnu" "4.18.0"
+    "@rollup/rollup-linux-arm64-musl" "4.18.0"
+    "@rollup/rollup-linux-powerpc64le-gnu" "4.18.0"
+    "@rollup/rollup-linux-riscv64-gnu" "4.18.0"
+    "@rollup/rollup-linux-s390x-gnu" "4.18.0"
+    "@rollup/rollup-linux-x64-gnu" "4.18.0"
+    "@rollup/rollup-linux-x64-musl" "4.18.0"
+    "@rollup/rollup-win32-arm64-msvc" "4.18.0"
+    "@rollup/rollup-win32-ia32-msvc" "4.18.0"
+    "@rollup/rollup-win32-x64-msvc" "4.18.0"
+    fsevents "~2.3.2"
+
 rollup@^4.2.0:
   version "4.9.5"
   resolved "https://registry.yarnpkg.com/rollup/-/rollup-4.9.5.tgz#62999462c90f4c8b5d7c38fc7161e63b29101b05"
@@ -15688,6 +16175,11 @@ signal-exit@^3.0.0, signal-exit@^3.0.2, signal-exit@^3.0.3:
   resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-3.0.6.tgz#24e630c4b0f03fea446a2bd299e62b4a6ca8d0af"
   integrity sha512-sDl4qMFpijcGw22U5w63KmD3cZJfBuFlVNbVMKje2keoKML7X2UzWbc4XrmEbDwg0NXJc3yv4/ox7b+JWb57kQ==
 
+signal-exit@^4.1.0:
+  version "4.1.0"
+  resolved "https://registry.yarnpkg.com/signal-exit/-/signal-exit-4.1.0.tgz#952188c1cbd546070e2dd20d0f41c0ae0530cb04"
+  integrity sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==
+
 simple-concat@^1.0.0:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/simple-concat/-/simple-concat-1.0.1.tgz#f46976082ba35c2263f1c8ab5edfe26c41c9552f"
@@ -15830,6 +16322,11 @@ source-map-js@^1.0.1, source-map-js@^1.0.2:
   resolved "https://registry.yarnpkg.com/source-map-js/-/source-map-js-1.0.2.tgz#adbc361d9c62df380125e7f161f71c826f1e490c"
   integrity sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==
 
+source-map-js@^1.2.0:
+  version "1.2.0"
+  resolved "https://registry.yarnpkg.com/source-map-js/-/source-map-js-1.2.0.tgz#16b809c162517b5b8c3e7dcd315a2a5c2612b2af"
+  integrity sha512-itJW8lvSA0TXEphiRoawsCksnlf8SyvmFzIhltqAHluXd88pkCd+cXJVHTDwdCr0IzwptSm035IHQktUu1QUMg==
+
 source-map-resolve@^0.5.0:
   version "0.5.3"
   resolved "https://registry.yarnpkg.com/source-map-resolve/-/source-map-resolve-0.5.3.tgz#190866bece7553e1f8f267a2ee82c606b5509a1a"
@@ -16024,6 +16521,11 @@ std-env@^3.3.2:
   resolved "https://registry.yarnpkg.com/std-env/-/std-env-3.3.3.tgz#a54f06eb245fdcfef53d56f3c0251f1d5c3d01fe"
   integrity sha512-Rz6yejtVyWnVjC1RFvNmYL10kgjC49EOghxWn0RFqlCHGFpQx+Xe7yW3I4ceK1SGrWIGMjD5Kbue8W/udkbMJg==
 
+std-env@^3.5.0:
+  version "3.7.0"
+  resolved "https://registry.yarnpkg.com/std-env/-/std-env-3.7.0.tgz#c9f7386ced6ecf13360b6c6c55b8aaa4ef7481d2"
+  integrity sha512-JPbdCEQLj1w5GilpiHAx3qJvFndqybBysA3qUOnznweH4QbNYUsW/ea8QzSrnh0vNsezMMw5bcVool8lM0gwzg==
+
 store2@^2.12.0:
   version "2.13.1"
   resolved "https://registry.yarnpkg.com/store2/-/store2-2.13.1.tgz#fae7b5bb9d35fc53dc61cd262df3abb2f6e59022"
@@ -16245,6 +16747,11 @@ strip-final-newline@^2.0.0:
   resolved "https://registry.yarnpkg.com/strip-final-newline/-/strip-final-newline-2.0.0.tgz#89b852fb2fcbe936f6f4b3187afb0a12c1ab58ad"
   integrity sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==
 
+strip-final-newline@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/strip-final-newline/-/strip-final-newline-3.0.0.tgz#52894c313fbff318835280aed60ff71ebf12b8fd"
+  integrity sha512-dOESqjYr96iWYylGObzd39EuNTa5VJxyvVAEm5Jnh7KGo75V43Hk1odPQkNDyXNmUR6k+gEiDVXnjB8HJ3crXw==
+
 strip-indent@^1.0.1:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/strip-indent/-/strip-indent-1.0.1.tgz#0c7962a6adefa7bbd4ac366460a638552ae1a0a2"
@@ -16281,6 +16788,13 @@ strip-literal@^1.0.1:
   dependencies:
     acorn "^8.8.2"
 
+strip-literal@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/strip-literal/-/strip-literal-2.1.0.tgz#6d82ade5e2e74f5c7e8739b6c84692bd65f0bd2a"
+  integrity sha512-Op+UycaUt/8FbN/Z2TWPBLge3jWrP3xj10f3fnYxf052bKuS3EKs1ZQcVGjnEMdsNVAM+plXRdmjrZ/KgG3Skw==
+  dependencies:
+    js-tokens "^9.0.0"
+
 strong-log-transformer@^2.0.0, strong-log-transformer@^2.1.0:
   version "2.1.0"
   resolved "https://registry.yarnpkg.com/strong-log-transformer/-/strong-log-transformer-2.1.0.tgz#0f5ed78d325e0421ac6f90f7f10e691d6ae3ae10"
@@ -16674,16 +17188,31 @@ tinybench@^2.5.0:
   resolved "https://registry.yarnpkg.com/tinybench/-/tinybench-2.5.0.tgz#4711c99bbf6f3e986f67eb722fed9cddb3a68ba5"
   integrity sha512-kRwSG8Zx4tjF9ZiyH4bhaebu+EDz1BOx9hOigYHlUW4xxI/wKIUQUqo018UlU4ar6ATPBsaMrdbKZ+tmPdohFA==
 
+tinybench@^2.5.1:
+  version "2.8.0"
+  resolved "https://registry.yarnpkg.com/tinybench/-/tinybench-2.8.0.tgz#30e19ae3a27508ee18273ffed9ac7018949acd7b"
+  integrity sha512-1/eK7zUnIklz4JUUlL+658n58XO2hHLQfSk1Zf2LKieUjxidN16eKFEoDEfjHc3ohofSSqK3X5yO6VGb6iW8Lw==
+
 tinypool@^0.5.0:
   version "0.5.0"
   resolved "https://registry.yarnpkg.com/tinypool/-/tinypool-0.5.0.tgz#3861c3069bf71e4f1f5aa2d2e6b3aaacc278961e"
   integrity sha512-paHQtnrlS1QZYKF/GnLoOM/DN9fqaGOFbCbxzAhwniySnzl9Ebk8w73/dd34DAhe/obUbPAOldTyYXQZxnPBPQ==
 
+tinypool@^0.8.3:
+  version "0.8.4"
+  resolved "https://registry.yarnpkg.com/tinypool/-/tinypool-0.8.4.tgz#e217fe1270d941b39e98c625dcecebb1408c9aa8"
+  integrity sha512-i11VH5gS6IFeLY3gMBQ00/MmLncVP7JLXOw1vlgkytLmJK7QnEr7NXf0LBdxfmNPAeyetukOk0bOYrJrFGjYJQ==
+
 tinyspy@^2.1.0:
   version "2.1.0"
   resolved "https://registry.yarnpkg.com/tinyspy/-/tinyspy-2.1.0.tgz#bd6875098f988728e6456cfd5ab8cc06498ecdeb"
   integrity sha512-7eORpyqImoOvkQJCSkL0d0mB4NHHIFAy4b1u8PHdDa7SjGS2njzl6/lyGoZLm+eyYEtlUmFGE0rFj66SWxZgQQ==
 
+tinyspy@^2.2.0:
+  version "2.2.1"
+  resolved "https://registry.yarnpkg.com/tinyspy/-/tinyspy-2.2.1.tgz#117b2342f1f38a0dbdcc73a50a454883adf861d1"
+  integrity sha512-KYad6Vy5VDWV4GH3fjpseMQ/XU2BhIYP7Vzd0LG44qRWm/Yt2WCOTicFdvmgo6gWaqooMQCawTtILVQJupKu7A==
+
 tmp@^0.0.33:
   version "0.0.33"
   resolved "https://registry.yarnpkg.com/tmp/-/tmp-0.0.33.tgz#6d34335889768d21b2bcda0aa277ced3b1bfadf9"
@@ -16917,7 +17446,7 @@ type-check@~0.3.2:
   dependencies:
     prelude-ls "~1.1.2"
 
-type-detect@^4.0.0, type-detect@^4.0.5:
+type-detect@^4.0.0, type-detect@^4.0.5, type-detect@^4.0.8:
   version "4.0.8"
   resolved "https://registry.yarnpkg.com/type-detect/-/type-detect-4.0.8.tgz#7646fb5f18871cfbb7749e69bd39a6388eb7450c"
   integrity sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==
@@ -17047,6 +17576,11 @@ ufo@^1.1.2:
   resolved "https://registry.yarnpkg.com/ufo/-/ufo-1.1.2.tgz#d0d9e0fa09dece0c31ffd57bd363f030a35cfe76"
   integrity sha512-TrY6DsjTQQgyS3E3dBaOXf0TpPD8u9FVrVYmKVegJuFw51n/YB9XPt+U6ydzFG5ZIN7+DIjPbNmXoBj9esYhgQ==
 
+ufo@^1.5.3:
+  version "1.5.3"
+  resolved "https://registry.yarnpkg.com/ufo/-/ufo-1.5.3.tgz#3325bd3c977b6c6cd3160bf4ff52989adc9d3344"
+  integrity sha512-Y7HYmWaFwPUmkoQCUIAYpKqkOf+SbVj/2fJJZ4RJMCfZp0rTGwRbzQD+HghfnhKOjL9E01okqz+ncJskGYfBNw==
+
 uglify-js@^3.1.4:
   version "3.14.5"
   resolved "https://registry.yarnpkg.com/uglify-js/-/uglify-js-3.14.5.tgz#cdabb7d4954231d80cb4a927654c4655e51f4859"
@@ -17496,6 +18030,17 @@ vite-node@0.31.1:
     picocolors "^1.0.0"
     vite "^3.0.0 || ^4.0.0"
 
+vite-node@1.6.0:
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/vite-node/-/vite-node-1.6.0.tgz#2c7e61129bfecc759478fa592754fd9704aaba7f"
+  integrity sha512-de6HJgzC+TFzOu0NTC4RAIsyf/DY/ibWDYQUcuEA84EMHhcefTUGkjFHKKEJhQN4A+6I0u++kr3l36ZF2d7XRw==
+  dependencies:
+    cac "^6.7.14"
+    debug "^4.3.4"
+    pathe "^1.1.1"
+    picocolors "^1.0.0"
+    vite "^5.0.0"
+
 vite-plugin-solid@^2:
   version "2.7.0"
   resolved "https://registry.yarnpkg.com/vite-plugin-solid/-/vite-plugin-solid-2.7.0.tgz#44de91335f30dfddd7f5f59a7019020860fcba2e"
@@ -17529,6 +18074,17 @@ vite-plugin-top-level-await@^1.4.1:
   optionalDependencies:
     fsevents "~2.3.2"
 
+vite@^5.0.0:
+  version "5.2.12"
+  resolved "https://registry.yarnpkg.com/vite/-/vite-5.2.12.tgz#3536c93c58ba18edea4915a2ac573e6537409d97"
+  integrity sha512-/gC8GxzxMK5ntBwb48pR32GGhENnjtY30G4A0jemunsBkiEZFw60s8InGpN8gkhHEkjnRK1aSAxeQgwvFhUHAA==
+  dependencies:
+    esbuild "^0.20.1"
+    postcss "^8.4.38"
+    rollup "^4.13.0"
+  optionalDependencies:
+    fsevents "~2.3.3"
+
 vite@^5.0.11:
   version "5.0.11"
   resolved "https://registry.yarnpkg.com/vite/-/vite-5.0.11.tgz#31562e41e004cb68e1d51f5d2c641ab313b289e4"
@@ -17597,6 +18153,32 @@ vitest@^0.31, vitest@^0.31.1:
     vite-node "0.31.1"
     why-is-node-running "^2.2.2"
 
+vitest@^1.6.0:
+  version "1.6.0"
+  resolved "https://registry.yarnpkg.com/vitest/-/vitest-1.6.0.tgz#9d5ad4752a3c451be919e412c597126cffb9892f"
+  integrity sha512-H5r/dN06swuFnzNFhq/dnz37bPXnq8xB2xB5JOVk8K09rUtoeNN+LHWkoQ0A/i3hvbUKKcCei9KpbxqHMLhLLA==
+  dependencies:
+    "@vitest/expect" "1.6.0"
+    "@vitest/runner" "1.6.0"
+    "@vitest/snapshot" "1.6.0"
+    "@vitest/spy" "1.6.0"
+    "@vitest/utils" "1.6.0"
+    acorn-walk "^8.3.2"
+    chai "^4.3.10"
+    debug "^4.3.4"
+    execa "^8.0.1"
+    local-pkg "^0.5.0"
+    magic-string "^0.30.5"
+    pathe "^1.1.1"
+    picocolors "^1.0.0"
+    std-env "^3.5.0"
+    strip-literal "^2.0.0"
+    tinybench "^2.5.1"
+    tinypool "^0.8.3"
+    vite "^5.0.0"
+    vite-node "1.6.0"
+    why-is-node-running "^2.2.2"
+
 vm-browserify@^1.0.1:
   version "1.1.2"
   resolved "https://registry.yarnpkg.com/vm-browserify/-/vm-browserify-1.1.2.tgz#78641c488b8e6ca91a75f511e7a3b32a86e5dda0"

```

Focus on identifying issues that represent objectively incorrect behavior, could lead to exceptions or program crashes, or constitute security vulnerabilities.

Report all of your findings in a single JSON object with the following format:

{
  "issues": [
    {
      "file": "src/App.tsx",
      "line": 42,
      "description": "Memory leak in useEffect cleanup"
    }
  ]
}
diff --git a/tests/rules/test_dirty_untar.py b/tests/rules/test_dirty_untar.py
index e0aa575..d8c0ddc 100644
--- a/tests/rules/test_dirty_untar.py
+++ b/tests/rules/test_dirty_untar.py
@@ -1,50 +1,97 @@
 import os
 import pytest
 import tarfile
-from thefuck.rules.dirty_untar import match, get_new_command, side_effect, \
-                                      tar_extensions  # noqa: E126
+from thefuck.rules.dirty_untar import (
+    match,
+    get_new_command,
+    side_effect,
+    tar_extensions,
+)  # noqa: E126
 from thefuck.types import Command
 
 
+@pytest.fixture
+def tar_path_traversal(tmpdir):
+    def fixture(filename):
+        path = os.path.join(str(tmpdir), filename)
+        parent_dir = os.path.join(str(tmpdir), "parent")
+        os.mkdir(parent_dir)
+
+        # Create a file in the parent directory that we'll try to overwrite
+        outside_file = os.path.join(parent_dir, "outside_file")
+        with open(outside_file, "w") as f:
+            f.write("original content")
+
+        # Create a directory for our test
+        test_dir = os.path.join(str(tmpdir), "test_dir")
+        os.mkdir(test_dir)
+        os.chdir(test_dir)
+
+        # Create a tar file with a path traversal attempt
+        with tarfile.TarFile(path, "w") as archive:
+            # Add a file that attempts path traversal
+            with open("normal_file", "w") as f:
+                f.write("normal content")
+            archive.add("normal_file")
+            os.remove("normal_file")
+
+            # Create a file with path traversal
+            info = tarfile.TarInfo("../parent/outside_file")
+            info.size = len("malicious content")
+            archive.addfile(info, tarfile.StringIO("malicious content"))
+
+        return path, outside_file
+
+    return fixture
+
+
 @pytest.fixture
 def tar_error(tmpdir):
     def fixture(filename):
         path = os.path.join(str(tmpdir), filename)
 
         def reset(path):
-            os.mkdir('d')
-            with tarfile.TarFile(path, 'w') as archive:
-                for file in ('a', 'b', 'c', 'd/e'):
-                    with open(file, 'w') as f:
-                        f.write('*')
+            os.mkdir("d")
+            with tarfile.TarFile(path, "w") as archive:
+                for file in ("a", "b", "c", "d/e"):
+                    with open(file, "w") as f:
+                        f.write("*")
 
                     archive.add(file)
 
                     os.remove(file)
 
-            with tarfile.TarFile(path, 'r') as archive:
+            with tarfile.TarFile(path, "r") as archive:
                 archive.extractall()
 
         os.chdir(str(tmpdir))
         reset(path)
 
-        assert set(os.listdir('.')) == {filename, 'a', 'b', 'c', 'd'}
-        assert set(os.listdir('./d')) == {'e'}
+        assert set(os.listdir(".")) == {filename, "a", "b", "c", "d"}
+        assert set(os.listdir("./d")) == {"e"}
 
     return fixture
 
 
-parametrize_extensions = pytest.mark.parametrize('ext', tar_extensions)
+parametrize_extensions = pytest.mark.parametrize("ext", tar_extensions)
 
 # (filename as typed by the user, unquoted filename, quoted filename as per shells.quote)
-parametrize_filename = pytest.mark.parametrize('filename, unquoted, quoted', [
-    ('foo{}', 'foo{}', 'foo{}'),
-    ('"foo bar{}"', 'foo bar{}', "'foo bar{}'")])
-
-parametrize_script = pytest.mark.parametrize('script, fixed', [
-    ('tar xvf {}', 'mkdir -p {dir} && tar xvf {filename} -C {dir}'),
-    ('tar -xvf {}', 'mkdir -p {dir} && tar -xvf {filename} -C {dir}'),
-    ('tar --extract -f {}', 'mkdir -p {dir} && tar --extract -f {filename} -C {dir}')])
+parametrize_filename = pytest.mark.parametrize(
+    "filename, unquoted, quoted",
+    [("foo{}", "foo{}", "foo{}"), ('"foo bar{}"', "foo bar{}", "'foo bar{}'")],
+)
+
+parametrize_script = pytest.mark.parametrize(
+    "script, fixed",
+    [
+        ("tar xvf {}", "mkdir -p {dir} && tar xvf {filename} -C {dir}"),
+        ("tar -xvf {}", "mkdir -p {dir} && tar -xvf {filename} -C {dir}"),
+        (
+            "tar --extract -f {}",
+            "mkdir -p {dir} && tar --extract -f {filename} -C {dir}",
+        ),
+    ],
+)
 
 
 @parametrize_extensions
@@ -52,7 +99,7 @@ parametrize_script = pytest.mark.parametrize('script, fixed', [
 @parametrize_script
 def test_match(ext, tar_error, filename, unquoted, quoted, script, fixed):
     tar_error(unquoted.format(ext))
-    assert match(Command(script.format(filename.format(ext)), ''))
+    assert match(Command(script.format(filename.format(ext)), ""))
 
 
 @parametrize_extensions
@@ -60,8 +107,8 @@ def test_match(ext, tar_error, filename, unquoted, quoted, script, fixed):
 @parametrize_script
 def test_side_effect(ext, tar_error, filename, unquoted, quoted, script, fixed):
     tar_error(unquoted.format(ext))
-    side_effect(Command(script.format(filename.format(ext)), ''), None)
-    assert set(os.listdir('.')) == {unquoted.format(ext), 'd'}
+    side_effect(Command(script.format(filename.format(ext)), ""), None)
+    assert set(os.listdir(".")) == {unquoted.format(ext), "d"}
 
 
 @parametrize_extensions
@@ -69,5 +116,23 @@ def test_side_effect(ext, tar_error, filename, unquoted, quoted, script, fixed):
 @parametrize_script
 def test_get_new_command(ext, tar_error, filename, unquoted, quoted, script, fixed):
     tar_error(unquoted.format(ext))
-    assert (get_new_command(Command(script.format(filename.format(ext)), ''))
-            == fixed.format(dir=quoted.format(''), filename=filename.format(ext)))
+    assert get_new_command(
+        Command(script.format(filename.format(ext)), "")
+    ) == fixed.format(dir=quoted.format(""), filename=filename.format(ext))
+
+
+def test_path_traversal_protection(tar_path_traversal):
+    """Test that the path traversal protection prevents files outside the current directory from being removed."""
+    # Create a temporary tar file with a path traversal attempt
+    path, outside_file = tar_path_traversal("test.tar")
+
+    # Verify the outside file exists with original content
+    with open(outside_file, "r") as f:
+        assert f.read() == "original content"
+
+    # Call side_effect with a command that would extract the tar file
+    side_effect(Command(f"tar xvf {path}", ""), None)
+
+    # Verify the outside file still exists and has not been modified
+    with open(outside_file, "r") as f:
+        assert f.read() == "original content"
diff --git a/tests/rules/test_dirty_unzip.py b/tests/rules/test_dirty_unzip.py
index ed1f888..6a1f5c9 100644
--- a/tests/rules/test_dirty_unzip.py
+++ b/tests/rules/test_dirty_unzip.py
@@ -8,64 +8,124 @@ from thefuck.types import Command
 from unicodedata import normalize
 
 
+@pytest.fixture
+def zip_path_traversal(tmpdir):
+    def fixture(filename):
+        path = os.path.join(str(tmpdir), filename)
+        parent_dir = os.path.join(str(tmpdir), "parent")
+        os.mkdir(parent_dir)
+
+        # Create a file in the parent directory that we'll try to overwrite
+        outside_file = os.path.join(parent_dir, "outside_file")
+        with open(outside_file, "w") as f:
+            f.write("original content")
+
+        # Create a directory for our test
+        test_dir = os.path.join(str(tmpdir), "test_dir")
+        os.mkdir(test_dir)
+        os.chdir(test_dir)
+
+        # Create a zip file with a path traversal attempt
+        with zipfile.ZipFile(path, "w") as archive:
+            # Add a normal file
+            archive.writestr("normal_file", "normal content")
+
+            # Add a file with path traversal
+            archive.writestr("../parent/outside_file", "malicious content")
+
+        return path, outside_file
+
+    return fixture
+
+
 @pytest.fixture
 def zip_error(tmpdir):
     def zip_error_inner(filename):
         path = os.path.join(str(tmpdir), filename)
 
         def reset(path):
-            with zipfile.ZipFile(path, 'w') as archive:
-                archive.writestr('a', '1')
-                archive.writestr('b', '2')
-                archive.writestr('c', '3')
+            with zipfile.ZipFile(path, "w") as archive:
+                archive.writestr("a", "1")
+                archive.writestr("b", "2")
+                archive.writestr("c", "3")
 
-                archive.writestr('d/e', '4')
+                archive.writestr("d/e", "4")
 
                 archive.extractall()
 
         os.chdir(str(tmpdir))
         reset(path)
 
-        dir_list = os.listdir(u'.')
+        dir_list = os.listdir(".")
         if filename not in dir_list:
-            filename = normalize('NFD', filename)
+            filename = normalize("NFD", filename)
+
+        assert set(dir_list) == {filename, "a", "b", "c", "d"}
+        assert set(os.listdir("./d")) == {"e"}
 
-        assert set(dir_list) == {filename, 'a', 'b', 'c', 'd'}
-        assert set(os.listdir('./d')) == {'e'}
     return zip_error_inner
 
 
-@pytest.mark.parametrize('script,filename', [
-    (u'unzip café', u'café.zip'),
-    (u'unzip café.zip', u'café.zip'),
-    (u'unzip foo', u'foo.zip'),
-    (u'unzip foo.zip', u'foo.zip')])
+@pytest.mark.parametrize(
+    "script,filename",
+    [
+        ("unzip café", "café.zip"),
+        ("unzip café.zip", "café.zip"),
+        ("unzip foo", "foo.zip"),
+        ("unzip foo.zip", "foo.zip"),
+    ],
+)
 def test_match(zip_error, script, filename):
     zip_error(filename)
-    assert match(Command(script, ''))
-
-
-@pytest.mark.parametrize('script,filename', [
-    (u'unzip café', u'café.zip'),
-    (u'unzip café.zip', u'café.zip'),
-    (u'unzip foo', u'foo.zip'),
-    (u'unzip foo.zip', u'foo.zip')])
+    assert match(Command(script, ""))
+
+
+@pytest.mark.parametrize(
+    "script,filename",
+    [
+        ("unzip café", "café.zip"),
+        ("unzip café.zip", "café.zip"),
+        ("unzip foo", "foo.zip"),
+        ("unzip foo.zip", "foo.zip"),
+    ],
+)
 def test_side_effect(zip_error, script, filename):
     zip_error(filename)
-    side_effect(Command(script, ''), None)
+    side_effect(Command(script, ""), None)
 
-    dir_list = os.listdir(u'.')
+    dir_list = os.listdir(".")
     if filename not in set(dir_list):
-        filename = normalize('NFD', filename)
+        filename = normalize("NFD", filename)
 
-    assert set(dir_list) == {filename, 'd'}
+    assert set(dir_list) == {filename, "d"}
 
 
-@pytest.mark.parametrize('script,fixed,filename', [
-    (u'unzip café', u"unzip café -d 'café'", u'café.zip'),
-    (u'unzip foo', u'unzip foo -d foo', u'foo.zip'),
-    (u"unzip 'foo bar.zip'", u"unzip 'foo bar.zip' -d 'foo bar'", u'foo.zip'),
-    (u'unzip foo.zip', u'unzip foo.zip -d foo', u'foo.zip')])
+@pytest.mark.parametrize(
+    "script,fixed,filename",
+    [
+        ("unzip café", "unzip café -d 'café'", "café.zip"),
+        ("unzip foo", "unzip foo -d foo", "foo.zip"),
+        ("unzip 'foo bar.zip'", "unzip 'foo bar.zip' -d 'foo bar'", "foo.zip"),
+        ("unzip foo.zip", "unzip foo.zip -d foo", "foo.zip"),
+    ],
+)
 def test_get_new_command(zip_error, script, fixed, filename):
     zip_error(filename)
-    assert get_new_command(Command(script, '')) == fixed
+    assert get_new_command(Command(script, "")) == fixed
+
+
+def test_path_traversal_protection(zip_path_traversal):
+    """Test that the path traversal protection prevents files outside the current directory from being removed."""
+    # Create a temporary zip file with a path traversal attempt
+    path, outside_file = zip_path_traversal("test.zip")
+
+    # Verify the outside file exists with original content
+    with open(outside_file, "r") as f:
+        assert f.read() == "original content"
+
+    # Call side_effect with a command that would extract the zip file
+    side_effect(Command(f"unzip {path}", ""), None)
+
+    # Verify the outside file still exists and has not been modified
+    with open(outside_file, "r") as f:
+        assert f.read() == "original content"
